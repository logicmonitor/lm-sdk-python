# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LogSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_method': 'str',
        'applies_to_script': 'str',
        'resource_mapping': 'list[RestLogSourceResourceMappingV3]',
        'access_groups': 'list[AccessGroup]',
        'collection_attribute': 'RestLogSourceCollectionAttributesV3Object',
        'changelogs': 'list[UpdateReasons]',
        'description': 'str',
        'filters': 'list[RestLogSourceFilterV3]',
        'technical_notes': 'str',
        'lineage_id': 'str',
        'tags': 'list[str]',
        'log_fields': 'list[RestLogSourceLogFieldV3]',
        'installation_metadata': 'IntegrationMetadata',
        'checksum': 'str',
        'name': 'str',
        'id': 'int',
        'access_group_ids': 'list[int]',
        'collection_interval': 'Duration',
        'group': 'str'
    }

    attribute_map = {
        'collection_method': 'collectionMethod',
        'applies_to_script': 'appliesToScript',
        'resource_mapping': 'resourceMapping',
        'access_groups': 'accessGroups',
        'collection_attribute': 'collectionAttribute',
        'changelogs': 'changelogs',
        'description': 'description',
        'filters': 'filters',
        'technical_notes': 'technicalNotes',
        'lineage_id': 'lineageId',
        'tags': 'tags',
        'log_fields': 'logFields',
        'installation_metadata': 'installationMetadata',
        'checksum': 'checksum',
        'name': 'name',
        'id': 'id',
        'access_group_ids': 'accessGroupIds',
        'collection_interval': 'collectionInterval',
        'group': 'group'
    }

    def __init__(self, collection_method=None, applies_to_script=None, resource_mapping=None, access_groups=None, collection_attribute=None, changelogs=None, description=None, filters=None, technical_notes=None, lineage_id=None, tags=None, log_fields=None, installation_metadata=None, checksum=None, name=None, id=None, access_group_ids=None, collection_interval=None, group=None):  # noqa: E501
        """LogSource - a model defined in Swagger"""  # noqa: E501
        self._collection_method = None
        self._applies_to_script = None
        self._resource_mapping = None
        self._access_groups = None
        self._collection_attribute = None
        self._changelogs = None
        self._description = None
        self._filters = None
        self._technical_notes = None
        self._lineage_id = None
        self._tags = None
        self._log_fields = None
        self._installation_metadata = None
        self._checksum = None
        self._name = None
        self._id = None
        self._access_group_ids = None
        self._collection_interval = None
        self._group = None
        self.discriminator = None
        if collection_method is not None:
            self.collection_method = collection_method
        if applies_to_script is not None:
            self.applies_to_script = applies_to_script
        if resource_mapping is not None:
            self.resource_mapping = resource_mapping
        if access_groups is not None:
            self.access_groups = access_groups
        if collection_attribute is not None:
            self.collection_attribute = collection_attribute
        if changelogs is not None:
            self.changelogs = changelogs
        if description is not None:
            self.description = description
        if filters is not None:
            self.filters = filters
        if technical_notes is not None:
            self.technical_notes = technical_notes
        if lineage_id is not None:
            self.lineage_id = lineage_id
        if tags is not None:
            self.tags = tags
        if log_fields is not None:
            self.log_fields = log_fields
        if installation_metadata is not None:
            self.installation_metadata = installation_metadata
        if checksum is not None:
            self.checksum = checksum
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if access_group_ids is not None:
            self.access_group_ids = access_group_ids
        if collection_interval is not None:
            self.collection_interval = collection_interval
        if group is not None:
            self.group = group

    @property
    def collection_method(self):
        """Gets the collection_method of this LogSource.  # noqa: E501


        :return: The collection_method of this LogSource.  # noqa: E501
        :rtype: str
        """
        return self._collection_method

    @collection_method.setter
    def collection_method(self, collection_method):
        """Sets the collection_method of this LogSource.


        :param collection_method: The collection_method of this LogSource.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "WIN_EVENT", "SYSLOG", "DUMMY", "SCRAPE_LOGS", "KUBERNETES_EVENT", "KUBERNETES_POD", "SCRIPT", "SAAS_O365_AUDIT_LOGS", "SNMP_TRAP"]  # noqa: E501
        if collection_method not in allowed_values:
            raise ValueError(
                "Invalid value for `collection_method` ({0}), must be one of {1}"  # noqa: E501
                .format(collection_method, allowed_values)
            )

        self._collection_method = collection_method

    @property
    def applies_to_script(self):
        """Gets the applies_to_script of this LogSource.  # noqa: E501

        The appliesToScript  # noqa: E501

        :return: The applies_to_script of this LogSource.  # noqa: E501
        :rtype: str
        """
        return self._applies_to_script

    @applies_to_script.setter
    def applies_to_script(self, applies_to_script):
        """Sets the applies_to_script of this LogSource.

        The appliesToScript  # noqa: E501

        :param applies_to_script: The applies_to_script of this LogSource.  # noqa: E501
        :type: str
        """

        self._applies_to_script = applies_to_script

    @property
    def resource_mapping(self):
        """Gets the resource_mapping of this LogSource.  # noqa: E501

        resource mapping  # noqa: E501

        :return: The resource_mapping of this LogSource.  # noqa: E501
        :rtype: list[RestLogSourceResourceMappingV3]
        """
        return self._resource_mapping

    @resource_mapping.setter
    def resource_mapping(self, resource_mapping):
        """Sets the resource_mapping of this LogSource.

        resource mapping  # noqa: E501

        :param resource_mapping: The resource_mapping of this LogSource.  # noqa: E501
        :type: list[RestLogSourceResourceMappingV3]
        """

        self._resource_mapping = resource_mapping

    @property
    def access_groups(self):
        """Gets the access_groups of this LogSource.  # noqa: E501

        Module's access groups  # noqa: E501

        :return: The access_groups of this LogSource.  # noqa: E501
        :rtype: list[AccessGroup]
        """
        return self._access_groups

    @access_groups.setter
    def access_groups(self, access_groups):
        """Sets the access_groups of this LogSource.

        Module's access groups  # noqa: E501

        :param access_groups: The access_groups of this LogSource.  # noqa: E501
        :type: list[AccessGroup]
        """

        self._access_groups = access_groups

    @property
    def collection_attribute(self):
        """Gets the collection_attribute of this LogSource.  # noqa: E501


        :return: The collection_attribute of this LogSource.  # noqa: E501
        :rtype: RestLogSourceCollectionAttributesV3Object
        """
        return self._collection_attribute

    @collection_attribute.setter
    def collection_attribute(self, collection_attribute):
        """Sets the collection_attribute of this LogSource.


        :param collection_attribute: The collection_attribute of this LogSource.  # noqa: E501
        :type: RestLogSourceCollectionAttributesV3Object
        """

        self._collection_attribute = collection_attribute

    @property
    def changelogs(self):
        """Gets the changelogs of this LogSource.  # noqa: E501


        :return: The changelogs of this LogSource.  # noqa: E501
        :rtype: list[UpdateReasons]
        """
        return self._changelogs

    @changelogs.setter
    def changelogs(self, changelogs):
        """Sets the changelogs of this LogSource.


        :param changelogs: The changelogs of this LogSource.  # noqa: E501
        :type: list[UpdateReasons]
        """

        self._changelogs = changelogs

    @property
    def description(self):
        """Gets the description of this LogSource.  # noqa: E501

        description  # noqa: E501

        :return: The description of this LogSource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LogSource.

        description  # noqa: E501

        :param description: The description of this LogSource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def filters(self):
        """Gets the filters of this LogSource.  # noqa: E501


        :return: The filters of this LogSource.  # noqa: E501
        :rtype: list[RestLogSourceFilterV3]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this LogSource.


        :param filters: The filters of this LogSource.  # noqa: E501
        :type: list[RestLogSourceFilterV3]
        """

        self._filters = filters

    @property
    def technical_notes(self):
        """Gets the technical_notes of this LogSource.  # noqa: E501

        The technicalNotes  # noqa: E501

        :return: The technical_notes of this LogSource.  # noqa: E501
        :rtype: str
        """
        return self._technical_notes

    @technical_notes.setter
    def technical_notes(self, technical_notes):
        """Sets the technical_notes of this LogSource.

        The technicalNotes  # noqa: E501

        :param technical_notes: The technical_notes of this LogSource.  # noqa: E501
        :type: str
        """

        self._technical_notes = technical_notes

    @property
    def lineage_id(self):
        """Gets the lineage_id of this LogSource.  # noqa: E501

        The lineageId the LMModule belongs to  # noqa: E501

        :return: The lineage_id of this LogSource.  # noqa: E501
        :rtype: str
        """
        return self._lineage_id

    @lineage_id.setter
    def lineage_id(self, lineage_id):
        """Sets the lineage_id of this LogSource.

        The lineageId the LMModule belongs to  # noqa: E501

        :param lineage_id: The lineage_id of this LogSource.  # noqa: E501
        :type: str
        """

        self._lineage_id = lineage_id

    @property
    def tags(self):
        """Gets the tags of this LogSource.  # noqa: E501

        tags  # noqa: E501

        :return: The tags of this LogSource.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LogSource.

        tags  # noqa: E501

        :param tags: The tags of this LogSource.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def log_fields(self):
        """Gets the log_fields of this LogSource.  # noqa: E501


        :return: The log_fields of this LogSource.  # noqa: E501
        :rtype: list[RestLogSourceLogFieldV3]
        """
        return self._log_fields

    @log_fields.setter
    def log_fields(self, log_fields):
        """Sets the log_fields of this LogSource.


        :param log_fields: The log_fields of this LogSource.  # noqa: E501
        :type: list[RestLogSourceLogFieldV3]
        """

        self._log_fields = log_fields

    @property
    def installation_metadata(self):
        """Gets the installation_metadata of this LogSource.  # noqa: E501


        :return: The installation_metadata of this LogSource.  # noqa: E501
        :rtype: IntegrationMetadata
        """
        return self._installation_metadata

    @installation_metadata.setter
    def installation_metadata(self, installation_metadata):
        """Sets the installation_metadata of this LogSource.


        :param installation_metadata: The installation_metadata of this LogSource.  # noqa: E501
        :type: IntegrationMetadata
        """

        self._installation_metadata = installation_metadata

    @property
    def checksum(self):
        """Gets the checksum of this LogSource.  # noqa: E501

        The metadata checksum for the LMModule content  # noqa: E501

        :return: The checksum of this LogSource.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this LogSource.

        The metadata checksum for the LMModule content  # noqa: E501

        :param checksum: The checksum of this LogSource.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def name(self):
        """Gets the name of this LogSource.  # noqa: E501

        The log source name  # noqa: E501

        :return: The name of this LogSource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LogSource.

        The log source name  # noqa: E501

        :param name: The name of this LogSource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this LogSource.  # noqa: E501

        The ID of the LMModule  # noqa: E501

        :return: The id of this LogSource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogSource.

        The ID of the LMModule  # noqa: E501

        :param id: The id of this LogSource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def access_group_ids(self):
        """Gets the access_group_ids of this LogSource.  # noqa: E501

        The Access Groups Id's  # noqa: E501

        :return: The access_group_ids of this LogSource.  # noqa: E501
        :rtype: list[int]
        """
        return self._access_group_ids

    @access_group_ids.setter
    def access_group_ids(self, access_group_ids):
        """Sets the access_group_ids of this LogSource.

        The Access Groups Id's  # noqa: E501

        :param access_group_ids: The access_group_ids of this LogSource.  # noqa: E501
        :type: list[int]
        """

        self._access_group_ids = access_group_ids

    @property
    def collection_interval(self):
        """Gets the collection_interval of this LogSource.  # noqa: E501


        :return: The collection_interval of this LogSource.  # noqa: E501
        :rtype: Duration
        """
        return self._collection_interval

    @collection_interval.setter
    def collection_interval(self, collection_interval):
        """Sets the collection_interval of this LogSource.


        :param collection_interval: The collection_interval of this LogSource.  # noqa: E501
        :type: Duration
        """

        self._collection_interval = collection_interval

    @property
    def group(self):
        """Gets the group of this LogSource.  # noqa: E501

        group  # noqa: E501

        :return: The group of this LogSource.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this LogSource.

        group  # noqa: E501

        :param group: The group of this LogSource.  # noqa: E501
        :type: str
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
