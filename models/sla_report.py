# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class SLAReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calculation_method': 'int',
        'date_range': 'str',
        'timezone': 'str',
        'display_with_availability': 'bool',
        'columns': 'list[DynamicColumn]',
        'display_summary': 'bool',
        'day_in_one_week': 'str',
        'period_in_one_day': 'str',
        'metrics': 'list[SlaMetric]',
        'unmonitored_time': 'int'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'calculation_method': 'calculationMethod',
        'date_range': 'dateRange',
        'timezone': 'timezone',
        'display_with_availability': 'displayWithAvailability',
        'columns': 'columns',
        'display_summary': 'displaySummary',
        'day_in_one_week': 'dayInOneWeek',
        'period_in_one_day': 'periodInOneDay',
        'metrics': 'metrics',
        'unmonitored_time': 'unmonitoredTime'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, calculation_method=None, date_range=None, timezone=None, display_with_availability=None, columns=None, display_summary=None, day_in_one_week=None, period_in_one_day=None, metrics=None, unmonitored_time=None, *args, **kwargs):  # noqa: E501
        """SLAReport - a model defined in Swagger"""  # noqa: E501
        self._calculation_method = None
        self._date_range = None
        self._timezone = None
        self._display_with_availability = None
        self._columns = None
        self._display_summary = None
        self._day_in_one_week = None
        self._period_in_one_day = None
        self._metrics = None
        self._unmonitored_time = None
        self.discriminator = None
        if calculation_method is not None:
            self.calculation_method = calculation_method
        if date_range is not None:
            self.date_range = date_range
        if timezone is not None:
            self.timezone = timezone
        if display_with_availability is not None:
            self.display_with_availability = display_with_availability
        if columns is not None:
            self.columns = columns
        if display_summary is not None:
            self.display_summary = display_summary
        if day_in_one_week is not None:
            self.day_in_one_week = day_in_one_week
        if period_in_one_day is not None:
            self.period_in_one_day = period_in_one_day
        self.metrics = metrics
        if unmonitored_time is not None:
            self.unmonitored_time = unmonitored_time
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def calculation_method(self):
        """Gets the calculation_method of this SLAReport.  # noqa: E501

        Calculation method: 0 = percent all resources available, 1 = average of all SLA metrics  # noqa: E501

        :return: The calculation_method of this SLAReport.  # noqa: E501
        :rtype: int
        """
        return self._calculation_method

    @calculation_method.setter
    def calculation_method(self, calculation_method):
        """Sets the calculation_method of this SLAReport.

        Calculation method: 0 = percent all resources available, 1 = average of all SLA metrics  # noqa: E501

        :param calculation_method: The calculation_method of this SLAReport.  # noqa: E501
        :type: int
        """

        self._calculation_method = calculation_method

    @property
    def date_range(self):
        """Gets the date_range of this SLAReport.  # noqa: E501

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :return: The date_range of this SLAReport.  # noqa: E501
        :rtype: str
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this SLAReport.

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :param date_range: The date_range of this SLAReport.  # noqa: E501
        :type: str
        """

        self._date_range = date_range

    @property
    def timezone(self):
        """Gets the timezone of this SLAReport.  # noqa: E501

        The specific timezone for the report  # noqa: E501

        :return: The timezone of this SLAReport.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SLAReport.

        The specific timezone for the report  # noqa: E501

        :param timezone: The timezone of this SLAReport.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def display_with_availability(self):
        """Gets the display_with_availability of this SLAReport.  # noqa: E501

        If true, only devices with less than 100% availability will be displayed in the report  # noqa: E501

        :return: The display_with_availability of this SLAReport.  # noqa: E501
        :rtype: bool
        """
        return self._display_with_availability

    @display_with_availability.setter
    def display_with_availability(self, display_with_availability):
        """Sets the display_with_availability of this SLAReport.

        If true, only devices with less than 100% availability will be displayed in the report  # noqa: E501

        :param display_with_availability: The display_with_availability of this SLAReport.  # noqa: E501
        :type: bool
        """

        self._display_with_availability = display_with_availability

    @property
    def columns(self):
        """Gets the columns of this SLAReport.  # noqa: E501

        The columns displayed in the report  # noqa: E501

        :return: The columns of this SLAReport.  # noqa: E501
        :rtype: list[DynamicColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this SLAReport.

        The columns displayed in the report  # noqa: E501

        :param columns: The columns of this SLAReport.  # noqa: E501
        :type: list[DynamicColumn]
        """

        self._columns = columns

    @property
    def display_summary(self):
        """Gets the display_summary of this SLAReport.  # noqa: E501

        If true, the SLA summary (total %) will be displayed  # noqa: E501

        :return: The display_summary of this SLAReport.  # noqa: E501
        :rtype: bool
        """
        return self._display_summary

    @display_summary.setter
    def display_summary(self, display_summary):
        """Sets the display_summary of this SLAReport.

        If true, the SLA summary (total %) will be displayed  # noqa: E501

        :param display_summary: The display_summary of this SLAReport.  # noqa: E501
        :type: bool
        """

        self._display_summary = display_summary

    @property
    def day_in_one_week(self):
        """Gets the day_in_one_week of this SLAReport.  # noqa: E501

        The days of the week that the SLA report should take into account, where multiple values are separated by commas and * refers to all days of the week  # noqa: E501

        :return: The day_in_one_week of this SLAReport.  # noqa: E501
        :rtype: str
        """
        return self._day_in_one_week

    @day_in_one_week.setter
    def day_in_one_week(self, day_in_one_week):
        """Sets the day_in_one_week of this SLAReport.

        The days of the week that the SLA report should take into account, where multiple values are separated by commas and * refers to all days of the week  # noqa: E501

        :param day_in_one_week: The day_in_one_week of this SLAReport.  # noqa: E501
        :type: str
        """

        self._day_in_one_week = day_in_one_week

    @property
    def period_in_one_day(self):
        """Gets the period_in_one_day of this SLAReport.  # noqa: E501

        The hours of each selected day that the SLA report should take into account, where * refers to all hours  # noqa: E501

        :return: The period_in_one_day of this SLAReport.  # noqa: E501
        :rtype: str
        """
        return self._period_in_one_day

    @period_in_one_day.setter
    def period_in_one_day(self, period_in_one_day):
        """Sets the period_in_one_day of this SLAReport.

        The hours of each selected day that the SLA report should take into account, where * refers to all hours  # noqa: E501

        :param period_in_one_day: The period_in_one_day of this SLAReport.  # noqa: E501
        :type: str
        """

        self._period_in_one_day = period_in_one_day

    @property
    def metrics(self):
        """Gets the metrics of this SLAReport.  # noqa: E501

        The datapoints and corresponding SLA thresholds that will be included in the report, where each metric includes seven fields: groupName, deviceName, dataSourceFullName, dataSourceId, instances, metric and threshold. Threshold should comprise of an operator and a number separated by a space, where valid operators are >, <, !=, =, >= and <=  # noqa: E501

        :return: The metrics of this SLAReport.  # noqa: E501
        :rtype: list[SlaMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this SLAReport.

        The datapoints and corresponding SLA thresholds that will be included in the report, where each metric includes seven fields: groupName, deviceName, dataSourceFullName, dataSourceId, instances, metric and threshold. Threshold should comprise of an operator and a number separated by a space, where valid operators are >, <, !=, =, >= and <=  # noqa: E501

        :param metrics: The metrics of this SLAReport.  # noqa: E501
        :type: list[SlaMetric]
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

    @property
    def unmonitored_time(self):
        """Gets the unmonitored_time of this SLAReport.  # noqa: E501

        0|1|2 - How the time we have no data for the device should be counted, where 1 = ignore no data (subtract from total time), 2 = count as violation (subtract from uptime), 3 = count as available (add to uptime)  # noqa: E501

        :return: The unmonitored_time of this SLAReport.  # noqa: E501
        :rtype: int
        """
        return self._unmonitored_time

    @unmonitored_time.setter
    def unmonitored_time(self, unmonitored_time):
        """Sets the unmonitored_time of this SLAReport.

        0|1|2 - How the time we have no data for the device should be counted, where 1 = ignore no data (subtract from total time), 2 = count as violation (subtract from uptime), 3 = count as available (add to uptime)  # noqa: E501

        :param unmonitored_time: The unmonitored_time of this SLAReport.  # noqa: E501
        :type: int
        """

        self._unmonitored_time = unmonitored_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SLAReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SLAReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
