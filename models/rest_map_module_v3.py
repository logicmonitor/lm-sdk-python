# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestMapModuleV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'list[int]',
        'failure': 'list[str]',
        'mapping_details': 'list[MapModuleToAccessGroup]'
    }

    attribute_map = {
        'success': 'success',
        'failure': 'failure',
        'mapping_details': 'mappingDetails'
    }

    def __init__(self, success=None, failure=None, mapping_details=None):  # noqa: E501
        """RestMapModuleV3 - a model defined in Swagger"""  # noqa: E501
        self._success = None
        self._failure = None
        self._mapping_details = None
        self.discriminator = None
        if success is not None:
            self.success = success
        if failure is not None:
            self.failure = failure
        self.mapping_details = mapping_details

    @property
    def success(self):
        """Gets the success of this RestMapModuleV3.  # noqa: E501

        The Module Id's mapped successfully  # noqa: E501

        :return: The success of this RestMapModuleV3.  # noqa: E501
        :rtype: list[int]
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this RestMapModuleV3.

        The Module Id's mapped successfully  # noqa: E501

        :param success: The success of this RestMapModuleV3.  # noqa: E501
        :type: list[int]
        """

        self._success = success

    @property
    def failure(self):
        """Gets the failure of this RestMapModuleV3.  # noqa: E501

        The Module Id's not mapped successfully  # noqa: E501

        :return: The failure of this RestMapModuleV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this RestMapModuleV3.

        The Module Id's not mapped successfully  # noqa: E501

        :param failure: The failure of this RestMapModuleV3.  # noqa: E501
        :type: list[str]
        """

        self._failure = failure

    @property
    def mapping_details(self):
        """Gets the mapping_details of this RestMapModuleV3.  # noqa: E501

        Can provide module id, module type and access group for mapping  # noqa: E501

        :return: The mapping_details of this RestMapModuleV3.  # noqa: E501
        :rtype: list[MapModuleToAccessGroup]
        """
        return self._mapping_details

    @mapping_details.setter
    def mapping_details(self, mapping_details):
        """Sets the mapping_details of this RestMapModuleV3.

        Can provide module id, module type and access group for mapping  # noqa: E501

        :param mapping_details: The mapping_details of this RestMapModuleV3.  # noqa: E501
        :type: list[MapModuleToAccessGroup]
        """
        if mapping_details is None:
            raise ValueError("Invalid value for `mapping_details`, must not be `None`")  # noqa: E501

        self._mapping_details = mapping_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestMapModuleV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestMapModuleV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
