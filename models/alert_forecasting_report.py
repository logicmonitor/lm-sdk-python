# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class AlertForecastingReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sorted_by': 'int',
        'confidence_level': 'int',
        'hosts_val_type': 'str',
        'date_range': 'str',
        'hosts_val': 'str',
        'top10_only': 'bool',
        'columns': 'list[DynamicColumn]',
        'metrics': 'list[Metric]',
        'algorithm': 'str'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'sorted_by': 'sortedBy',
        'confidence_level': 'confidenceLevel',
        'hosts_val_type': 'hostsValType',
        'date_range': 'dateRange',
        'hosts_val': 'hostsVal',
        'top10_only': 'top10Only',
        'columns': 'columns',
        'metrics': 'metrics',
        'algorithm': 'algorithm'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, sorted_by=None, confidence_level=None, hosts_val_type=None, date_range=None, hosts_val=None, top10_only=None, columns=None, metrics=None, algorithm=None, *args, **kwargs):  # noqa: E501
        """AlertForecastingReport - a model defined in Swagger"""  # noqa: E501
        self._sorted_by = None
        self._confidence_level = None
        self._hosts_val_type = None
        self._date_range = None
        self._hosts_val = None
        self._top10_only = None
        self._columns = None
        self._metrics = None
        self._algorithm = None
        self.discriminator = None
        if sorted_by is not None:
            self.sorted_by = sorted_by
        self.confidence_level = confidence_level
        self.hosts_val_type = hosts_val_type
        if date_range is not None:
            self.date_range = date_range
        if hosts_val is not None:
            self.hosts_val = hosts_val
        if top10_only is not None:
            self.top10_only = top10_only
        if columns is not None:
            self.columns = columns
        self.metrics = metrics
        if algorithm is not None:
            self.algorithm = algorithm
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def sorted_by(self):
        """Gets the sorted_by of this AlertForecastingReport.  # noqa: E501

        The sort option for the alert forecast report  # noqa: E501

        :return: The sorted_by of this AlertForecastingReport.  # noqa: E501
        :rtype: int
        """
        return self._sorted_by

    @sorted_by.setter
    def sorted_by(self, sorted_by):
        """Sets the sorted_by of this AlertForecastingReport.

        The sort option for the alert forecast report  # noqa: E501

        :param sorted_by: The sorted_by of this AlertForecastingReport.  # noqa: E501
        :type: int
        """

        self._sorted_by = sorted_by

    @property
    def confidence_level(self):
        """Gets the confidence_level of this AlertForecastingReport.  # noqa: E501

        The confidence level when do forecasting  # noqa: E501

        :return: The confidence_level of this AlertForecastingReport.  # noqa: E501
        :rtype: int
        """
        return self._confidence_level

    @confidence_level.setter
    def confidence_level(self, confidence_level):
        """Sets the confidence_level of this AlertForecastingReport.

        The confidence level when do forecasting  # noqa: E501

        :param confidence_level: The confidence_level of this AlertForecastingReport.  # noqa: E501
        :type: int
        """
        if confidence_level is None:
            raise ValueError("Invalid value for `confidence_level`, must not be `None`")  # noqa: E501

        self._confidence_level = confidence_level

    @property
    def hosts_val_type(self):
        """Gets the hosts_val_type of this AlertForecastingReport.  # noqa: E501

        The type of the resource selection. Acceptable values are: host, group  # noqa: E501

        :return: The hosts_val_type of this AlertForecastingReport.  # noqa: E501
        :rtype: str
        """
        return self._hosts_val_type

    @hosts_val_type.setter
    def hosts_val_type(self, hosts_val_type):
        """Sets the hosts_val_type of this AlertForecastingReport.

        The type of the resource selection. Acceptable values are: host, group  # noqa: E501

        :param hosts_val_type: The hosts_val_type of this AlertForecastingReport.  # noqa: E501
        :type: str
        """
        if hosts_val_type is None:
            raise ValueError("Invalid value for `hosts_val_type`, must not be `None`")  # noqa: E501

        self._hosts_val_type = hosts_val_type

    @property
    def date_range(self):
        """Gets the date_range of this AlertForecastingReport.  # noqa: E501

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :return: The date_range of this AlertForecastingReport.  # noqa: E501
        :rtype: str
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this AlertForecastingReport.

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :param date_range: The date_range of this AlertForecastingReport.  # noqa: E501
        :type: str
        """

        self._date_range = date_range

    @property
    def hosts_val(self):
        """Gets the hosts_val of this AlertForecastingReport.  # noqa: E501

        The group or device name selected for the report  # noqa: E501

        :return: The hosts_val of this AlertForecastingReport.  # noqa: E501
        :rtype: str
        """
        return self._hosts_val

    @hosts_val.setter
    def hosts_val(self, hosts_val):
        """Sets the hosts_val of this AlertForecastingReport.

        The group or device name selected for the report  # noqa: E501

        :param hosts_val: The hosts_val of this AlertForecastingReport.  # noqa: E501
        :type: str
        """

        self._hosts_val = hosts_val

    @property
    def top10_only(self):
        """Gets the top10_only of this AlertForecastingReport.  # noqa: E501

        true | false false: CPU metrics will be displayed for all selected devices or groups true: CPU metrics will only be displayed for the top ten device or groups  # noqa: E501

        :return: The top10_only of this AlertForecastingReport.  # noqa: E501
        :rtype: bool
        """
        return self._top10_only

    @top10_only.setter
    def top10_only(self, top10_only):
        """Sets the top10_only of this AlertForecastingReport.

        true | false false: CPU metrics will be displayed for all selected devices or groups true: CPU metrics will only be displayed for the top ten device or groups  # noqa: E501

        :param top10_only: The top10_only of this AlertForecastingReport.  # noqa: E501
        :type: bool
        """

        self._top10_only = top10_only

    @property
    def columns(self):
        """Gets the columns of this AlertForecastingReport.  # noqa: E501

        The columns displayed in the report  # noqa: E501

        :return: The columns of this AlertForecastingReport.  # noqa: E501
        :rtype: list[DynamicColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this AlertForecastingReport.

        The columns displayed in the report  # noqa: E501

        :param columns: The columns of this AlertForecastingReport.  # noqa: E501
        :type: list[DynamicColumn]
        """

        self._columns = columns

    @property
    def metrics(self):
        """Gets the metrics of this AlertForecastingReport.  # noqa: E501

        The datapoints that needs to do forecasting  # noqa: E501

        :return: The metrics of this AlertForecastingReport.  # noqa: E501
        :rtype: list[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this AlertForecastingReport.

        The datapoints that needs to do forecasting  # noqa: E501

        :param metrics: The metrics of this AlertForecastingReport.  # noqa: E501
        :type: list[Metric]
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

    @property
    def algorithm(self):
        """Gets the algorithm of this AlertForecastingReport.  # noqa: E501

        Forecast method for the report. Acceptable values are: Linear, ARIMA  # noqa: E501

        :return: The algorithm of this AlertForecastingReport.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this AlertForecastingReport.

        Forecast method for the report. Acceptable values are: Linear, ARIMA  # noqa: E501

        :param algorithm: The algorithm of this AlertForecastingReport.  # noqa: E501
        :type: str
        """

        self._algorithm = algorithm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertForecastingReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertForecastingReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
