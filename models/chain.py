# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from logicmonitor_sdk.models.period import Period  # noqa: F401,E501
from logicmonitor_sdk.models.recipient import Recipient  # noqa: F401,E501


class Chain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'period': 'Period',
        'stages': 'list[list[Recipient]]',
        'type': 'str'
    }

    attribute_map = {
        'period': 'period',
        'stages': 'stages',
        'type': 'type'
    }

    def __init__(self, period=None, stages=None, type=None):  # noqa: E501
        """Chain - a model defined in Swagger"""  # noqa: E501

        self._period = None
        self._stages = None
        self._type = None
        self.discriminator = None

        if period is not None:
            self.period = period
        self.stages = stages
        self.type = type

    @property
    def period(self):
        """Gets the period of this Chain.  # noqa: E501


        :return: The period of this Chain.  # noqa: E501
        :rtype: Period
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Chain.


        :param period: The period of this Chain.  # noqa: E501
        :type: Period
        """

        self._period = period

    @property
    def stages(self):
        """Gets the stages of this Chain.  # noqa: E501


        :return: The stages of this Chain.  # noqa: E501
        :rtype: list[list[Recipient]]
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this Chain.


        :param stages: The stages of this Chain.  # noqa: E501
        :type: list[list[Recipient]]
        """
        if stages is None:
            raise ValueError("Invalid value for `stages`, must not be `None`")  # noqa: E501

        self._stages = stages

    @property
    def type(self):
        """Gets the type of this Chain.  # noqa: E501

        single  # noqa: E501

        :return: The type of this Chain.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Chain.

        single  # noqa: E501

        :param type: The type of this Chain.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Chain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Chain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
