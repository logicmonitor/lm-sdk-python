# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from logicmonitor_sdk.models.array_node import ArrayNode  # noqa: F401,E501
from logicmonitor_sdk.models.object_node import ObjectNode  # noqa: F401,E501
from logicmonitor_sdk.models.rest_response_meta_block import RestResponseMetaBlock  # noqa: F401,E501


class RestResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'diagnostics': 'ArrayNode',
        'data': 'ObjectNode',
        'successes': 'ArrayNode',
        'meta': 'RestResponseMetaBlock',
        'warnings': 'ArrayNode',
        'errors': 'ArrayNode'
    }

    attribute_map = {
        'diagnostics': 'diagnostics',
        'data': 'data',
        'successes': 'successes',
        'meta': 'meta',
        'warnings': 'warnings',
        'errors': 'errors'
    }

    def __init__(self, diagnostics=None, data=None, successes=None, meta=None, warnings=None, errors=None):  # noqa: E501
        """RestResponse - a model defined in Swagger"""  # noqa: E501

        self._diagnostics = None
        self._data = None
        self._successes = None
        self._meta = None
        self._warnings = None
        self._errors = None
        self.discriminator = None

        if diagnostics is not None:
            self.diagnostics = diagnostics
        if data is not None:
            self.data = data
        if successes is not None:
            self.successes = successes
        if meta is not None:
            self.meta = meta
        if warnings is not None:
            self.warnings = warnings
        if errors is not None:
            self.errors = errors

    @property
    def diagnostics(self):
        """Gets the diagnostics of this RestResponse.  # noqa: E501


        :return: The diagnostics of this RestResponse.  # noqa: E501
        :rtype: ArrayNode
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this RestResponse.


        :param diagnostics: The diagnostics of this RestResponse.  # noqa: E501
        :type: ArrayNode
        """

        self._diagnostics = diagnostics

    @property
    def data(self):
        """Gets the data of this RestResponse.  # noqa: E501


        :return: The data of this RestResponse.  # noqa: E501
        :rtype: ObjectNode
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RestResponse.


        :param data: The data of this RestResponse.  # noqa: E501
        :type: ObjectNode
        """

        self._data = data

    @property
    def successes(self):
        """Gets the successes of this RestResponse.  # noqa: E501


        :return: The successes of this RestResponse.  # noqa: E501
        :rtype: ArrayNode
        """
        return self._successes

    @successes.setter
    def successes(self, successes):
        """Sets the successes of this RestResponse.


        :param successes: The successes of this RestResponse.  # noqa: E501
        :type: ArrayNode
        """

        self._successes = successes

    @property
    def meta(self):
        """Gets the meta of this RestResponse.  # noqa: E501


        :return: The meta of this RestResponse.  # noqa: E501
        :rtype: RestResponseMetaBlock
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this RestResponse.


        :param meta: The meta of this RestResponse.  # noqa: E501
        :type: RestResponseMetaBlock
        """

        self._meta = meta

    @property
    def warnings(self):
        """Gets the warnings of this RestResponse.  # noqa: E501


        :return: The warnings of this RestResponse.  # noqa: E501
        :rtype: ArrayNode
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this RestResponse.


        :param warnings: The warnings of this RestResponse.  # noqa: E501
        :type: ArrayNode
        """

        self._warnings = warnings

    @property
    def errors(self):
        """Gets the errors of this RestResponse.  # noqa: E501


        :return: The errors of this RestResponse.  # noqa: E501
        :rtype: ArrayNode
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this RestResponse.


        :param errors: The errors of this RestResponse.  # noqa: E501
        :type: ArrayNode
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
