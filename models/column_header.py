# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ColumnHeader(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'need_forecast': 'bool',
        'display_type': 'str',
        'unit_label': 'str',
        'name': 'str'
    }

    attribute_map = {
        'need_forecast': 'needForecast',
        'display_type': 'displayType',
        'unit_label': 'unitLabel',
        'name': 'name'
    }

    def __init__(self, need_forecast=None, display_type=None, unit_label=None, name=None):  # noqa: E501
        """ColumnHeader - a model defined in Swagger"""  # noqa: E501

        self._need_forecast = None
        self._display_type = None
        self._unit_label = None
        self._name = None
        self.discriminator = None

        if need_forecast is not None:
            self.need_forecast = need_forecast
        if display_type is not None:
            self.display_type = display_type
        if unit_label is not None:
            self.unit_label = unit_label
        if name is not None:
            self.name = name

    @property
    def need_forecast(self):
        """Gets the need_forecast of this ColumnHeader.  # noqa: E501


        :return: The need_forecast of this ColumnHeader.  # noqa: E501
        :rtype: bool
        """
        return self._need_forecast

    @need_forecast.setter
    def need_forecast(self, need_forecast):
        """Sets the need_forecast of this ColumnHeader.


        :param need_forecast: The need_forecast of this ColumnHeader.  # noqa: E501
        :type: bool
        """

        self._need_forecast = need_forecast

    @property
    def display_type(self):
        """Gets the display_type of this ColumnHeader.  # noqa: E501


        :return: The display_type of this ColumnHeader.  # noqa: E501
        :rtype: str
        """
        return self._display_type

    @display_type.setter
    def display_type(self, display_type):
        """Sets the display_type of this ColumnHeader.


        :param display_type: The display_type of this ColumnHeader.  # noqa: E501
        :type: str
        """

        self._display_type = display_type

    @property
    def unit_label(self):
        """Gets the unit_label of this ColumnHeader.  # noqa: E501


        :return: The unit_label of this ColumnHeader.  # noqa: E501
        :rtype: str
        """
        return self._unit_label

    @unit_label.setter
    def unit_label(self, unit_label):
        """Sets the unit_label of this ColumnHeader.


        :param unit_label: The unit_label of this ColumnHeader.  # noqa: E501
        :type: str
        """

        self._unit_label = unit_label

    @property
    def name(self):
        """Gets the name of this ColumnHeader.  # noqa: E501


        :return: The name of this ColumnHeader.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ColumnHeader.


        :param name: The name of this ColumnHeader.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ColumnHeader, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ColumnHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
