# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.widget import Widget  # noqa: F401,E501

class WebsiteIndividualsStatusWidget(Widget):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_internal': 'bool',
        'website_name': 'str',
        'website_id': 'int',
        'website_group_id': 'int',
        'locations': 'list[LocationData]',
        'website_group_name': 'str',
        'graph': 'str'
    }
    if hasattr(Widget, "swagger_types"):
        swagger_types.update(Widget.swagger_types)

    attribute_map = {
        'is_internal': 'isInternal',
        'website_name': 'websiteName',
        'website_id': 'websiteId',
        'website_group_id': 'websiteGroupId',
        'locations': 'locations',
        'website_group_name': 'websiteGroupName',
        'graph': 'graph'
    }
    if hasattr(Widget, "attribute_map"):
        attribute_map.update(Widget.attribute_map)

    def __init__(self, is_internal=None, website_name=None, website_id=None, website_group_id=None, locations=None, website_group_name=None, graph=None, *args, **kwargs):  # noqa: E501
        """WebsiteIndividualsStatusWidget - a model defined in Swagger"""  # noqa: E501
        self._is_internal = None
        self._website_name = None
        self._website_id = None
        self._website_group_id = None
        self._locations = None
        self._website_group_name = None
        self._graph = None
        self.discriminator = None
        if is_internal is not None:
            self.is_internal = is_internal
        if website_name is not None:
            self.website_name = website_name
        if website_id is not None:
            self.website_id = website_id
        if website_group_id is not None:
            self.website_group_id = website_group_id
        self.locations = locations
        if website_group_name is not None:
            self.website_group_name = website_group_name
        if graph is not None:
            self.graph = graph
        Widget.__init__(self, *args, **kwargs)

    @property
    def is_internal(self):
        """Gets the is_internal of this WebsiteIndividualsStatusWidget.  # noqa: E501

        Whether it is an internal website check  # noqa: E501

        :return: The is_internal of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this WebsiteIndividualsStatusWidget.

        Whether it is an internal website check  # noqa: E501

        :param is_internal: The is_internal of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :type: bool
        """

        self._is_internal = is_internal

    @property
    def website_name(self):
        """Gets the website_name of this WebsiteIndividualsStatusWidget.  # noqa: E501

        The name of the website that status is displayed for  # noqa: E501

        :return: The website_name of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :rtype: str
        """
        return self._website_name

    @website_name.setter
    def website_name(self, website_name):
        """Sets the website_name of this WebsiteIndividualsStatusWidget.

        The name of the website that status is displayed for  # noqa: E501

        :param website_name: The website_name of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :type: str
        """

        self._website_name = website_name

    @property
    def website_id(self):
        """Gets the website_id of this WebsiteIndividualsStatusWidget.  # noqa: E501

        The id of the website that status is displayed for  # noqa: E501

        :return: The website_id of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :rtype: int
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this WebsiteIndividualsStatusWidget.

        The id of the website that status is displayed for  # noqa: E501

        :param website_id: The website_id of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :type: int
        """

        self._website_id = website_id

    @property
    def website_group_id(self):
        """Gets the website_group_id of this WebsiteIndividualsStatusWidget.  # noqa: E501

        The id of the group associated with the website that status is displayed for  # noqa: E501

        :return: The website_group_id of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :rtype: int
        """
        return self._website_group_id

    @website_group_id.setter
    def website_group_id(self, website_group_id):
        """Sets the website_group_id of this WebsiteIndividualsStatusWidget.

        The id of the group associated with the website that status is displayed for  # noqa: E501

        :param website_group_id: The website_group_id of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :type: int
        """

        self._website_group_id = website_group_id

    @property
    def locations(self):
        """Gets the locations of this WebsiteIndividualsStatusWidget.  # noqa: E501

        The checkpoint locations for which data is displayed  # noqa: E501

        :return: The locations of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :rtype: list[LocationData]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this WebsiteIndividualsStatusWidget.

        The checkpoint locations for which data is displayed  # noqa: E501

        :param locations: The locations of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :type: list[LocationData]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")  # noqa: E501

        self._locations = locations

    @property
    def website_group_name(self):
        """Gets the website_group_name of this WebsiteIndividualsStatusWidget.  # noqa: E501

        The group associated with the website that status is displayed for  # noqa: E501

        :return: The website_group_name of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :rtype: str
        """
        return self._website_group_name

    @website_group_name.setter
    def website_group_name(self, website_group_name):
        """Sets the website_group_name of this WebsiteIndividualsStatusWidget.

        The group associated with the website that status is displayed for  # noqa: E501

        :param website_group_name: The website_group_name of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :type: str
        """

        self._website_group_name = website_group_name

    @property
    def graph(self):
        """Gets the graph of this WebsiteIndividualsStatusWidget.  # noqa: E501

        The website graph name - this should always be checkpointStatus  # noqa: E501

        :return: The graph of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :rtype: str
        """
        return self._graph

    @graph.setter
    def graph(self, graph):
        """Sets the graph of this WebsiteIndividualsStatusWidget.

        The website graph name - this should always be checkpointStatus  # noqa: E501

        :param graph: The graph of this WebsiteIndividualsStatusWidget.  # noqa: E501
        :type: str
        """

        self._graph = graph

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebsiteIndividualsStatusWidget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebsiteIndividualsStatusWidget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
