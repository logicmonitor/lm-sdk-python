# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppliesToFunction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'installation_metadata': 'IntegrationMetadata',
        'code': 'str',
        'access_groups': 'list[AccessGroup]',
        'name': 'str',
        'checksum': 'str',
        'description': 'str',
        'id': 'int',
        'access_group_ids': 'list[int]',
        'lineage_id': 'str'
    }

    attribute_map = {
        'installation_metadata': 'installationMetadata',
        'code': 'code',
        'access_groups': 'accessGroups',
        'name': 'name',
        'checksum': 'checksum',
        'description': 'description',
        'id': 'id',
        'access_group_ids': 'accessGroupIds',
        'lineage_id': 'lineageId'
    }

    def __init__(self, installation_metadata=None, code=None, access_groups=None, name=None, checksum=None, description=None, id=None, access_group_ids=None, lineage_id=None):  # noqa: E501
        """AppliesToFunction - a model defined in Swagger"""  # noqa: E501
        self._installation_metadata = None
        self._code = None
        self._access_groups = None
        self._name = None
        self._checksum = None
        self._description = None
        self._id = None
        self._access_group_ids = None
        self._lineage_id = None
        self.discriminator = None
        if installation_metadata is not None:
            self.installation_metadata = installation_metadata
        self.code = code
        if access_groups is not None:
            self.access_groups = access_groups
        self.name = name
        if checksum is not None:
            self.checksum = checksum
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if access_group_ids is not None:
            self.access_group_ids = access_group_ids
        if lineage_id is not None:
            self.lineage_id = lineage_id

    @property
    def installation_metadata(self):
        """Gets the installation_metadata of this AppliesToFunction.  # noqa: E501


        :return: The installation_metadata of this AppliesToFunction.  # noqa: E501
        :rtype: IntegrationMetadata
        """
        return self._installation_metadata

    @installation_metadata.setter
    def installation_metadata(self, installation_metadata):
        """Sets the installation_metadata of this AppliesToFunction.


        :param installation_metadata: The installation_metadata of this AppliesToFunction.  # noqa: E501
        :type: IntegrationMetadata
        """

        self._installation_metadata = installation_metadata

    @property
    def code(self):
        """Gets the code of this AppliesToFunction.  # noqa: E501

        The AppliesTo Function code. Note that special characters may need to be escaped.  # noqa: E501

        :return: The code of this AppliesToFunction.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AppliesToFunction.

        The AppliesTo Function code. Note that special characters may need to be escaped.  # noqa: E501

        :param code: The code of this AppliesToFunction.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def access_groups(self):
        """Gets the access_groups of this AppliesToFunction.  # noqa: E501

        Access group Details in response  # noqa: E501

        :return: The access_groups of this AppliesToFunction.  # noqa: E501
        :rtype: list[AccessGroup]
        """
        return self._access_groups

    @access_groups.setter
    def access_groups(self, access_groups):
        """Sets the access_groups of this AppliesToFunction.

        Access group Details in response  # noqa: E501

        :param access_groups: The access_groups of this AppliesToFunction.  # noqa: E501
        :type: list[AccessGroup]
        """

        self._access_groups = access_groups

    @property
    def name(self):
        """Gets the name of this AppliesToFunction.  # noqa: E501

        The name of the AppliesTo Function  # noqa: E501

        :return: The name of this AppliesToFunction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppliesToFunction.

        The name of the AppliesTo Function  # noqa: E501

        :param name: The name of this AppliesToFunction.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def checksum(self):
        """Gets the checksum of this AppliesToFunction.  # noqa: E501

        The metadata checksum for the LMModule content  # noqa: E501

        :return: The checksum of this AppliesToFunction.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this AppliesToFunction.

        The metadata checksum for the LMModule content  # noqa: E501

        :param checksum: The checksum of this AppliesToFunction.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def description(self):
        """Gets the description of this AppliesToFunction.  # noqa: E501

        The description of the AppliesTo Function  # noqa: E501

        :return: The description of this AppliesToFunction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppliesToFunction.

        The description of the AppliesTo Function  # noqa: E501

        :param description: The description of this AppliesToFunction.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this AppliesToFunction.  # noqa: E501

        The ID of the AppliesTo Function  # noqa: E501

        :return: The id of this AppliesToFunction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppliesToFunction.

        The ID of the AppliesTo Function  # noqa: E501

        :param id: The id of this AppliesToFunction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def access_group_ids(self):
        """Gets the access_group_ids of this AppliesToFunction.  # noqa: E501

        The Access Groups Id's  # noqa: E501

        :return: The access_group_ids of this AppliesToFunction.  # noqa: E501
        :rtype: list[int]
        """
        return self._access_group_ids

    @access_group_ids.setter
    def access_group_ids(self, access_group_ids):
        """Sets the access_group_ids of this AppliesToFunction.

        The Access Groups Id's  # noqa: E501

        :param access_group_ids: The access_group_ids of this AppliesToFunction.  # noqa: E501
        :type: list[int]
        """

        self._access_group_ids = access_group_ids

    @property
    def lineage_id(self):
        """Gets the lineage_id of this AppliesToFunction.  # noqa: E501

        The lineage Id of the LMModule  # noqa: E501

        :return: The lineage_id of this AppliesToFunction.  # noqa: E501
        :rtype: str
        """
        return self._lineage_id

    @lineage_id.setter
    def lineage_id(self, lineage_id):
        """Sets the lineage_id of this AppliesToFunction.

        The lineage Id of the LMModule  # noqa: E501

        :param lineage_id: The lineage_id of this AppliesToFunction.  # noqa: E501
        :type: str
        """

        self._lineage_id = lineage_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppliesToFunction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppliesToFunction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
