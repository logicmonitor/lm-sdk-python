# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatchJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_monitoring': 'bool',
        'access_groups': 'list[AccessGroup]',
        'alert_level': 'str',
        'description': 'str',
        'applies_to': 'str',
        'technology': 'str',
        'lineage_id': 'str',
        'cron_schedule': 'str',
        'tags': 'str',
        'installation_metadata': 'IntegrationMetadata',
        'cron_time_zone': 'str',
        'alert_body': 'str',
        'start_mrtie': 'int',
        'checksum': 'str',
        'name': 'str',
        'alert_subject': 'str',
        'id': 'int',
        'access_group_ids': 'list[int]',
        'longest_run_time_in_minute': 'int',
        'alert_effective_ival': 'int',
        'group': 'str'
    }

    attribute_map = {
        'active_monitoring': 'activeMonitoring',
        'access_groups': 'accessGroups',
        'alert_level': 'alertLevel',
        'description': 'description',
        'applies_to': 'appliesTo',
        'technology': 'technology',
        'lineage_id': 'lineageId',
        'cron_schedule': 'cronSchedule',
        'tags': 'tags',
        'installation_metadata': 'installationMetadata',
        'cron_time_zone': 'cronTimeZone',
        'alert_body': 'alertBody',
        'start_mrtie': 'startMrtie',
        'checksum': 'checksum',
        'name': 'name',
        'alert_subject': 'alertSubject',
        'id': 'id',
        'access_group_ids': 'accessGroupIds',
        'longest_run_time_in_minute': 'longestRunTimeInMinute',
        'alert_effective_ival': 'alertEffectiveIval',
        'group': 'group'
    }

    def __init__(self, active_monitoring=None, access_groups=None, alert_level=None, description=None, applies_to=None, technology=None, lineage_id=None, cron_schedule=None, tags=None, installation_metadata=None, cron_time_zone=None, alert_body=None, start_mrtie=None, checksum=None, name=None, alert_subject=None, id=None, access_group_ids=None, longest_run_time_in_minute=None, alert_effective_ival=None, group=None):  # noqa: E501
        """BatchJob - a model defined in Swagger"""  # noqa: E501
        self._active_monitoring = None
        self._access_groups = None
        self._alert_level = None
        self._description = None
        self._applies_to = None
        self._technology = None
        self._lineage_id = None
        self._cron_schedule = None
        self._tags = None
        self._installation_metadata = None
        self._cron_time_zone = None
        self._alert_body = None
        self._start_mrtie = None
        self._checksum = None
        self._name = None
        self._alert_subject = None
        self._id = None
        self._access_group_ids = None
        self._longest_run_time_in_minute = None
        self._alert_effective_ival = None
        self._group = None
        self.discriminator = None
        if active_monitoring is not None:
            self.active_monitoring = active_monitoring
        if access_groups is not None:
            self.access_groups = access_groups
        self.alert_level = alert_level
        if description is not None:
            self.description = description
        if applies_to is not None:
            self.applies_to = applies_to
        if technology is not None:
            self.technology = technology
        if lineage_id is not None:
            self.lineage_id = lineage_id
        self.cron_schedule = cron_schedule
        if tags is not None:
            self.tags = tags
        if installation_metadata is not None:
            self.installation_metadata = installation_metadata
        self.cron_time_zone = cron_time_zone
        self.alert_body = alert_body
        if start_mrtie is not None:
            self.start_mrtie = start_mrtie
        if checksum is not None:
            self.checksum = checksum
        self.name = name
        self.alert_subject = alert_subject
        if id is not None:
            self.id = id
        if access_group_ids is not None:
            self.access_group_ids = access_group_ids
        if longest_run_time_in_minute is not None:
            self.longest_run_time_in_minute = longest_run_time_in_minute
        self.alert_effective_ival = alert_effective_ival
        if group is not None:
            self.group = group

    @property
    def active_monitoring(self):
        """Gets the active_monitoring of this BatchJob.  # noqa: E501

        Whether to enable active monitoring of job start  # noqa: E501

        :return: The active_monitoring of this BatchJob.  # noqa: E501
        :rtype: bool
        """
        return self._active_monitoring

    @active_monitoring.setter
    def active_monitoring(self, active_monitoring):
        """Sets the active_monitoring of this BatchJob.

        Whether to enable active monitoring of job start  # noqa: E501

        :param active_monitoring: The active_monitoring of this BatchJob.  # noqa: E501
        :type: bool
        """

        self._active_monitoring = active_monitoring

    @property
    def access_groups(self):
        """Gets the access_groups of this BatchJob.  # noqa: E501

        Module's access groups  # noqa: E501

        :return: The access_groups of this BatchJob.  # noqa: E501
        :rtype: list[AccessGroup]
        """
        return self._access_groups

    @access_groups.setter
    def access_groups(self, access_groups):
        """Sets the access_groups of this BatchJob.

        Module's access groups  # noqa: E501

        :param access_groups: The access_groups of this BatchJob.  # noqa: E501
        :type: list[AccessGroup]
        """

        self._access_groups = access_groups

    @property
    def alert_level(self):
        """Gets the alert_level of this BatchJob.  # noqa: E501

        alert level if job doesn't start on time, effective if activeMonitoring true  # noqa: E501

        :return: The alert_level of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._alert_level

    @alert_level.setter
    def alert_level(self, alert_level):
        """Sets the alert_level of this BatchJob.

        alert level if job doesn't start on time, effective if activeMonitoring true  # noqa: E501

        :param alert_level: The alert_level of this BatchJob.  # noqa: E501
        :type: str
        """
        if alert_level is None:
            raise ValueError("Invalid value for `alert_level`, must not be `None`")  # noqa: E501
        allowed_values = ["warn", "error", "critical"]  # noqa: E501
        if alert_level not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_level` ({0}), must be one of {1}"  # noqa: E501
                .format(alert_level, allowed_values)
            )

        self._alert_level = alert_level

    @property
    def description(self):
        """Gets the description of this BatchJob.  # noqa: E501

        The description for the LMModule  # noqa: E501

        :return: The description of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BatchJob.

        The description for the LMModule  # noqa: E501

        :param description: The description of this BatchJob.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def applies_to(self):
        """Gets the applies_to of this BatchJob.  # noqa: E501

        The Applies To for the LMModule  # noqa: E501

        :return: The applies_to of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """Sets the applies_to of this BatchJob.

        The Applies To for the LMModule  # noqa: E501

        :param applies_to: The applies_to of this BatchJob.  # noqa: E501
        :type: str
        """

        self._applies_to = applies_to

    @property
    def technology(self):
        """Gets the technology of this BatchJob.  # noqa: E501

        The Technical Notes for the LMModule  # noqa: E501

        :return: The technology of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """Sets the technology of this BatchJob.

        The Technical Notes for the LMModule  # noqa: E501

        :param technology: The technology of this BatchJob.  # noqa: E501
        :type: str
        """

        self._technology = technology

    @property
    def lineage_id(self):
        """Gets the lineage_id of this BatchJob.  # noqa: E501

        The lineageId the LMModule belongs to  # noqa: E501

        :return: The lineage_id of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._lineage_id

    @lineage_id.setter
    def lineage_id(self, lineage_id):
        """Sets the lineage_id of this BatchJob.

        The lineageId the LMModule belongs to  # noqa: E501

        :param lineage_id: The lineage_id of this BatchJob.  # noqa: E501
        :type: str
        """

        self._lineage_id = lineage_id

    @property
    def cron_schedule(self):
        """Gets the cron_schedule of this BatchJob.  # noqa: E501

        Cron schedule expression, only the latter 5 ,effective if activeMonitoring true  # noqa: E501

        :return: The cron_schedule of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._cron_schedule

    @cron_schedule.setter
    def cron_schedule(self, cron_schedule):
        """Sets the cron_schedule of this BatchJob.

        Cron schedule expression, only the latter 5 ,effective if activeMonitoring true  # noqa: E501

        :param cron_schedule: The cron_schedule of this BatchJob.  # noqa: E501
        :type: str
        """
        if cron_schedule is None:
            raise ValueError("Invalid value for `cron_schedule`, must not be `None`")  # noqa: E501

        self._cron_schedule = cron_schedule

    @property
    def tags(self):
        """Gets the tags of this BatchJob.  # noqa: E501

        The Tags for the LMModule  # noqa: E501

        :return: The tags of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BatchJob.

        The Tags for the LMModule  # noqa: E501

        :param tags: The tags of this BatchJob.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def installation_metadata(self):
        """Gets the installation_metadata of this BatchJob.  # noqa: E501


        :return: The installation_metadata of this BatchJob.  # noqa: E501
        :rtype: IntegrationMetadata
        """
        return self._installation_metadata

    @installation_metadata.setter
    def installation_metadata(self, installation_metadata):
        """Sets the installation_metadata of this BatchJob.


        :param installation_metadata: The installation_metadata of this BatchJob.  # noqa: E501
        :type: IntegrationMetadata
        """

        self._installation_metadata = installation_metadata

    @property
    def cron_time_zone(self):
        """Gets the cron_time_zone of this BatchJob.  # noqa: E501

        Cron timezone, effective if activeMonitoring true  # noqa: E501

        :return: The cron_time_zone of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._cron_time_zone

    @cron_time_zone.setter
    def cron_time_zone(self, cron_time_zone):
        """Sets the cron_time_zone of this BatchJob.

        Cron timezone, effective if activeMonitoring true  # noqa: E501

        :param cron_time_zone: The cron_time_zone of this BatchJob.  # noqa: E501
        :type: str
        """
        if cron_time_zone is None:
            raise ValueError("Invalid value for `cron_time_zone`, must not be `None`")  # noqa: E501

        self._cron_time_zone = cron_time_zone

    @property
    def alert_body(self):
        """Gets the alert_body of this BatchJob.  # noqa: E501

        Alert message body  # noqa: E501

        :return: The alert_body of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._alert_body

    @alert_body.setter
    def alert_body(self, alert_body):
        """Sets the alert_body of this BatchJob.

        Alert message body  # noqa: E501

        :param alert_body: The alert_body of this BatchJob.  # noqa: E501
        :type: str
        """
        if alert_body is None:
            raise ValueError("Invalid value for `alert_body`, must not be `None`")  # noqa: E501

        self._alert_body = alert_body

    @property
    def start_mrtie(self):
        """Gets the start_mrtie of this BatchJob.  # noqa: E501

        Max Relative Time Interval Error, effective if activeMonitoring true  # noqa: E501

        :return: The start_mrtie of this BatchJob.  # noqa: E501
        :rtype: int
        """
        return self._start_mrtie

    @start_mrtie.setter
    def start_mrtie(self, start_mrtie):
        """Sets the start_mrtie of this BatchJob.

        Max Relative Time Interval Error, effective if activeMonitoring true  # noqa: E501

        :param start_mrtie: The start_mrtie of this BatchJob.  # noqa: E501
        :type: int
        """

        self._start_mrtie = start_mrtie

    @property
    def checksum(self):
        """Gets the checksum of this BatchJob.  # noqa: E501

        The metadata checksum for the LMModule content  # noqa: E501

        :return: The checksum of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this BatchJob.

        The metadata checksum for the LMModule content  # noqa: E501

        :param checksum: The checksum of this BatchJob.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def name(self):
        """Gets the name of this BatchJob.  # noqa: E501

        JobMonitor name  # noqa: E501

        :return: The name of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BatchJob.

        JobMonitor name  # noqa: E501

        :param name: The name of this BatchJob.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def alert_subject(self):
        """Gets the alert_subject of this BatchJob.  # noqa: E501

        Alert message subject  # noqa: E501

        :return: The alert_subject of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._alert_subject

    @alert_subject.setter
    def alert_subject(self, alert_subject):
        """Sets the alert_subject of this BatchJob.

        Alert message subject  # noqa: E501

        :param alert_subject: The alert_subject of this BatchJob.  # noqa: E501
        :type: str
        """
        if alert_subject is None:
            raise ValueError("Invalid value for `alert_subject`, must not be `None`")  # noqa: E501

        self._alert_subject = alert_subject

    @property
    def id(self):
        """Gets the id of this BatchJob.  # noqa: E501

        The ID of the LMModule  # noqa: E501

        :return: The id of this BatchJob.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BatchJob.

        The ID of the LMModule  # noqa: E501

        :param id: The id of this BatchJob.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def access_group_ids(self):
        """Gets the access_group_ids of this BatchJob.  # noqa: E501

        The Access Groups Id's  # noqa: E501

        :return: The access_group_ids of this BatchJob.  # noqa: E501
        :rtype: list[int]
        """
        return self._access_group_ids

    @access_group_ids.setter
    def access_group_ids(self, access_group_ids):
        """Sets the access_group_ids of this BatchJob.

        The Access Groups Id's  # noqa: E501

        :param access_group_ids: The access_group_ids of this BatchJob.  # noqa: E501
        :type: list[int]
        """

        self._access_group_ids = access_group_ids

    @property
    def longest_run_time_in_minute(self):
        """Gets the longest_run_time_in_minute of this BatchJob.  # noqa: E501

        Max job run time in minutes  # noqa: E501

        :return: The longest_run_time_in_minute of this BatchJob.  # noqa: E501
        :rtype: int
        """
        return self._longest_run_time_in_minute

    @longest_run_time_in_minute.setter
    def longest_run_time_in_minute(self, longest_run_time_in_minute):
        """Sets the longest_run_time_in_minute of this BatchJob.

        Max job run time in minutes  # noqa: E501

        :param longest_run_time_in_minute: The longest_run_time_in_minute of this BatchJob.  # noqa: E501
        :type: int
        """

        self._longest_run_time_in_minute = longest_run_time_in_minute

    @property
    def alert_effective_ival(self):
        """Gets the alert_effective_ival of this BatchJob.  # noqa: E501

        JobMonitor alert effective interval in minutes  # noqa: E501

        :return: The alert_effective_ival of this BatchJob.  # noqa: E501
        :rtype: int
        """
        return self._alert_effective_ival

    @alert_effective_ival.setter
    def alert_effective_ival(self, alert_effective_ival):
        """Sets the alert_effective_ival of this BatchJob.

        JobMonitor alert effective interval in minutes  # noqa: E501

        :param alert_effective_ival: The alert_effective_ival of this BatchJob.  # noqa: E501
        :type: int
        """
        if alert_effective_ival is None:
            raise ValueError("Invalid value for `alert_effective_ival`, must not be `None`")  # noqa: E501

        self._alert_effective_ival = alert_effective_ival

    @property
    def group(self):
        """Gets the group of this BatchJob.  # noqa: E501

        The group the LMModule is in  # noqa: E501

        :return: The group of this BatchJob.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this BatchJob.

        The group the LMModule is in  # noqa: E501

        :param group: The group of this BatchJob.  # noqa: E501
        :type: str
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
