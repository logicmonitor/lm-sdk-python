# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.widget import Widget  # noqa: F401,E501

class OverviewGraphWidget(Widget):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_name': 'str',
        'graph_name': 'str',
        'h_id': 'int',
        'dsig_id': 'int',
        'ds_name': 'str',
        'ds_id': 'int',
        'dsig_name': 'str',
        'graph_id': 'int'
    }
    if hasattr(Widget, "swagger_types"):
        swagger_types.update(Widget.swagger_types)

    attribute_map = {
        'host_name': 'hostName',
        'graph_name': 'graphName',
        'h_id': 'hId',
        'dsig_id': 'dsigId',
        'ds_name': 'dsName',
        'ds_id': 'dsId',
        'dsig_name': 'dsigName',
        'graph_id': 'graphId'
    }
    if hasattr(Widget, "attribute_map"):
        attribute_map.update(Widget.attribute_map)

    def __init__(self, host_name=None, graph_name=None, h_id=None, dsig_id=None, ds_name=None, ds_id=None, dsig_name=None, graph_id=None, *args, **kwargs):  # noqa: E501
        """OverviewGraphWidget - a model defined in Swagger"""  # noqa: E501
        self._host_name = None
        self._graph_name = None
        self._h_id = None
        self._dsig_id = None
        self._ds_name = None
        self._ds_id = None
        self._dsig_name = None
        self._graph_id = None
        self.discriminator = None
        if host_name is not None:
            self.host_name = host_name
        if graph_name is not None:
            self.graph_name = graph_name
        self.h_id = h_id
        self.dsig_id = dsig_id
        if ds_name is not None:
            self.ds_name = ds_name
        if ds_id is not None:
            self.ds_id = ds_id
        if dsig_name is not None:
            self.dsig_name = dsig_name
        if graph_id is not None:
            self.graph_id = graph_id
        Widget.__init__(self, *args, **kwargs)

    @property
    def host_name(self):
        """Gets the host_name of this OverviewGraphWidget.  # noqa: E501


        :return: The host_name of this OverviewGraphWidget.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this OverviewGraphWidget.


        :param host_name: The host_name of this OverviewGraphWidget.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def graph_name(self):
        """Gets the graph_name of this OverviewGraphWidget.  # noqa: E501


        :return: The graph_name of this OverviewGraphWidget.  # noqa: E501
        :rtype: str
        """
        return self._graph_name

    @graph_name.setter
    def graph_name(self, graph_name):
        """Sets the graph_name of this OverviewGraphWidget.


        :param graph_name: The graph_name of this OverviewGraphWidget.  # noqa: E501
        :type: str
        """

        self._graph_name = graph_name

    @property
    def h_id(self):
        """Gets the h_id of this OverviewGraphWidget.  # noqa: E501


        :return: The h_id of this OverviewGraphWidget.  # noqa: E501
        :rtype: int
        """
        return self._h_id

    @h_id.setter
    def h_id(self, h_id):
        """Sets the h_id of this OverviewGraphWidget.


        :param h_id: The h_id of this OverviewGraphWidget.  # noqa: E501
        :type: int
        """
        if h_id is None:
            raise ValueError("Invalid value for `h_id`, must not be `None`")  # noqa: E501

        self._h_id = h_id

    @property
    def dsig_id(self):
        """Gets the dsig_id of this OverviewGraphWidget.  # noqa: E501


        :return: The dsig_id of this OverviewGraphWidget.  # noqa: E501
        :rtype: int
        """
        return self._dsig_id

    @dsig_id.setter
    def dsig_id(self, dsig_id):
        """Sets the dsig_id of this OverviewGraphWidget.


        :param dsig_id: The dsig_id of this OverviewGraphWidget.  # noqa: E501
        :type: int
        """
        if dsig_id is None:
            raise ValueError("Invalid value for `dsig_id`, must not be `None`")  # noqa: E501

        self._dsig_id = dsig_id

    @property
    def ds_name(self):
        """Gets the ds_name of this OverviewGraphWidget.  # noqa: E501


        :return: The ds_name of this OverviewGraphWidget.  # noqa: E501
        :rtype: str
        """
        return self._ds_name

    @ds_name.setter
    def ds_name(self, ds_name):
        """Sets the ds_name of this OverviewGraphWidget.


        :param ds_name: The ds_name of this OverviewGraphWidget.  # noqa: E501
        :type: str
        """

        self._ds_name = ds_name

    @property
    def ds_id(self):
        """Gets the ds_id of this OverviewGraphWidget.  # noqa: E501


        :return: The ds_id of this OverviewGraphWidget.  # noqa: E501
        :rtype: int
        """
        return self._ds_id

    @ds_id.setter
    def ds_id(self, ds_id):
        """Sets the ds_id of this OverviewGraphWidget.


        :param ds_id: The ds_id of this OverviewGraphWidget.  # noqa: E501
        :type: int
        """

        self._ds_id = ds_id

    @property
    def dsig_name(self):
        """Gets the dsig_name of this OverviewGraphWidget.  # noqa: E501


        :return: The dsig_name of this OverviewGraphWidget.  # noqa: E501
        :rtype: str
        """
        return self._dsig_name

    @dsig_name.setter
    def dsig_name(self, dsig_name):
        """Sets the dsig_name of this OverviewGraphWidget.


        :param dsig_name: The dsig_name of this OverviewGraphWidget.  # noqa: E501
        :type: str
        """

        self._dsig_name = dsig_name

    @property
    def graph_id(self):
        """Gets the graph_id of this OverviewGraphWidget.  # noqa: E501


        :return: The graph_id of this OverviewGraphWidget.  # noqa: E501
        :rtype: int
        """
        return self._graph_id

    @graph_id.setter
    def graph_id(self, graph_id):
        """Sets the graph_id of this OverviewGraphWidget.


        :param graph_id: The graph_id of this OverviewGraphWidget.  # noqa: E501
        :type: int
        """

        self._graph_id = graph_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OverviewGraphWidget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OverviewGraphWidget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
