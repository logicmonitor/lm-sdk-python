# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.widget import Widget  # noqa: F401,E501

class NetflowGroupWidget(Widget):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'row_filters': 'str',
        'device_group_id': 'int',
        'data_type': 'str',
        'netflow_filter': 'NetflowFilters',
        'device_group_name': 'str'
    }
    if hasattr(Widget, "swagger_types"):
        swagger_types.update(Widget.swagger_types)

    attribute_map = {
        'row_filters': 'rowFilters',
        'device_group_id': 'deviceGroupId',
        'data_type': 'dataType',
        'netflow_filter': 'netflowFilter',
        'device_group_name': 'deviceGroupName'
    }
    if hasattr(Widget, "attribute_map"):
        attribute_map.update(Widget.attribute_map)

    def __init__(self, row_filters=None, device_group_id=None, data_type=None, netflow_filter=None, device_group_name=None, *args, **kwargs):  # noqa: E501
        """NetflowGroupWidget - a model defined in Swagger"""  # noqa: E501
        self._row_filters = None
        self._device_group_id = None
        self._data_type = None
        self._netflow_filter = None
        self._device_group_name = None
        self.discriminator = None
        if row_filters is not None:
            self.row_filters = row_filters
        self.device_group_id = device_group_id
        if data_type is not None:
            self.data_type = data_type
        if netflow_filter is not None:
            self.netflow_filter = netflow_filter
        if device_group_name is not None:
            self.device_group_name = device_group_name
        Widget.__init__(self, *args, **kwargs)

    @property
    def row_filters(self):
        """Gets the row_filters of this NetflowGroupWidget.  # noqa: E501


        :return: The row_filters of this NetflowGroupWidget.  # noqa: E501
        :rtype: str
        """
        return self._row_filters

    @row_filters.setter
    def row_filters(self, row_filters):
        """Sets the row_filters of this NetflowGroupWidget.


        :param row_filters: The row_filters of this NetflowGroupWidget.  # noqa: E501
        :type: str
        """

        self._row_filters = row_filters

    @property
    def device_group_id(self):
        """Gets the device_group_id of this NetflowGroupWidget.  # noqa: E501


        :return: The device_group_id of this NetflowGroupWidget.  # noqa: E501
        :rtype: int
        """
        return self._device_group_id

    @device_group_id.setter
    def device_group_id(self, device_group_id):
        """Sets the device_group_id of this NetflowGroupWidget.


        :param device_group_id: The device_group_id of this NetflowGroupWidget.  # noqa: E501
        :type: int
        """
        if device_group_id is None:
            raise ValueError("Invalid value for `device_group_id`, must not be `None`")  # noqa: E501

        self._device_group_id = device_group_id

    @property
    def data_type(self):
        """Gets the data_type of this NetflowGroupWidget.  # noqa: E501


        :return: The data_type of this NetflowGroupWidget.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this NetflowGroupWidget.


        :param data_type: The data_type of this NetflowGroupWidget.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def netflow_filter(self):
        """Gets the netflow_filter of this NetflowGroupWidget.  # noqa: E501


        :return: The netflow_filter of this NetflowGroupWidget.  # noqa: E501
        :rtype: NetflowFilters
        """
        return self._netflow_filter

    @netflow_filter.setter
    def netflow_filter(self, netflow_filter):
        """Sets the netflow_filter of this NetflowGroupWidget.


        :param netflow_filter: The netflow_filter of this NetflowGroupWidget.  # noqa: E501
        :type: NetflowFilters
        """

        self._netflow_filter = netflow_filter

    @property
    def device_group_name(self):
        """Gets the device_group_name of this NetflowGroupWidget.  # noqa: E501


        :return: The device_group_name of this NetflowGroupWidget.  # noqa: E501
        :rtype: str
        """
        return self._device_group_name

    @device_group_name.setter
    def device_group_name(self, device_group_name):
        """Sets the device_group_name of this NetflowGroupWidget.


        :param device_group_name: The device_group_name of this NetflowGroupWidget.  # noqa: E501
        :type: str
        """

        self._device_group_name = device_group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetflowGroupWidget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetflowGroupWidget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
