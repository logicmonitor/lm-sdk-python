# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.widget import Widget  # noqa: F401,E501

class DynamicTableWidget(Widget):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_source_id': 'int',
        'top_x': 'int',
        'data_source_full_name': 'str',
        'columns': 'list[DynamicTableWidgetColumn]',
        'sort_order': 'str',
        'forecast': 'TableWidgetForecastConfiguration',
        'rows': 'list[DynamicTableWidgetRow]'
    }
    if hasattr(Widget, "swagger_types"):
        swagger_types.update(Widget.swagger_types)

    attribute_map = {
        'data_source_id': 'dataSourceId',
        'top_x': 'topX',
        'data_source_full_name': 'dataSourceFullName',
        'columns': 'columns',
        'sort_order': 'sortOrder',
        'forecast': 'forecast',
        'rows': 'rows'
    }
    if hasattr(Widget, "attribute_map"):
        attribute_map.update(Widget.attribute_map)

    def __init__(self, data_source_id=None, top_x=None, data_source_full_name=None, columns=None, sort_order=None, forecast=None, rows=None, *args, **kwargs):  # noqa: E501
        """DynamicTableWidget - a model defined in Swagger"""  # noqa: E501
        self._data_source_id = None
        self._top_x = None
        self._data_source_full_name = None
        self._columns = None
        self._sort_order = None
        self._forecast = None
        self._rows = None
        self.discriminator = None
        self.data_source_id = data_source_id
        if top_x is not None:
            self.top_x = top_x
        if data_source_full_name is not None:
            self.data_source_full_name = data_source_full_name
        self.columns = columns
        if sort_order is not None:
            self.sort_order = sort_order
        if forecast is not None:
            self.forecast = forecast
        self.rows = rows
        Widget.__init__(self, *args, **kwargs)

    @property
    def data_source_id(self):
        """Gets the data_source_id of this DynamicTableWidget.  # noqa: E501

        The id of the selected datasource  # noqa: E501

        :return: The data_source_id of this DynamicTableWidget.  # noqa: E501
        :rtype: int
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this DynamicTableWidget.

        The id of the selected datasource  # noqa: E501

        :param data_source_id: The data_source_id of this DynamicTableWidget.  # noqa: E501
        :type: int
        """
        if data_source_id is None:
            raise ValueError("Invalid value for `data_source_id`, must not be `None`")  # noqa: E501

        self._data_source_id = data_source_id

    @property
    def top_x(self):
        """Gets the top_x of this DynamicTableWidget.  # noqa: E501


        :return: The top_x of this DynamicTableWidget.  # noqa: E501
        :rtype: int
        """
        return self._top_x

    @top_x.setter
    def top_x(self, top_x):
        """Sets the top_x of this DynamicTableWidget.


        :param top_x: The top_x of this DynamicTableWidget.  # noqa: E501
        :type: int
        """

        self._top_x = top_x

    @property
    def data_source_full_name(self):
        """Gets the data_source_full_name of this DynamicTableWidget.  # noqa: E501

        The full name of the selected datasource  # noqa: E501

        :return: The data_source_full_name of this DynamicTableWidget.  # noqa: E501
        :rtype: str
        """
        return self._data_source_full_name

    @data_source_full_name.setter
    def data_source_full_name(self, data_source_full_name):
        """Sets the data_source_full_name of this DynamicTableWidget.

        The full name of the selected datasource  # noqa: E501

        :param data_source_full_name: The data_source_full_name of this DynamicTableWidget.  # noqa: E501
        :type: str
        """

        self._data_source_full_name = data_source_full_name

    @property
    def columns(self):
        """Gets the columns of this DynamicTableWidget.  # noqa: E501


        :return: The columns of this DynamicTableWidget.  # noqa: E501
        :rtype: list[DynamicTableWidgetColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DynamicTableWidget.


        :param columns: The columns of this DynamicTableWidget.  # noqa: E501
        :type: list[DynamicTableWidgetColumn]
        """
        if columns is None:
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    @property
    def sort_order(self):
        """Gets the sort_order of this DynamicTableWidget.  # noqa: E501


        :return: The sort_order of this DynamicTableWidget.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this DynamicTableWidget.


        :param sort_order: The sort_order of this DynamicTableWidget.  # noqa: E501
        :type: str
        """

        self._sort_order = sort_order

    @property
    def forecast(self):
        """Gets the forecast of this DynamicTableWidget.  # noqa: E501


        :return: The forecast of this DynamicTableWidget.  # noqa: E501
        :rtype: TableWidgetForecastConfiguration
        """
        return self._forecast

    @forecast.setter
    def forecast(self, forecast):
        """Sets the forecast of this DynamicTableWidget.


        :param forecast: The forecast of this DynamicTableWidget.  # noqa: E501
        :type: TableWidgetForecastConfiguration
        """

        self._forecast = forecast

    @property
    def rows(self):
        """Gets the rows of this DynamicTableWidget.  # noqa: E501


        :return: The rows of this DynamicTableWidget.  # noqa: E501
        :rtype: list[DynamicTableWidgetRow]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this DynamicTableWidget.


        :param rows: The rows of this DynamicTableWidget.  # noqa: E501
        :type: list[DynamicTableWidgetRow]
        """
        if rows is None:
            raise ValueError("Invalid value for `rows`, must not be `None`")  # noqa: E501

        self._rows = rows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DynamicTableWidget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DynamicTableWidget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
