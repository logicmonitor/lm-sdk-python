# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AutomaticUpgradeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day_of_week': 'str',
        'hour': 'int',
        'created_by': 'str',
        'level': 'str',
        'timezone': 'str',
        'description': 'str',
        'occurrence': 'str',
        'type': 'str',
        'version': 'str',
        'minute': 'int'
    }

    attribute_map = {
        'day_of_week': 'dayOfWeek',
        'hour': 'hour',
        'created_by': 'createdBy',
        'level': 'level',
        'timezone': 'timezone',
        'description': 'description',
        'occurrence': 'occurrence',
        'type': 'type',
        'version': 'version',
        'minute': 'minute'
    }

    def __init__(self, day_of_week=None, hour=None, created_by=None, level=None, timezone=None, description=None, occurrence=None, type=None, version=None, minute=None):  # noqa: E501
        """AutomaticUpgradeInfo - a model defined in Swagger"""  # noqa: E501

        self._day_of_week = None
        self._hour = None
        self._created_by = None
        self._level = None
        self._timezone = None
        self._description = None
        self._occurrence = None
        self._type = None
        self._version = None
        self._minute = None
        self.discriminator = None

        self.day_of_week = day_of_week
        self.hour = hour
        if created_by is not None:
            self.created_by = created_by
        if level is not None:
            self.level = level
        if timezone is not None:
            self.timezone = timezone
        if description is not None:
            self.description = description
        self.occurrence = occurrence
        if type is not None:
            self.type = type
        self.version = version
        self.minute = minute

    @property
    def day_of_week(self):
        """Gets the day_of_week of this AutomaticUpgradeInfo.  # noqa: E501


        :return: The day_of_week of this AutomaticUpgradeInfo.  # noqa: E501
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this AutomaticUpgradeInfo.


        :param day_of_week: The day_of_week of this AutomaticUpgradeInfo.  # noqa: E501
        :type: str
        """
        if day_of_week is None:
            raise ValueError("Invalid value for `day_of_week`, must not be `None`")  # noqa: E501

        self._day_of_week = day_of_week

    @property
    def hour(self):
        """Gets the hour of this AutomaticUpgradeInfo.  # noqa: E501


        :return: The hour of this AutomaticUpgradeInfo.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this AutomaticUpgradeInfo.


        :param hour: The hour of this AutomaticUpgradeInfo.  # noqa: E501
        :type: int
        """
        if hour is None:
            raise ValueError("Invalid value for `hour`, must not be `None`")  # noqa: E501

        self._hour = hour

    @property
    def created_by(self):
        """Gets the created_by of this AutomaticUpgradeInfo.  # noqa: E501


        :return: The created_by of this AutomaticUpgradeInfo.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AutomaticUpgradeInfo.


        :param created_by: The created_by of this AutomaticUpgradeInfo.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def level(self):
        """Gets the level of this AutomaticUpgradeInfo.  # noqa: E501


        :return: The level of this AutomaticUpgradeInfo.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this AutomaticUpgradeInfo.


        :param level: The level of this AutomaticUpgradeInfo.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def timezone(self):
        """Gets the timezone of this AutomaticUpgradeInfo.  # noqa: E501


        :return: The timezone of this AutomaticUpgradeInfo.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this AutomaticUpgradeInfo.


        :param timezone: The timezone of this AutomaticUpgradeInfo.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def description(self):
        """Gets the description of this AutomaticUpgradeInfo.  # noqa: E501


        :return: The description of this AutomaticUpgradeInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AutomaticUpgradeInfo.


        :param description: The description of this AutomaticUpgradeInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def occurrence(self):
        """Gets the occurrence of this AutomaticUpgradeInfo.  # noqa: E501


        :return: The occurrence of this AutomaticUpgradeInfo.  # noqa: E501
        :rtype: str
        """
        return self._occurrence

    @occurrence.setter
    def occurrence(self, occurrence):
        """Sets the occurrence of this AutomaticUpgradeInfo.


        :param occurrence: The occurrence of this AutomaticUpgradeInfo.  # noqa: E501
        :type: str
        """
        if occurrence is None:
            raise ValueError("Invalid value for `occurrence`, must not be `None`")  # noqa: E501

        self._occurrence = occurrence

    @property
    def type(self):
        """Gets the type of this AutomaticUpgradeInfo.  # noqa: E501


        :return: The type of this AutomaticUpgradeInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AutomaticUpgradeInfo.


        :param type: The type of this AutomaticUpgradeInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this AutomaticUpgradeInfo.  # noqa: E501


        :return: The version of this AutomaticUpgradeInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AutomaticUpgradeInfo.


        :param version: The version of this AutomaticUpgradeInfo.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def minute(self):
        """Gets the minute of this AutomaticUpgradeInfo.  # noqa: E501


        :return: The minute of this AutomaticUpgradeInfo.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this AutomaticUpgradeInfo.


        :param minute: The minute of this AutomaticUpgradeInfo.  # noqa: E501
        :type: int
        """
        if minute is None:
            raise ValueError("Invalid value for `minute`, must not be `None`")  # noqa: E501

        self._minute = minute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomaticUpgradeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomaticUpgradeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
