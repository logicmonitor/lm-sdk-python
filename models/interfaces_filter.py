# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from logicmonitor_sdk.models.interface_type import InterfaceType  # noqa: F401,E501


class InterfacesFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interface_types': 'list[InterfaceType]',
        'device_id': 'int'
    }

    attribute_map = {
        'interface_types': 'interfaceTypes',
        'device_id': 'deviceId'
    }

    def __init__(self, interface_types=None, device_id=None):  # noqa: E501
        """InterfacesFilter - a model defined in Swagger"""  # noqa: E501

        self._interface_types = None
        self._device_id = None
        self.discriminator = None

        if interface_types is not None:
            self.interface_types = interface_types
        if device_id is not None:
            self.device_id = device_id

    @property
    def interface_types(self):
        """Gets the interface_types of this InterfacesFilter.  # noqa: E501


        :return: The interface_types of this InterfacesFilter.  # noqa: E501
        :rtype: list[InterfaceType]
        """
        return self._interface_types

    @interface_types.setter
    def interface_types(self, interface_types):
        """Sets the interface_types of this InterfacesFilter.


        :param interface_types: The interface_types of this InterfacesFilter.  # noqa: E501
        :type: list[InterfaceType]
        """

        self._interface_types = interface_types

    @property
    def device_id(self):
        """Gets the device_id of this InterfacesFilter.  # noqa: E501


        :return: The device_id of this InterfacesFilter.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InterfacesFilter.


        :param device_id: The device_id of this InterfacesFilter.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InterfacesFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InterfacesFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
