# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from logicmonitor_sdk.models.collector_attribute import CollectorAttribute  # noqa: F401,E501
from logicmonitor_sdk.models.data_source_attribute import DataSourceAttribute  # noqa: F401,E501


class XENCollectorAttribute(CollectorAttribute):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'counters': 'list[DataSourceAttribute]',
        'xen_entity': 'str'
    }

    attribute_map = {
        'name': 'name',
        'counters': 'counters',
        'xen_entity': 'xenEntity'
    }

    def __init__(self, name=None, counters=None, xen_entity=None):  # noqa: E501
        """XENCollectorAttribute - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._counters = None
        self._xen_entity = None
        self.discriminator = None

        self.name = name
        if counters is not None:
            self.counters = counters
        if xen_entity is not None:
            self.xen_entity = xen_entity

    @property
    def name(self):
        """Gets the name of this XENCollectorAttribute.  # noqa: E501


        :return: The name of this XENCollectorAttribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XENCollectorAttribute.


        :param name: The name of this XENCollectorAttribute.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def counters(self):
        """Gets the counters of this XENCollectorAttribute.  # noqa: E501


        :return: The counters of this XENCollectorAttribute.  # noqa: E501
        :rtype: list[DataSourceAttribute]
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this XENCollectorAttribute.


        :param counters: The counters of this XENCollectorAttribute.  # noqa: E501
        :type: list[DataSourceAttribute]
        """

        self._counters = counters

    @property
    def xen_entity(self):
        """Gets the xen_entity of this XENCollectorAttribute.  # noqa: E501


        :return: The xen_entity of this XENCollectorAttribute.  # noqa: E501
        :rtype: str
        """
        return self._xen_entity

    @xen_entity.setter
    def xen_entity(self, xen_entity):
        """Sets the xen_entity of this XENCollectorAttribute.


        :param xen_entity: The xen_entity of this XENCollectorAttribute.  # noqa: E501
        :type: str
        """

        self._xen_entity = xen_entity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(XENCollectorAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XENCollectorAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
