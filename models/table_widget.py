# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.widget import Widget  # noqa: F401,E501

class TableWidget(Widget):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'columns': 'list[TableWidgetColumn]',
        'forecast': 'TableWidgetForecastConfiguration',
        'rows': 'list[TableWidgetRow]'
    }
    if hasattr(Widget, "swagger_types"):
        swagger_types.update(Widget.swagger_types)

    attribute_map = {
        'columns': 'columns',
        'forecast': 'forecast',
        'rows': 'rows'
    }
    if hasattr(Widget, "attribute_map"):
        attribute_map.update(Widget.attribute_map)

    def __init__(self, columns=None, forecast=None, rows=None, *args, **kwargs):  # noqa: E501
        """TableWidget - a model defined in Swagger"""  # noqa: E501
        self._columns = None
        self._forecast = None
        self._rows = None
        self.discriminator = None
        self.columns = columns
        if forecast is not None:
            self.forecast = forecast
        self.rows = rows
        Widget.__init__(self, *args, **kwargs)

    @property
    def columns(self):
        """Gets the columns of this TableWidget.  # noqa: E501


        :return: The columns of this TableWidget.  # noqa: E501
        :rtype: list[TableWidgetColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this TableWidget.


        :param columns: The columns of this TableWidget.  # noqa: E501
        :type: list[TableWidgetColumn]
        """
        if columns is None:
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    @property
    def forecast(self):
        """Gets the forecast of this TableWidget.  # noqa: E501


        :return: The forecast of this TableWidget.  # noqa: E501
        :rtype: TableWidgetForecastConfiguration
        """
        return self._forecast

    @forecast.setter
    def forecast(self, forecast):
        """Sets the forecast of this TableWidget.


        :param forecast: The forecast of this TableWidget.  # noqa: E501
        :type: TableWidgetForecastConfiguration
        """

        self._forecast = forecast

    @property
    def rows(self):
        """Gets the rows of this TableWidget.  # noqa: E501


        :return: The rows of this TableWidget.  # noqa: E501
        :rtype: list[TableWidgetRow]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this TableWidget.


        :param rows: The rows of this TableWidget.  # noqa: E501
        :type: list[TableWidgetRow]
        """
        if rows is None:
            raise ValueError("Invalid value for `rows`, must not be `None`")  # noqa: E501

        self._rows = rows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableWidget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableWidget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
