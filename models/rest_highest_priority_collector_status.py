# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RestHighestPriorityCollectorStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_sdt': 'bool',
        'acked': 'bool',
        'is_down': 'bool',
        'status': 'int'
    }

    attribute_map = {
        'in_sdt': 'inSDT',
        'acked': 'acked',
        'is_down': 'isDown',
        'status': 'status'
    }

    def __init__(self, in_sdt=None, acked=None, is_down=None, status=None):  # noqa: E501
        """RestHighestPriorityCollectorStatus - a model defined in Swagger"""  # noqa: E501

        self._in_sdt = None
        self._acked = None
        self._is_down = None
        self._status = None
        self.discriminator = None

        if in_sdt is not None:
            self.in_sdt = in_sdt
        if acked is not None:
            self.acked = acked
        if is_down is not None:
            self.is_down = is_down
        if status is not None:
            self.status = status

    @property
    def in_sdt(self):
        """Gets the in_sdt of this RestHighestPriorityCollectorStatus.  # noqa: E501

        The SDT status of the highest priority sub collector  # noqa: E501

        :return: The in_sdt of this RestHighestPriorityCollectorStatus.  # noqa: E501
        :rtype: bool
        """
        return self._in_sdt

    @in_sdt.setter
    def in_sdt(self, in_sdt):
        """Sets the in_sdt of this RestHighestPriorityCollectorStatus.

        The SDT status of the highest priority sub collector  # noqa: E501

        :param in_sdt: The in_sdt of this RestHighestPriorityCollectorStatus.  # noqa: E501
        :type: bool
        """

        self._in_sdt = in_sdt

    @property
    def acked(self):
        """Gets the acked of this RestHighestPriorityCollectorStatus.  # noqa: E501

        The acked status of the highest priority sub collector  # noqa: E501

        :return: The acked of this RestHighestPriorityCollectorStatus.  # noqa: E501
        :rtype: bool
        """
        return self._acked

    @acked.setter
    def acked(self, acked):
        """Sets the acked of this RestHighestPriorityCollectorStatus.

        The acked status of the highest priority sub collector  # noqa: E501

        :param acked: The acked of this RestHighestPriorityCollectorStatus.  # noqa: E501
        :type: bool
        """

        self._acked = acked

    @property
    def is_down(self):
        """Gets the is_down of this RestHighestPriorityCollectorStatus.  # noqa: E501

        The down status of the highest priority sub collector  # noqa: E501

        :return: The is_down of this RestHighestPriorityCollectorStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_down

    @is_down.setter
    def is_down(self, is_down):
        """Sets the is_down of this RestHighestPriorityCollectorStatus.

        The down status of the highest priority sub collector  # noqa: E501

        :param is_down: The is_down of this RestHighestPriorityCollectorStatus.  # noqa: E501
        :type: bool
        """

        self._is_down = is_down

    @property
    def status(self):
        """Gets the status of this RestHighestPriorityCollectorStatus.  # noqa: E501

        The status of the highest priority sub collector  # noqa: E501

        :return: The status of this RestHighestPriorityCollectorStatus.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RestHighestPriorityCollectorStatus.

        The status of the highest priority sub collector  # noqa: E501

        :param status: The status of this RestHighestPriorityCollectorStatus.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestHighestPriorityCollectorStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestHighestPriorityCollectorStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
