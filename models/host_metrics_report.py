# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class HostMetricsReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sorted_by': 'str',
        'hosts_val_type': 'str',
        'date_range': 'str',
        'hosts_val': 'str',
        'top10_only': 'bool',
        'columns': 'list[DynamicColumn]',
        'is_base1024': 'bool',
        'row_format': 'int',
        'metrics': 'list[Metric]'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'sorted_by': 'sortedBy',
        'hosts_val_type': 'hostsValType',
        'date_range': 'dateRange',
        'hosts_val': 'hostsVal',
        'top10_only': 'top10Only',
        'columns': 'columns',
        'is_base1024': 'isBase1024',
        'row_format': 'rowFormat',
        'metrics': 'metrics'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, sorted_by=None, hosts_val_type=None, date_range=None, hosts_val=None, top10_only=None, columns=None, is_base1024=None, row_format=None, metrics=None, *args, **kwargs):  # noqa: E501
        """HostMetricsReport - a model defined in Swagger"""  # noqa: E501
        self._sorted_by = None
        self._hosts_val_type = None
        self._date_range = None
        self._hosts_val = None
        self._top10_only = None
        self._columns = None
        self._is_base1024 = None
        self._row_format = None
        self._metrics = None
        self.discriminator = None
        self.sorted_by = sorted_by
        self.hosts_val_type = hosts_val_type
        if date_range is not None:
            self.date_range = date_range
        if hosts_val is not None:
            self.hosts_val = hosts_val
        self.top10_only = top10_only
        if columns is not None:
            self.columns = columns
        self.is_base1024 = is_base1024
        self.row_format = row_format
        self.metrics = metrics
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def sorted_by(self):
        """Gets the sorted_by of this HostMetricsReport.  # noqa: E501

        host | instance | metric host: Information displayed in the report will be sorted by device instance: Information displayed in the report will be sorted by instance metric: Information displayed in the report will be sorted by datapoint (metric)  # noqa: E501

        :return: The sorted_by of this HostMetricsReport.  # noqa: E501
        :rtype: str
        """
        return self._sorted_by

    @sorted_by.setter
    def sorted_by(self, sorted_by):
        """Sets the sorted_by of this HostMetricsReport.

        host | instance | metric host: Information displayed in the report will be sorted by device instance: Information displayed in the report will be sorted by instance metric: Information displayed in the report will be sorted by datapoint (metric)  # noqa: E501

        :param sorted_by: The sorted_by of this HostMetricsReport.  # noqa: E501
        :type: str
        """
        if sorted_by is None:
            raise ValueError("Invalid value for `sorted_by`, must not be `None`")  # noqa: E501

        self._sorted_by = sorted_by

    @property
    def hosts_val_type(self):
        """Gets the hosts_val_type of this HostMetricsReport.  # noqa: E501

        host | group. The type of entities specified in the hostsVal field  # noqa: E501

        :return: The hosts_val_type of this HostMetricsReport.  # noqa: E501
        :rtype: str
        """
        return self._hosts_val_type

    @hosts_val_type.setter
    def hosts_val_type(self, hosts_val_type):
        """Sets the hosts_val_type of this HostMetricsReport.

        host | group. The type of entities specified in the hostsVal field  # noqa: E501

        :param hosts_val_type: The hosts_val_type of this HostMetricsReport.  # noqa: E501
        :type: str
        """
        if hosts_val_type is None:
            raise ValueError("Invalid value for `hosts_val_type`, must not be `None`")  # noqa: E501

        self._hosts_val_type = hosts_val_type

    @property
    def date_range(self):
        """Gets the date_range of this HostMetricsReport.  # noqa: E501

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :return: The date_range of this HostMetricsReport.  # noqa: E501
        :rtype: str
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this HostMetricsReport.

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :param date_range: The date_range of this HostMetricsReport.  # noqa: E501
        :type: str
        """

        self._date_range = date_range

    @property
    def hosts_val(self):
        """Gets the hosts_val of this HostMetricsReport.  # noqa: E501

        The name of the devices OR groups selected for the report, where multiple entities are separated by commas. Glob expressions are supported  # noqa: E501

        :return: The hosts_val of this HostMetricsReport.  # noqa: E501
        :rtype: str
        """
        return self._hosts_val

    @hosts_val.setter
    def hosts_val(self, hosts_val):
        """Sets the hosts_val of this HostMetricsReport.

        The name of the devices OR groups selected for the report, where multiple entities are separated by commas. Glob expressions are supported  # noqa: E501

        :param hosts_val: The hosts_val of this HostMetricsReport.  # noqa: E501
        :type: str
        """

        self._hosts_val = hosts_val

    @property
    def top10_only(self):
        """Gets the top10_only of this HostMetricsReport.  # noqa: E501

        true | false false: Metrics will be displayed for all selected devices or groups true: Metrics will only be displayed for the top ten device or groups  # noqa: E501

        :return: The top10_only of this HostMetricsReport.  # noqa: E501
        :rtype: bool
        """
        return self._top10_only

    @top10_only.setter
    def top10_only(self, top10_only):
        """Sets the top10_only of this HostMetricsReport.

        true | false false: Metrics will be displayed for all selected devices or groups true: Metrics will only be displayed for the top ten device or groups  # noqa: E501

        :param top10_only: The top10_only of this HostMetricsReport.  # noqa: E501
        :type: bool
        """
        if top10_only is None:
            raise ValueError("Invalid value for `top10_only`, must not be `None`")  # noqa: E501

        self._top10_only = top10_only

    @property
    def columns(self):
        """Gets the columns of this HostMetricsReport.  # noqa: E501

        The columns that will be displayed in the report. You should specify the columns in the order in which you'd like them to be displayed. All column names need to be included in this object, but each column should have an associated isHidden field that indicates whether it is displayed or not  # noqa: E501

        :return: The columns of this HostMetricsReport.  # noqa: E501
        :rtype: list[DynamicColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this HostMetricsReport.

        The columns that will be displayed in the report. You should specify the columns in the order in which you'd like them to be displayed. All column names need to be included in this object, but each column should have an associated isHidden field that indicates whether it is displayed or not  # noqa: E501

        :param columns: The columns of this HostMetricsReport.  # noqa: E501
        :type: list[DynamicColumn]
        """

        self._columns = columns

    @property
    def is_base1024(self):
        """Gets the is_base1024 of this HostMetricsReport.  # noqa: E501

        true | false false: Scale the number using using default 1000  true: Scale the number using 1024  # noqa: E501

        :return: The is_base1024 of this HostMetricsReport.  # noqa: E501
        :rtype: bool
        """
        return self._is_base1024

    @is_base1024.setter
    def is_base1024(self, is_base1024):
        """Sets the is_base1024 of this HostMetricsReport.

        true | false false: Scale the number using using default 1000  true: Scale the number using 1024  # noqa: E501

        :param is_base1024: The is_base1024 of this HostMetricsReport.  # noqa: E501
        :type: bool
        """
        if is_base1024 is None:
            raise ValueError("Invalid value for `is_base1024`, must not be `None`")  # noqa: E501

        self._is_base1024 = is_base1024

    @property
    def row_format(self):
        """Gets the row_format of this HostMetricsReport.  # noqa: E501

        0 | 1 | 2 | 3 0: Text only - metrics will be displayed in a tabular format. 1: One graph per device - metrics will be displayed in a tabular format and one graph will be displayed per device. 2: One graph per instance - metrics will be displayed in a tabular format and one graph will be displayed per instance. 3: One graph per datapoint - metrics will be displayed in a tabular format and one graph will be displayed per datapoint.  # noqa: E501

        :return: The row_format of this HostMetricsReport.  # noqa: E501
        :rtype: int
        """
        return self._row_format

    @row_format.setter
    def row_format(self, row_format):
        """Sets the row_format of this HostMetricsReport.

        0 | 1 | 2 | 3 0: Text only - metrics will be displayed in a tabular format. 1: One graph per device - metrics will be displayed in a tabular format and one graph will be displayed per device. 2: One graph per instance - metrics will be displayed in a tabular format and one graph will be displayed per instance. 3: One graph per datapoint - metrics will be displayed in a tabular format and one graph will be displayed per datapoint.  # noqa: E501

        :param row_format: The row_format of this HostMetricsReport.  # noqa: E501
        :type: int
        """
        if row_format is None:
            raise ValueError("Invalid value for `row_format`, must not be `None`")  # noqa: E501

        self._row_format = row_format

    @property
    def metrics(self):
        """Gets the metrics of this HostMetricsReport.  # noqa: E501

        The datapoint or calculation on a datapoint that will be included in the report, where each datapoint/calculation is specified by three fields: dataSourceId, instances (glob is okay) and metric (no glob)  # noqa: E501

        :return: The metrics of this HostMetricsReport.  # noqa: E501
        :rtype: list[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this HostMetricsReport.

        The datapoint or calculation on a datapoint that will be included in the report, where each datapoint/calculation is specified by three fields: dataSourceId, instances (glob is okay) and metric (no glob)  # noqa: E501

        :param metrics: The metrics of this HostMetricsReport.  # noqa: E501
        :type: list[Metric]
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostMetricsReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostMetricsReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
