# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PieChartData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color_name': 'str',
        'data_point_name': 'str',
        'legend': 'str',
        'value': 'float'
    }

    attribute_map = {
        'color_name': 'colorName',
        'data_point_name': 'dataPointName',
        'legend': 'legend',
        'value': 'value'
    }

    def __init__(self, color_name=None, data_point_name=None, legend=None, value=None):  # noqa: E501
        """PieChartData - a model defined in Swagger"""  # noqa: E501

        self._color_name = None
        self._data_point_name = None
        self._legend = None
        self._value = None
        self.discriminator = None

        if color_name is not None:
            self.color_name = color_name
        if data_point_name is not None:
            self.data_point_name = data_point_name
        if legend is not None:
            self.legend = legend
        if value is not None:
            self.value = value

    @property
    def color_name(self):
        """Gets the color_name of this PieChartData.  # noqa: E501


        :return: The color_name of this PieChartData.  # noqa: E501
        :rtype: str
        """
        return self._color_name

    @color_name.setter
    def color_name(self, color_name):
        """Sets the color_name of this PieChartData.


        :param color_name: The color_name of this PieChartData.  # noqa: E501
        :type: str
        """

        self._color_name = color_name

    @property
    def data_point_name(self):
        """Gets the data_point_name of this PieChartData.  # noqa: E501


        :return: The data_point_name of this PieChartData.  # noqa: E501
        :rtype: str
        """
        return self._data_point_name

    @data_point_name.setter
    def data_point_name(self, data_point_name):
        """Sets the data_point_name of this PieChartData.


        :param data_point_name: The data_point_name of this PieChartData.  # noqa: E501
        :type: str
        """

        self._data_point_name = data_point_name

    @property
    def legend(self):
        """Gets the legend of this PieChartData.  # noqa: E501


        :return: The legend of this PieChartData.  # noqa: E501
        :rtype: str
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this PieChartData.


        :param legend: The legend of this PieChartData.  # noqa: E501
        :type: str
        """

        self._legend = legend

    @property
    def value(self):
        """Gets the value of this PieChartData.  # noqa: E501


        :return: The value of this PieChartData.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PieChartData.


        :param value: The value of this PieChartData.  # noqa: E501
        :type: float
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PieChartData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PieChartData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
