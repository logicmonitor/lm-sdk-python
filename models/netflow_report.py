# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class NetflowReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hosts_val_type': 'str',
        'date_range': 'str',
        'hosts_val': 'str',
        'include_dns_mappings': 'bool'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'hosts_val_type': 'hostsValType',
        'date_range': 'dateRange',
        'hosts_val': 'hostsVal',
        'include_dns_mappings': 'includeDNSMappings'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, hosts_val_type=None, date_range=None, hosts_val=None, include_dns_mappings=None, *args, **kwargs):  # noqa: E501
        """NetflowReport - a model defined in Swagger"""  # noqa: E501
        self._hosts_val_type = None
        self._date_range = None
        self._hosts_val = None
        self._include_dns_mappings = None
        self.discriminator = None
        self.hosts_val_type = hosts_val_type
        if date_range is not None:
            self.date_range = date_range
        self.hosts_val = hosts_val
        if include_dns_mappings is not None:
            self.include_dns_mappings = include_dns_mappings
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def hosts_val_type(self):
        """Gets the hosts_val_type of this NetflowReport.  # noqa: E501

        The resource type for the report, host or group  # noqa: E501

        :return: The hosts_val_type of this NetflowReport.  # noqa: E501
        :rtype: str
        """
        return self._hosts_val_type

    @hosts_val_type.setter
    def hosts_val_type(self, hosts_val_type):
        """Sets the hosts_val_type of this NetflowReport.

        The resource type for the report, host or group  # noqa: E501

        :param hosts_val_type: The hosts_val_type of this NetflowReport.  # noqa: E501
        :type: str
        """
        if hosts_val_type is None:
            raise ValueError("Invalid value for `hosts_val_type`, must not be `None`")  # noqa: E501

        self._hosts_val_type = hosts_val_type

    @property
    def date_range(self):
        """Gets the date_range of this NetflowReport.  # noqa: E501

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :return: The date_range of this NetflowReport.  # noqa: E501
        :rtype: str
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this NetflowReport.

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :param date_range: The date_range of this NetflowReport.  # noqa: E501
        :type: str
        """

        self._date_range = date_range

    @property
    def hosts_val(self):
        """Gets the hosts_val of this NetflowReport.  # noqa: E501

        The devices OR groups (full path) selected for the report, where multiple entities are separated by commas. Glob is accepted  # noqa: E501

        :return: The hosts_val of this NetflowReport.  # noqa: E501
        :rtype: str
        """
        return self._hosts_val

    @hosts_val.setter
    def hosts_val(self, hosts_val):
        """Sets the hosts_val of this NetflowReport.

        The devices OR groups (full path) selected for the report, where multiple entities are separated by commas. Glob is accepted  # noqa: E501

        :param hosts_val: The hosts_val of this NetflowReport.  # noqa: E501
        :type: str
        """
        if hosts_val is None:
            raise ValueError("Invalid value for `hosts_val`, must not be `None`")  # noqa: E501

        self._hosts_val = hosts_val

    @property
    def include_dns_mappings(self):
        """Gets the include_dns_mappings of this NetflowReport.  # noqa: E501

        Whether include DNS mappings or not  # noqa: E501

        :return: The include_dns_mappings of this NetflowReport.  # noqa: E501
        :rtype: bool
        """
        return self._include_dns_mappings

    @include_dns_mappings.setter
    def include_dns_mappings(self, include_dns_mappings):
        """Sets the include_dns_mappings of this NetflowReport.

        Whether include DNS mappings or not  # noqa: E501

        :param include_dns_mappings: The include_dns_mappings of this NetflowReport.  # noqa: E501
        :type: bool
        """

        self._include_dns_mappings = include_dns_mappings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetflowReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetflowReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
