# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GraphPlotLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color_name': 'str',
        'std': 'object',
        'visible': 'bool',
        'color': 'str',
        'data': 'list[object]',
        'max': 'object',
        'legend': 'str',
        'description': 'str',
        'label': 'str',
        'type': 'str',
        'min': 'object',
        'avg': 'object',
        'decimal': 'int',
        'use_y_max': 'bool'
    }

    attribute_map = {
        'color_name': 'colorName',
        'std': 'std',
        'visible': 'visible',
        'color': 'color',
        'data': 'data',
        'max': 'max',
        'legend': 'legend',
        'description': 'description',
        'label': 'label',
        'type': 'type',
        'min': 'min',
        'avg': 'avg',
        'decimal': 'decimal',
        'use_y_max': 'useYMax'
    }

    def __init__(self, color_name=None, std=None, visible=None, color=None, data=None, max=None, legend=None, description=None, label=None, type=None, min=None, avg=None, decimal=None, use_y_max=None):  # noqa: E501
        """GraphPlotLine - a model defined in Swagger"""  # noqa: E501

        self._color_name = None
        self._std = None
        self._visible = None
        self._color = None
        self._data = None
        self._max = None
        self._legend = None
        self._description = None
        self._label = None
        self._type = None
        self._min = None
        self._avg = None
        self._decimal = None
        self._use_y_max = None
        self.discriminator = None

        if color_name is not None:
            self.color_name = color_name
        if std is not None:
            self.std = std
        if visible is not None:
            self.visible = visible
        if color is not None:
            self.color = color
        if data is not None:
            self.data = data
        if max is not None:
            self.max = max
        if legend is not None:
            self.legend = legend
        if description is not None:
            self.description = description
        if label is not None:
            self.label = label
        if type is not None:
            self.type = type
        if min is not None:
            self.min = min
        if avg is not None:
            self.avg = avg
        if decimal is not None:
            self.decimal = decimal
        if use_y_max is not None:
            self.use_y_max = use_y_max

    @property
    def color_name(self):
        """Gets the color_name of this GraphPlotLine.  # noqa: E501


        :return: The color_name of this GraphPlotLine.  # noqa: E501
        :rtype: str
        """
        return self._color_name

    @color_name.setter
    def color_name(self, color_name):
        """Sets the color_name of this GraphPlotLine.


        :param color_name: The color_name of this GraphPlotLine.  # noqa: E501
        :type: str
        """

        self._color_name = color_name

    @property
    def std(self):
        """Gets the std of this GraphPlotLine.  # noqa: E501


        :return: The std of this GraphPlotLine.  # noqa: E501
        :rtype: object
        """
        return self._std

    @std.setter
    def std(self, std):
        """Sets the std of this GraphPlotLine.


        :param std: The std of this GraphPlotLine.  # noqa: E501
        :type: object
        """

        self._std = std

    @property
    def visible(self):
        """Gets the visible of this GraphPlotLine.  # noqa: E501


        :return: The visible of this GraphPlotLine.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this GraphPlotLine.


        :param visible: The visible of this GraphPlotLine.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def color(self):
        """Gets the color of this GraphPlotLine.  # noqa: E501


        :return: The color of this GraphPlotLine.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this GraphPlotLine.


        :param color: The color of this GraphPlotLine.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def data(self):
        """Gets the data of this GraphPlotLine.  # noqa: E501


        :return: The data of this GraphPlotLine.  # noqa: E501
        :rtype: list[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GraphPlotLine.


        :param data: The data of this GraphPlotLine.  # noqa: E501
        :type: list[object]
        """

        self._data = data

    @property
    def max(self):
        """Gets the max of this GraphPlotLine.  # noqa: E501


        :return: The max of this GraphPlotLine.  # noqa: E501
        :rtype: object
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this GraphPlotLine.


        :param max: The max of this GraphPlotLine.  # noqa: E501
        :type: object
        """

        self._max = max

    @property
    def legend(self):
        """Gets the legend of this GraphPlotLine.  # noqa: E501


        :return: The legend of this GraphPlotLine.  # noqa: E501
        :rtype: str
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this GraphPlotLine.


        :param legend: The legend of this GraphPlotLine.  # noqa: E501
        :type: str
        """

        self._legend = legend

    @property
    def description(self):
        """Gets the description of this GraphPlotLine.  # noqa: E501


        :return: The description of this GraphPlotLine.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GraphPlotLine.


        :param description: The description of this GraphPlotLine.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this GraphPlotLine.  # noqa: E501


        :return: The label of this GraphPlotLine.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GraphPlotLine.


        :param label: The label of this GraphPlotLine.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this GraphPlotLine.  # noqa: E501


        :return: The type of this GraphPlotLine.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GraphPlotLine.


        :param type: The type of this GraphPlotLine.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def min(self):
        """Gets the min of this GraphPlotLine.  # noqa: E501


        :return: The min of this GraphPlotLine.  # noqa: E501
        :rtype: object
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this GraphPlotLine.


        :param min: The min of this GraphPlotLine.  # noqa: E501
        :type: object
        """

        self._min = min

    @property
    def avg(self):
        """Gets the avg of this GraphPlotLine.  # noqa: E501


        :return: The avg of this GraphPlotLine.  # noqa: E501
        :rtype: object
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this GraphPlotLine.


        :param avg: The avg of this GraphPlotLine.  # noqa: E501
        :type: object
        """

        self._avg = avg

    @property
    def decimal(self):
        """Gets the decimal of this GraphPlotLine.  # noqa: E501


        :return: The decimal of this GraphPlotLine.  # noqa: E501
        :rtype: int
        """
        return self._decimal

    @decimal.setter
    def decimal(self, decimal):
        """Sets the decimal of this GraphPlotLine.


        :param decimal: The decimal of this GraphPlotLine.  # noqa: E501
        :type: int
        """

        self._decimal = decimal

    @property
    def use_y_max(self):
        """Gets the use_y_max of this GraphPlotLine.  # noqa: E501


        :return: The use_y_max of this GraphPlotLine.  # noqa: E501
        :rtype: bool
        """
        return self._use_y_max

    @use_y_max.setter
    def use_y_max(self, use_y_max):
        """Sets the use_y_max of this GraphPlotLine.


        :param use_y_max: The use_y_max of this GraphPlotLine.  # noqa: E501
        :type: bool
        """

        self._use_y_max = use_y_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GraphPlotLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphPlotLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
