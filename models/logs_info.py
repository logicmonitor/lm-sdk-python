# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LogsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logs_data_type': 'str',
        'query': 'str',
        'widget_view': 'str',
        'aggregate_type': 'str'
    }

    attribute_map = {
        'logs_data_type': 'logsDataType',
        'query': 'query',
        'widget_view': 'widgetView',
        'aggregate_type': 'aggregateType'
    }

    def __init__(self, logs_data_type=None, query=None, widget_view=None, aggregate_type=None):  # noqa: E501
        """LogsInfo - a model defined in Swagger"""  # noqa: E501

        self._logs_data_type = None
        self._query = None
        self._widget_view = None
        self._aggregate_type = None
        self.discriminator = None

        self.logs_data_type = logs_data_type
        if query is not None:
            self.query = query
        if widget_view is not None:
            self.widget_view = widget_view
        self.aggregate_type = aggregate_type

    @property
    def logs_data_type(self):
        """Gets the logs_data_type of this LogsInfo.  # noqa: E501

        The logsDataType included in the widget. Note that a logsDataType must be referenced in the logsInfo object in order to be displayed  # noqa: E501

        :return: The logs_data_type of this LogsInfo.  # noqa: E501
        :rtype: str
        """
        return self._logs_data_type

    @logs_data_type.setter
    def logs_data_type(self, logs_data_type):
        """Sets the logs_data_type of this LogsInfo.

        The logsDataType included in the widget. Note that a logsDataType must be referenced in the logsInfo object in order to be displayed  # noqa: E501

        :param logs_data_type: The logs_data_type of this LogsInfo.  # noqa: E501
        :type: str
        """
        if logs_data_type is None:
            raise ValueError("Invalid value for `logs_data_type`, must not be `None`")  # noqa: E501

        self._logs_data_type = logs_data_type

    @property
    def query(self):
        """Gets the query of this LogsInfo.  # noqa: E501

        The query is used for saving the logs query expression  # noqa: E501

        :return: The query of this LogsInfo.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this LogsInfo.

        The query is used for saving the logs query expression  # noqa: E501

        :param query: The query of this LogsInfo.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def widget_view(self):
        """Gets the widget_view of this LogsInfo.  # noqa: E501

        The widgetView included in the widget. Note that a widgetView must be referenced in the logsInfo object in order to be displayed  # noqa: E501

        :return: The widget_view of this LogsInfo.  # noqa: E501
        :rtype: str
        """
        return self._widget_view

    @widget_view.setter
    def widget_view(self, widget_view):
        """Sets the widget_view of this LogsInfo.

        The widgetView included in the widget. Note that a widgetView must be referenced in the logsInfo object in order to be displayed  # noqa: E501

        :param widget_view: The widget_view of this LogsInfo.  # noqa: E501
        :type: str
        """

        self._widget_view = widget_view

    @property
    def aggregate_type(self):
        """Gets the aggregate_type of this LogsInfo.  # noqa: E501

        The field is used for saving the widget aggregateType  # noqa: E501

        :return: The aggregate_type of this LogsInfo.  # noqa: E501
        :rtype: str
        """
        return self._aggregate_type

    @aggregate_type.setter
    def aggregate_type(self, aggregate_type):
        """Sets the aggregate_type of this LogsInfo.

        The field is used for saving the widget aggregateType  # noqa: E501

        :param aggregate_type: The aggregate_type of this LogsInfo.  # noqa: E501
        :type: str
        """
        if aggregate_type is None:
            raise ValueError("Invalid value for `aggregate_type`, must not be `None`")  # noqa: E501

        self._aggregate_type = aggregate_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
