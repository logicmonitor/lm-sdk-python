# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from logicmonitor_sdk.models.collector_attribute import CollectorAttribute  # noqa: F401,E501


class SaasSalesforceSOQLQueryCollectorAttributeV3(CollectorAttribute):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'period': 'int',
        'where_clause': 'str',
        'group_by_clause': 'str',
        'soql_entity': 'str',
        'date_column': 'str',
        'instance_column_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'period': 'period',
        'where_clause': 'whereClause',
        'group_by_clause': 'groupByClause',
        'soql_entity': 'soqlEntity',
        'date_column': 'dateColumn',
        'instance_column_name': 'instanceColumnName'
    }

    def __init__(self, name=None, period=None, where_clause=None, group_by_clause=None, soql_entity=None, date_column=None, instance_column_name=None):  # noqa: E501
        """SaasSalesforceSOQLQueryCollectorAttributeV3 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._period = None
        self._where_clause = None
        self._group_by_clause = None
        self._soql_entity = None
        self._date_column = None
        self._instance_column_name = None
        self.discriminator = None

        self.name = name
        if period is not None:
            self.period = period
        if where_clause is not None:
            self.where_clause = where_clause
        if group_by_clause is not None:
            self.group_by_clause = group_by_clause
        self.soql_entity = soql_entity
        if date_column is not None:
            self.date_column = date_column
        if instance_column_name is not None:
            self.instance_column_name = instance_column_name

    @property
    def name(self):
        """Gets the name of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501

        data collector's name  # noqa: E501

        :return: The name of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SaasSalesforceSOQLQueryCollectorAttributeV3.

        data collector's name  # noqa: E501

        :param name: The name of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def period(self):
        """Gets the period of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501


        :return: The period of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this SaasSalesforceSOQLQueryCollectorAttributeV3.


        :param period: The period of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def where_clause(self):
        """Gets the where_clause of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501


        :return: The where_clause of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._where_clause

    @where_clause.setter
    def where_clause(self, where_clause):
        """Sets the where_clause of this SaasSalesforceSOQLQueryCollectorAttributeV3.


        :param where_clause: The where_clause of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :type: str
        """

        self._where_clause = where_clause

    @property
    def group_by_clause(self):
        """Gets the group_by_clause of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501


        :return: The group_by_clause of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._group_by_clause

    @group_by_clause.setter
    def group_by_clause(self, group_by_clause):
        """Sets the group_by_clause of this SaasSalesforceSOQLQueryCollectorAttributeV3.


        :param group_by_clause: The group_by_clause of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :type: str
        """

        self._group_by_clause = group_by_clause

    @property
    def soql_entity(self):
        """Gets the soql_entity of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501


        :return: The soql_entity of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._soql_entity

    @soql_entity.setter
    def soql_entity(self, soql_entity):
        """Sets the soql_entity of this SaasSalesforceSOQLQueryCollectorAttributeV3.


        :param soql_entity: The soql_entity of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :type: str
        """
        if soql_entity is None:
            raise ValueError("Invalid value for `soql_entity`, must not be `None`")  # noqa: E501

        self._soql_entity = soql_entity

    @property
    def date_column(self):
        """Gets the date_column of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501


        :return: The date_column of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._date_column

    @date_column.setter
    def date_column(self, date_column):
        """Sets the date_column of this SaasSalesforceSOQLQueryCollectorAttributeV3.


        :param date_column: The date_column of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :type: str
        """

        self._date_column = date_column

    @property
    def instance_column_name(self):
        """Gets the instance_column_name of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501


        :return: The instance_column_name of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._instance_column_name

    @instance_column_name.setter
    def instance_column_name(self, instance_column_name):
        """Sets the instance_column_name of this SaasSalesforceSOQLQueryCollectorAttributeV3.


        :param instance_column_name: The instance_column_name of this SaasSalesforceSOQLQueryCollectorAttributeV3.  # noqa: E501
        :type: str
        """

        self._instance_column_name = instance_column_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaasSalesforceSOQLQueryCollectorAttributeV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaasSalesforceSOQLQueryCollectorAttributeV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
