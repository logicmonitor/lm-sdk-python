# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.sdt import SDT  # noqa: F401,E501

class ResourceGroupSDT(SDT):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_source_id': 'int',
        'device_group_id': 'int',
        'data_source_name': 'str',
        'device_group_full_path': 'str'
    }
    if hasattr(SDT, "swagger_types"):
        swagger_types.update(SDT.swagger_types)

    attribute_map = {
        'data_source_id': 'dataSourceId',
        'device_group_id': 'deviceGroupId',
        'data_source_name': 'dataSourceName',
        'device_group_full_path': 'deviceGroupFullPath'
    }
    if hasattr(SDT, "attribute_map"):
        attribute_map.update(SDT.attribute_map)

    def __init__(self, data_source_id=None, device_group_id=None, data_source_name=None, device_group_full_path=None, *args, **kwargs):  # noqa: E501
        """ResourceGroupSDT - a model defined in Swagger"""  # noqa: E501
        self._data_source_id = None
        self._device_group_id = None
        self._data_source_name = None
        self._device_group_full_path = None
        self.discriminator = None
        if data_source_id is not None:
            self.data_source_id = data_source_id
        if device_group_id is not None:
            self.device_group_id = device_group_id
        if data_source_name is not None:
            self.data_source_name = data_source_name
        if device_group_full_path is not None:
            self.device_group_full_path = device_group_full_path
        SDT.__init__(self, *args, **kwargs)

    @property
    def data_source_id(self):
        """Gets the data_source_id of this ResourceGroupSDT.  # noqa: E501

        The id of the datasource that this SDT will be associated with, for the specified group. dataSourceId 0 indicates all datasources  # noqa: E501

        :return: The data_source_id of this ResourceGroupSDT.  # noqa: E501
        :rtype: int
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this ResourceGroupSDT.

        The id of the datasource that this SDT will be associated with, for the specified group. dataSourceId 0 indicates all datasources  # noqa: E501

        :param data_source_id: The data_source_id of this ResourceGroupSDT.  # noqa: E501
        :type: int
        """

        self._data_source_id = data_source_id

    @property
    def device_group_id(self):
        """Gets the device_group_id of this ResourceGroupSDT.  # noqa: E501

        The id of the device group that the SDT will be associated with  # noqa: E501

        :return: The device_group_id of this ResourceGroupSDT.  # noqa: E501
        :rtype: int
        """
        return self._device_group_id

    @device_group_id.setter
    def device_group_id(self, device_group_id):
        """Sets the device_group_id of this ResourceGroupSDT.

        The id of the device group that the SDT will be associated with  # noqa: E501

        :param device_group_id: The device_group_id of this ResourceGroupSDT.  # noqa: E501
        :type: int
        """

        self._device_group_id = device_group_id

    @property
    def data_source_name(self):
        """Gets the data_source_name of this ResourceGroupSDT.  # noqa: E501

        The name of the datasource that this SDT will be associated with, for the specified group. dataSourceName \"All\" indicates all datasources  # noqa: E501

        :return: The data_source_name of this ResourceGroupSDT.  # noqa: E501
        :rtype: str
        """
        return self._data_source_name

    @data_source_name.setter
    def data_source_name(self, data_source_name):
        """Sets the data_source_name of this ResourceGroupSDT.

        The name of the datasource that this SDT will be associated with, for the specified group. dataSourceName \"All\" indicates all datasources  # noqa: E501

        :param data_source_name: The data_source_name of this ResourceGroupSDT.  # noqa: E501
        :type: str
        """

        self._data_source_name = data_source_name

    @property
    def device_group_full_path(self):
        """Gets the device_group_full_path of this ResourceGroupSDT.  # noqa: E501

        The full path of the device group that this SDT will be associated with  # noqa: E501

        :return: The device_group_full_path of this ResourceGroupSDT.  # noqa: E501
        :rtype: str
        """
        return self._device_group_full_path

    @device_group_full_path.setter
    def device_group_full_path(self, device_group_full_path):
        """Sets the device_group_full_path of this ResourceGroupSDT.

        The full path of the device group that this SDT will be associated with  # noqa: E501

        :param device_group_full_path: The device_group_full_path of this ResourceGroupSDT.  # noqa: E501
        :type: str
        """

        self._device_group_full_path = device_group_full_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceGroupSDT, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceGroupSDT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
