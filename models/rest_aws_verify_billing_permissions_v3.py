# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestAWSVerifyBillingPermissionsV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'opt_in_warnings': 'dict(str, str)',
        'is_valid': 'bool',
        'permission_errors': 'list[str]',
        'non_permission_errors': 'list[str]'
    }

    attribute_map = {
        'opt_in_warnings': 'optInWarnings',
        'is_valid': 'isValid',
        'permission_errors': 'permissionErrors',
        'non_permission_errors': 'nonPermissionErrors'
    }

    def __init__(self, opt_in_warnings=None, is_valid=None, permission_errors=None, non_permission_errors=None):  # noqa: E501
        """RestAWSVerifyBillingPermissionsV3 - a model defined in Swagger"""  # noqa: E501
        self._opt_in_warnings = None
        self._is_valid = None
        self._permission_errors = None
        self._non_permission_errors = None
        self.discriminator = None
        if opt_in_warnings is not None:
            self.opt_in_warnings = opt_in_warnings
        if is_valid is not None:
            self.is_valid = is_valid
        if permission_errors is not None:
            self.permission_errors = permission_errors
        if non_permission_errors is not None:
            self.non_permission_errors = non_permission_errors

    @property
    def opt_in_warnings(self):
        """Gets the opt_in_warnings of this RestAWSVerifyBillingPermissionsV3.  # noqa: E501


        :return: The opt_in_warnings of this RestAWSVerifyBillingPermissionsV3.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._opt_in_warnings

    @opt_in_warnings.setter
    def opt_in_warnings(self, opt_in_warnings):
        """Sets the opt_in_warnings of this RestAWSVerifyBillingPermissionsV3.


        :param opt_in_warnings: The opt_in_warnings of this RestAWSVerifyBillingPermissionsV3.  # noqa: E501
        :type: dict(str, str)
        """

        self._opt_in_warnings = opt_in_warnings

    @property
    def is_valid(self):
        """Gets the is_valid of this RestAWSVerifyBillingPermissionsV3.  # noqa: E501


        :return: The is_valid of this RestAWSVerifyBillingPermissionsV3.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this RestAWSVerifyBillingPermissionsV3.


        :param is_valid: The is_valid of this RestAWSVerifyBillingPermissionsV3.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def permission_errors(self):
        """Gets the permission_errors of this RestAWSVerifyBillingPermissionsV3.  # noqa: E501


        :return: The permission_errors of this RestAWSVerifyBillingPermissionsV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._permission_errors

    @permission_errors.setter
    def permission_errors(self, permission_errors):
        """Sets the permission_errors of this RestAWSVerifyBillingPermissionsV3.


        :param permission_errors: The permission_errors of this RestAWSVerifyBillingPermissionsV3.  # noqa: E501
        :type: list[str]
        """

        self._permission_errors = permission_errors

    @property
    def non_permission_errors(self):
        """Gets the non_permission_errors of this RestAWSVerifyBillingPermissionsV3.  # noqa: E501


        :return: The non_permission_errors of this RestAWSVerifyBillingPermissionsV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._non_permission_errors

    @non_permission_errors.setter
    def non_permission_errors(self, non_permission_errors):
        """Sets the non_permission_errors of this RestAWSVerifyBillingPermissionsV3.


        :param non_permission_errors: The non_permission_errors of this RestAWSVerifyBillingPermissionsV3.  # noqa: E501
        :type: list[str]
        """

        self._non_permission_errors = non_permission_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestAWSVerifyBillingPermissionsV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestAWSVerifyBillingPermissionsV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
