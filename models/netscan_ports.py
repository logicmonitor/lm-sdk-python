# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NetscanPorts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_global_default': 'bool',
        'value': 'str'
    }

    attribute_map = {
        'is_global_default': 'isGlobalDefault',
        'value': 'value'
    }

    def __init__(self, is_global_default=None, value=None):  # noqa: E501
        """NetscanPorts - a model defined in Swagger"""  # noqa: E501

        self._is_global_default = None
        self._value = None
        self.discriminator = None

        if is_global_default is not None:
            self.is_global_default = is_global_default
        if value is not None:
            self.value = value

    @property
    def is_global_default(self):
        """Gets the is_global_default of this NetscanPorts.  # noqa: E501

        Whether or not default ports should be used  # noqa: E501

        :return: The is_global_default of this NetscanPorts.  # noqa: E501
        :rtype: bool
        """
        return self._is_global_default

    @is_global_default.setter
    def is_global_default(self, is_global_default):
        """Sets the is_global_default of this NetscanPorts.

        Whether or not default ports should be used  # noqa: E501

        :param is_global_default: The is_global_default of this NetscanPorts.  # noqa: E501
        :type: bool
        """

        self._is_global_default = is_global_default

    @property
    def value(self):
        """Gets the value of this NetscanPorts.  # noqa: E501

        The ports that should be used in the Netscan  # noqa: E501

        :return: The value of this NetscanPorts.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NetscanPorts.

        The ports that should be used in the Netscan  # noqa: E501

        :param value: The value of this NetscanPorts.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetscanPorts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetscanPorts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
