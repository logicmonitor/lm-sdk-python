# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.widget import Widget  # noqa: F401,E501

class WebsiteSLAWidget(Widget):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'days_in_week': 'str',
        'timezone': 'str',
        'period_in_one_day': 'str',
        'items': 'list[WebsiteItemConfig]',
        'color_thresholds': 'list[ColorThreshold]'
    }
    if hasattr(Widget, "swagger_types"):
        swagger_types.update(Widget.swagger_types)

    attribute_map = {
        'days_in_week': 'daysInWeek',
        'timezone': 'timezone',
        'period_in_one_day': 'periodInOneDay',
        'items': 'items',
        'color_thresholds': 'colorThresholds'
    }
    if hasattr(Widget, "attribute_map"):
        attribute_map.update(Widget.attribute_map)

    def __init__(self, days_in_week=None, timezone=None, period_in_one_day=None, items=None, color_thresholds=None, *args, **kwargs):  # noqa: E501
        """WebsiteSLAWidget - a model defined in Swagger"""  # noqa: E501
        self._days_in_week = None
        self._timezone = None
        self._period_in_one_day = None
        self._items = None
        self._color_thresholds = None
        self.discriminator = None
        if days_in_week is not None:
            self.days_in_week = days_in_week
        if timezone is not None:
            self.timezone = timezone
        if period_in_one_day is not None:
            self.period_in_one_day = period_in_one_day
        self.items = items
        if color_thresholds is not None:
            self.color_thresholds = color_thresholds
        Widget.__init__(self, *args, **kwargs)

    @property
    def days_in_week(self):
        """Gets the days_in_week of this WebsiteSLAWidget.  # noqa: E501

        The days that SLA should be computed for, separated by commas. 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday  # noqa: E501

        :return: The days_in_week of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._days_in_week

    @days_in_week.setter
    def days_in_week(self, days_in_week):
        """Sets the days_in_week of this WebsiteSLAWidget.

        The days that SLA should be computed for, separated by commas. 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday  # noqa: E501

        :param days_in_week: The days_in_week of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """

        self._days_in_week = days_in_week

    @property
    def timezone(self):
        """Gets the timezone of this WebsiteSLAWidget.  # noqa: E501

        The specific timezone for the widget  # noqa: E501

        :return: The timezone of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this WebsiteSLAWidget.

        The specific timezone for the widget  # noqa: E501

        :param timezone: The timezone of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def period_in_one_day(self):
        """Gets the period_in_one_day of this WebsiteSLAWidget.  # noqa: E501

        The period during the selected days that the SLA should be computed for. * = all day, or a time range can be specified in the format of \"hh:mm TO hh:mm\", e.g. \"01:15 TO 17:15\"  # noqa: E501

        :return: The period_in_one_day of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._period_in_one_day

    @period_in_one_day.setter
    def period_in_one_day(self, period_in_one_day):
        """Sets the period_in_one_day of this WebsiteSLAWidget.

        The period during the selected days that the SLA should be computed for. * = all day, or a time range can be specified in the format of \"hh:mm TO hh:mm\", e.g. \"01:15 TO 17:15\"  # noqa: E501

        :param period_in_one_day: The period_in_one_day of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """

        self._period_in_one_day = period_in_one_day

    @property
    def items(self):
        """Gets the items of this WebsiteSLAWidget.  # noqa: E501

        The websites that should be used to compute the SLA  # noqa: E501

        :return: The items of this WebsiteSLAWidget.  # noqa: E501
        :rtype: list[WebsiteItemConfig]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this WebsiteSLAWidget.

        The websites that should be used to compute the SLA  # noqa: E501

        :param items: The items of this WebsiteSLAWidget.  # noqa: E501
        :type: list[WebsiteItemConfig]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def color_thresholds(self):
        """Gets the color_thresholds of this WebsiteSLAWidget.  # noqa: E501

        The threshold of color changes  # noqa: E501

        :return: The color_thresholds of this WebsiteSLAWidget.  # noqa: E501
        :rtype: list[ColorThreshold]
        """
        return self._color_thresholds

    @color_thresholds.setter
    def color_thresholds(self, color_thresholds):
        """Sets the color_thresholds of this WebsiteSLAWidget.

        The threshold of color changes  # noqa: E501

        :param color_thresholds: The color_thresholds of this WebsiteSLAWidget.  # noqa: E501
        :type: list[ColorThreshold]
        """

        self._color_thresholds = color_thresholds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebsiteSLAWidget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebsiteSLAWidget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
