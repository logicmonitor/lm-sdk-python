# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.widget import Widget  # noqa: F401,E501

class GoogleMapWidget(Widget):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ack_checked': 'object',
        'display_error_alert': 'object',
        'display_warn_alert': 'object',
        'display_critical_alert': 'object',
        'sdt_checked': 'object',
        'map_points': 'list[PointSource]'
    }
    if hasattr(Widget, "swagger_types"):
        swagger_types.update(Widget.swagger_types)

    attribute_map = {
        'ack_checked': 'ackChecked',
        'display_error_alert': 'displayErrorAlert',
        'display_warn_alert': 'displayWarnAlert',
        'display_critical_alert': 'displayCriticalAlert',
        'sdt_checked': 'sdtChecked',
        'map_points': 'mapPoints'
    }
    if hasattr(Widget, "attribute_map"):
        attribute_map.update(Widget.attribute_map)

    def __init__(self, ack_checked=None, display_error_alert=None, display_warn_alert=None, display_critical_alert=None, sdt_checked=None, map_points=None, *args, **kwargs):  # noqa: E501
        """GoogleMapWidget - a model defined in Swagger"""  # noqa: E501
        self._ack_checked = None
        self._display_error_alert = None
        self._display_warn_alert = None
        self._display_critical_alert = None
        self._sdt_checked = None
        self._map_points = None
        self.discriminator = None
        if ack_checked is not None:
            self.ack_checked = ack_checked
        if display_error_alert is not None:
            self.display_error_alert = display_error_alert
        if display_warn_alert is not None:
            self.display_warn_alert = display_warn_alert
        if display_critical_alert is not None:
            self.display_critical_alert = display_critical_alert
        if sdt_checked is not None:
            self.sdt_checked = sdt_checked
        self.map_points = map_points
        Widget.__init__(self, *args, **kwargs)

    @property
    def ack_checked(self):
        """Gets the ack_checked of this GoogleMapWidget.  # noqa: E501

        Whether ACKed alerts should be displayed, the default value is true  # noqa: E501

        :return: The ack_checked of this GoogleMapWidget.  # noqa: E501
        :rtype: object
        """
        return self._ack_checked

    @ack_checked.setter
    def ack_checked(self, ack_checked):
        """Sets the ack_checked of this GoogleMapWidget.

        Whether ACKed alerts should be displayed, the default value is true  # noqa: E501

        :param ack_checked: The ack_checked of this GoogleMapWidget.  # noqa: E501
        :type: object
        """

        self._ack_checked = ack_checked

    @property
    def display_error_alert(self):
        """Gets the display_error_alert of this GoogleMapWidget.  # noqa: E501

        Whether error alerts should be displayed, the default value is true  # noqa: E501

        :return: The display_error_alert of this GoogleMapWidget.  # noqa: E501
        :rtype: object
        """
        return self._display_error_alert

    @display_error_alert.setter
    def display_error_alert(self, display_error_alert):
        """Sets the display_error_alert of this GoogleMapWidget.

        Whether error alerts should be displayed, the default value is true  # noqa: E501

        :param display_error_alert: The display_error_alert of this GoogleMapWidget.  # noqa: E501
        :type: object
        """

        self._display_error_alert = display_error_alert

    @property
    def display_warn_alert(self):
        """Gets the display_warn_alert of this GoogleMapWidget.  # noqa: E501

        Whether warning alerts should be displayed, the default value is true  # noqa: E501

        :return: The display_warn_alert of this GoogleMapWidget.  # noqa: E501
        :rtype: object
        """
        return self._display_warn_alert

    @display_warn_alert.setter
    def display_warn_alert(self, display_warn_alert):
        """Sets the display_warn_alert of this GoogleMapWidget.

        Whether warning alerts should be displayed, the default value is true  # noqa: E501

        :param display_warn_alert: The display_warn_alert of this GoogleMapWidget.  # noqa: E501
        :type: object
        """

        self._display_warn_alert = display_warn_alert

    @property
    def display_critical_alert(self):
        """Gets the display_critical_alert of this GoogleMapWidget.  # noqa: E501

        Whether critical alerts should be displayed, the default value is true  # noqa: E501

        :return: The display_critical_alert of this GoogleMapWidget.  # noqa: E501
        :rtype: object
        """
        return self._display_critical_alert

    @display_critical_alert.setter
    def display_critical_alert(self, display_critical_alert):
        """Sets the display_critical_alert of this GoogleMapWidget.

        Whether critical alerts should be displayed, the default value is true  # noqa: E501

        :param display_critical_alert: The display_critical_alert of this GoogleMapWidget.  # noqa: E501
        :type: object
        """

        self._display_critical_alert = display_critical_alert

    @property
    def sdt_checked(self):
        """Gets the sdt_checked of this GoogleMapWidget.  # noqa: E501

        Whether alerts occuring during an SDT period should be displayed, the default value is true  # noqa: E501

        :return: The sdt_checked of this GoogleMapWidget.  # noqa: E501
        :rtype: object
        """
        return self._sdt_checked

    @sdt_checked.setter
    def sdt_checked(self, sdt_checked):
        """Sets the sdt_checked of this GoogleMapWidget.

        Whether alerts occuring during an SDT period should be displayed, the default value is true  # noqa: E501

        :param sdt_checked: The sdt_checked of this GoogleMapWidget.  # noqa: E501
        :type: object
        """

        self._sdt_checked = sdt_checked

    @property
    def map_points(self):
        """Gets the map_points of this GoogleMapWidget.  # noqa: E501

        The points info  # noqa: E501

        :return: The map_points of this GoogleMapWidget.  # noqa: E501
        :rtype: list[PointSource]
        """
        return self._map_points

    @map_points.setter
    def map_points(self, map_points):
        """Sets the map_points of this GoogleMapWidget.

        The points info  # noqa: E501

        :param map_points: The map_points of this GoogleMapWidget.  # noqa: E501
        :type: list[PointSource]
        """
        if map_points is None:
            raise ValueError("Invalid value for `map_points`, must not be `None`")  # noqa: E501

        self._map_points = map_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoogleMapWidget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoogleMapWidget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
