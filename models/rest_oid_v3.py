# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RestOidV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'installation_metadata': 'IntegrationMetadata',
        'access_groups': 'list[AccessGroup]',
        'checksum': 'str',
        'id': 'int',
        'oid': 'str',
        'categories': 'str',
        'access_group_ids': 'list[int]',
        'lineage_id': 'str'
    }

    attribute_map = {
        'installation_metadata': 'installationMetadata',
        'access_groups': 'accessGroups',
        'checksum': 'checksum',
        'id': 'id',
        'oid': 'oid',
        'categories': 'categories',
        'access_group_ids': 'accessGroupIds',
        'lineage_id': 'lineageId'
    }

    def __init__(self, installation_metadata=None, access_groups=None, checksum=None, id=None, oid=None, categories=None, access_group_ids=None, lineage_id=None):  # noqa: E501
        """RestOidV3 - a model defined in Swagger"""  # noqa: E501
        self._installation_metadata = None
        self._access_groups = None
        self._checksum = None
        self._id = None
        self._oid = None
        self._categories = None
        self._access_group_ids = None
        self._lineage_id = None
        self.discriminator = None
        if installation_metadata is not None:
            self.installation_metadata = installation_metadata
        if access_groups is not None:
            self.access_groups = access_groups
        if checksum is not None:
            self.checksum = checksum
        if id is not None:
            self.id = id
        if oid is not None:
            self.oid = oid
        if categories is not None:
            self.categories = categories
        if access_group_ids is not None:
            self.access_group_ids = access_group_ids
        if lineage_id is not None:
            self.lineage_id = lineage_id

    @property
    def installation_metadata(self):
        """Gets the installation_metadata of this RestOidV3.  # noqa: E501


        :return: The installation_metadata of this RestOidV3.  # noqa: E501
        :rtype: IntegrationMetadata
        """
        return self._installation_metadata

    @installation_metadata.setter
    def installation_metadata(self, installation_metadata):
        """Sets the installation_metadata of this RestOidV3.


        :param installation_metadata: The installation_metadata of this RestOidV3.  # noqa: E501
        :type: IntegrationMetadata
        """

        self._installation_metadata = installation_metadata

    @property
    def access_groups(self):
        """Gets the access_groups of this RestOidV3.  # noqa: E501

        Access group Details in response  # noqa: E501

        :return: The access_groups of this RestOidV3.  # noqa: E501
        :rtype: list[AccessGroup]
        """
        return self._access_groups

    @access_groups.setter
    def access_groups(self, access_groups):
        """Sets the access_groups of this RestOidV3.

        Access group Details in response  # noqa: E501

        :param access_groups: The access_groups of this RestOidV3.  # noqa: E501
        :type: list[AccessGroup]
        """

        self._access_groups = access_groups

    @property
    def checksum(self):
        """Gets the checksum of this RestOidV3.  # noqa: E501

        Checksum generated from the content of the module  # noqa: E501

        :return: The checksum of this RestOidV3.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this RestOidV3.

        Checksum generated from the content of the module  # noqa: E501

        :param checksum: The checksum of this RestOidV3.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def id(self):
        """Gets the id of this RestOidV3.  # noqa: E501

        Local ID of the module  # noqa: E501

        :return: The id of this RestOidV3.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RestOidV3.

        Local ID of the module  # noqa: E501

        :param id: The id of this RestOidV3.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def oid(self):
        """Gets the oid of this RestOidV3.  # noqa: E501

        The OID pattern to match to  # noqa: E501

        :return: The oid of this RestOidV3.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this RestOidV3.

        The OID pattern to match to  # noqa: E501

        :param oid: The oid of this RestOidV3.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def categories(self):
        """Gets the categories of this RestOidV3.  # noqa: E501

        Categories to match the OID on  # noqa: E501

        :return: The categories of this RestOidV3.  # noqa: E501
        :rtype: str
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this RestOidV3.

        Categories to match the OID on  # noqa: E501

        :param categories: The categories of this RestOidV3.  # noqa: E501
        :type: str
        """

        self._categories = categories

    @property
    def access_group_ids(self):
        """Gets the access_group_ids of this RestOidV3.  # noqa: E501

        The Access Groups Id's  # noqa: E501

        :return: The access_group_ids of this RestOidV3.  # noqa: E501
        :rtype: list[int]
        """
        return self._access_group_ids

    @access_group_ids.setter
    def access_group_ids(self, access_group_ids):
        """Sets the access_group_ids of this RestOidV3.

        The Access Groups Id's  # noqa: E501

        :param access_group_ids: The access_group_ids of this RestOidV3.  # noqa: E501
        :type: list[int]
        """

        self._access_group_ids = access_group_ids

    @property
    def lineage_id(self):
        """Gets the lineage_id of this RestOidV3.  # noqa: E501

        The lineage ID that the LMModule belongs to  # noqa: E501

        :return: The lineage_id of this RestOidV3.  # noqa: E501
        :rtype: str
        """
        return self._lineage_id

    @lineage_id.setter
    def lineage_id(self, lineage_id):
        """Sets the lineage_id of this RestOidV3.

        The lineage ID that the LMModule belongs to  # noqa: E501

        :param lineage_id: The lineage_id of this RestOidV3.  # noqa: E501
        :type: str
        """

        self._lineage_id = lineage_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestOidV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestOidV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
