# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from logicmonitor_sdk.models.netflow_data_base import NetflowDataBase  # noqa: F401,E501


class NetflowNbarApplication(NetflowDataBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_type': 'str',
        'percent_usage': 'float',
        'usage': 'float',
        'name': 'str',
        'type': 'str',
        'application_tag': 'int'
    }

    attribute_map = {
        'data_type': 'dataType',
        'percent_usage': 'percentUsage',
        'usage': 'usage',
        'name': 'name',
        'type': 'type',
        'application_tag': 'applicationTag'
    }

    def __init__(self, data_type=None, percent_usage=None, usage=None, name=None, type=None, application_tag=None):  # noqa: E501
        """NetflowNbarApplication - a model defined in Swagger"""  # noqa: E501

        self._data_type = None
        self._percent_usage = None
        self._usage = None
        self._name = None
        self._type = None
        self._application_tag = None
        self.discriminator = None

        if data_type is not None:
            self.data_type = data_type
        if percent_usage is not None:
            self.percent_usage = percent_usage
        if usage is not None:
            self.usage = usage
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if application_tag is not None:
            self.application_tag = application_tag

    @property
    def data_type(self):
        """Gets the data_type of this NetflowNbarApplication.  # noqa: E501


        :return: The data_type of this NetflowNbarApplication.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this NetflowNbarApplication.


        :param data_type: The data_type of this NetflowNbarApplication.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def percent_usage(self):
        """Gets the percent_usage of this NetflowNbarApplication.  # noqa: E501


        :return: The percent_usage of this NetflowNbarApplication.  # noqa: E501
        :rtype: float
        """
        return self._percent_usage

    @percent_usage.setter
    def percent_usage(self, percent_usage):
        """Sets the percent_usage of this NetflowNbarApplication.


        :param percent_usage: The percent_usage of this NetflowNbarApplication.  # noqa: E501
        :type: float
        """

        self._percent_usage = percent_usage

    @property
    def usage(self):
        """Gets the usage of this NetflowNbarApplication.  # noqa: E501


        :return: The usage of this NetflowNbarApplication.  # noqa: E501
        :rtype: float
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this NetflowNbarApplication.


        :param usage: The usage of this NetflowNbarApplication.  # noqa: E501
        :type: float
        """

        self._usage = usage

    @property
    def name(self):
        """Gets the name of this NetflowNbarApplication.  # noqa: E501


        :return: The name of this NetflowNbarApplication.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetflowNbarApplication.


        :param name: The name of this NetflowNbarApplication.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this NetflowNbarApplication.  # noqa: E501


        :return: The type of this NetflowNbarApplication.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NetflowNbarApplication.


        :param type: The type of this NetflowNbarApplication.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def application_tag(self):
        """Gets the application_tag of this NetflowNbarApplication.  # noqa: E501


        :return: The application_tag of this NetflowNbarApplication.  # noqa: E501
        :rtype: int
        """
        return self._application_tag

    @application_tag.setter
    def application_tag(self, application_tag):
        """Sets the application_tag of this NetflowNbarApplication.


        :param application_tag: The application_tag of this NetflowNbarApplication.  # noqa: E501
        :type: int
        """

        self._application_tag = application_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetflowNbarApplication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetflowNbarApplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
