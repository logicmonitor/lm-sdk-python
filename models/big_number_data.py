# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BigNumberData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'use_comma_separators': 'bool',
        'bottom_label': 'str',
        'error_message': 'str',
        'rounding': 'int',
        'position': 'int',
        'value': 'float',
        'right_label': 'str',
        'color_level': 'int'
    }

    attribute_map = {
        'use_comma_separators': 'useCommaSeparators',
        'bottom_label': 'bottomLabel',
        'error_message': 'errorMessage',
        'rounding': 'rounding',
        'position': 'position',
        'value': 'value',
        'right_label': 'rightLabel',
        'color_level': 'colorLevel'
    }

    def __init__(self, use_comma_separators=None, bottom_label=None, error_message=None, rounding=None, position=None, value=None, right_label=None, color_level=None):  # noqa: E501
        """BigNumberData - a model defined in Swagger"""  # noqa: E501

        self._use_comma_separators = None
        self._bottom_label = None
        self._error_message = None
        self._rounding = None
        self._position = None
        self._value = None
        self._right_label = None
        self._color_level = None
        self.discriminator = None

        self.use_comma_separators = use_comma_separators
        if bottom_label is not None:
            self.bottom_label = bottom_label
        if error_message is not None:
            self.error_message = error_message
        if rounding is not None:
            self.rounding = rounding
        if position is not None:
            self.position = position
        if value is not None:
            self.value = value
        if right_label is not None:
            self.right_label = right_label
        if color_level is not None:
            self.color_level = color_level

    @property
    def use_comma_separators(self):
        """Gets the use_comma_separators of this BigNumberData.  # noqa: E501


        :return: The use_comma_separators of this BigNumberData.  # noqa: E501
        :rtype: bool
        """
        return self._use_comma_separators

    @use_comma_separators.setter
    def use_comma_separators(self, use_comma_separators):
        """Sets the use_comma_separators of this BigNumberData.


        :param use_comma_separators: The use_comma_separators of this BigNumberData.  # noqa: E501
        :type: bool
        """
        if use_comma_separators is None:
            raise ValueError("Invalid value for `use_comma_separators`, must not be `None`")  # noqa: E501

        self._use_comma_separators = use_comma_separators

    @property
    def bottom_label(self):
        """Gets the bottom_label of this BigNumberData.  # noqa: E501


        :return: The bottom_label of this BigNumberData.  # noqa: E501
        :rtype: str
        """
        return self._bottom_label

    @bottom_label.setter
    def bottom_label(self, bottom_label):
        """Sets the bottom_label of this BigNumberData.


        :param bottom_label: The bottom_label of this BigNumberData.  # noqa: E501
        :type: str
        """

        self._bottom_label = bottom_label

    @property
    def error_message(self):
        """Gets the error_message of this BigNumberData.  # noqa: E501


        :return: The error_message of this BigNumberData.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this BigNumberData.


        :param error_message: The error_message of this BigNumberData.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def rounding(self):
        """Gets the rounding of this BigNumberData.  # noqa: E501


        :return: The rounding of this BigNumberData.  # noqa: E501
        :rtype: int
        """
        return self._rounding

    @rounding.setter
    def rounding(self, rounding):
        """Sets the rounding of this BigNumberData.


        :param rounding: The rounding of this BigNumberData.  # noqa: E501
        :type: int
        """

        self._rounding = rounding

    @property
    def position(self):
        """Gets the position of this BigNumberData.  # noqa: E501


        :return: The position of this BigNumberData.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BigNumberData.


        :param position: The position of this BigNumberData.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def value(self):
        """Gets the value of this BigNumberData.  # noqa: E501


        :return: The value of this BigNumberData.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BigNumberData.


        :param value: The value of this BigNumberData.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def right_label(self):
        """Gets the right_label of this BigNumberData.  # noqa: E501


        :return: The right_label of this BigNumberData.  # noqa: E501
        :rtype: str
        """
        return self._right_label

    @right_label.setter
    def right_label(self, right_label):
        """Sets the right_label of this BigNumberData.


        :param right_label: The right_label of this BigNumberData.  # noqa: E501
        :type: str
        """

        self._right_label = right_label

    @property
    def color_level(self):
        """Gets the color_level of this BigNumberData.  # noqa: E501


        :return: The color_level of this BigNumberData.  # noqa: E501
        :rtype: int
        """
        return self._color_level

    @color_level.setter
    def color_level(self, color_level):
        """Sets the color_level of this BigNumberData.


        :param color_level: The color_level of this BigNumberData.  # noqa: E501
        :type: int
        """

        self._color_level = color_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BigNumberData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BigNumberData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
