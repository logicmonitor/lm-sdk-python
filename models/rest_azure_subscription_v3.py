# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RestAzureSubscriptionV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'spending_limit': 'str',
        'location_placement_id': 'str',
        'name': 'str',
        'tenant_id': 'str',
        'quota_id': 'str',
        'id': 'str',
        'state': 'str',
        'authorization_source': 'str'
    }

    attribute_map = {
        'spending_limit': 'spendingLimit',
        'location_placement_id': 'locationPlacementId',
        'name': 'name',
        'tenant_id': 'tenantId',
        'quota_id': 'quotaId',
        'id': 'id',
        'state': 'state',
        'authorization_source': 'authorizationSource'
    }

    def __init__(self, spending_limit=None, location_placement_id=None, name=None, tenant_id=None, quota_id=None, id=None, state=None, authorization_source=None):  # noqa: E501
        """RestAzureSubscriptionV3 - a model defined in Swagger"""  # noqa: E501

        self._spending_limit = None
        self._location_placement_id = None
        self._name = None
        self._tenant_id = None
        self._quota_id = None
        self._id = None
        self._state = None
        self._authorization_source = None
        self.discriminator = None

        if spending_limit is not None:
            self.spending_limit = spending_limit
        if location_placement_id is not None:
            self.location_placement_id = location_placement_id
        if name is not None:
            self.name = name
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if quota_id is not None:
            self.quota_id = quota_id
        if id is not None:
            self.id = id
        if state is not None:
            self.state = state
        if authorization_source is not None:
            self.authorization_source = authorization_source

    @property
    def spending_limit(self):
        """Gets the spending_limit of this RestAzureSubscriptionV3.  # noqa: E501


        :return: The spending_limit of this RestAzureSubscriptionV3.  # noqa: E501
        :rtype: str
        """
        return self._spending_limit

    @spending_limit.setter
    def spending_limit(self, spending_limit):
        """Sets the spending_limit of this RestAzureSubscriptionV3.


        :param spending_limit: The spending_limit of this RestAzureSubscriptionV3.  # noqa: E501
        :type: str
        """

        self._spending_limit = spending_limit

    @property
    def location_placement_id(self):
        """Gets the location_placement_id of this RestAzureSubscriptionV3.  # noqa: E501


        :return: The location_placement_id of this RestAzureSubscriptionV3.  # noqa: E501
        :rtype: str
        """
        return self._location_placement_id

    @location_placement_id.setter
    def location_placement_id(self, location_placement_id):
        """Sets the location_placement_id of this RestAzureSubscriptionV3.


        :param location_placement_id: The location_placement_id of this RestAzureSubscriptionV3.  # noqa: E501
        :type: str
        """

        self._location_placement_id = location_placement_id

    @property
    def name(self):
        """Gets the name of this RestAzureSubscriptionV3.  # noqa: E501


        :return: The name of this RestAzureSubscriptionV3.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RestAzureSubscriptionV3.


        :param name: The name of this RestAzureSubscriptionV3.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this RestAzureSubscriptionV3.  # noqa: E501


        :return: The tenant_id of this RestAzureSubscriptionV3.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this RestAzureSubscriptionV3.


        :param tenant_id: The tenant_id of this RestAzureSubscriptionV3.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def quota_id(self):
        """Gets the quota_id of this RestAzureSubscriptionV3.  # noqa: E501


        :return: The quota_id of this RestAzureSubscriptionV3.  # noqa: E501
        :rtype: str
        """
        return self._quota_id

    @quota_id.setter
    def quota_id(self, quota_id):
        """Sets the quota_id of this RestAzureSubscriptionV3.


        :param quota_id: The quota_id of this RestAzureSubscriptionV3.  # noqa: E501
        :type: str
        """

        self._quota_id = quota_id

    @property
    def id(self):
        """Gets the id of this RestAzureSubscriptionV3.  # noqa: E501


        :return: The id of this RestAzureSubscriptionV3.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RestAzureSubscriptionV3.


        :param id: The id of this RestAzureSubscriptionV3.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def state(self):
        """Gets the state of this RestAzureSubscriptionV3.  # noqa: E501


        :return: The state of this RestAzureSubscriptionV3.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RestAzureSubscriptionV3.


        :param state: The state of this RestAzureSubscriptionV3.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def authorization_source(self):
        """Gets the authorization_source of this RestAzureSubscriptionV3.  # noqa: E501


        :return: The authorization_source of this RestAzureSubscriptionV3.  # noqa: E501
        :rtype: str
        """
        return self._authorization_source

    @authorization_source.setter
    def authorization_source(self, authorization_source):
        """Sets the authorization_source of this RestAzureSubscriptionV3.


        :param authorization_source: The authorization_source of this RestAzureSubscriptionV3.  # noqa: E501
        :type: str
        """

        self._authorization_source = authorization_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestAzureSubscriptionV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestAzureSubscriptionV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
