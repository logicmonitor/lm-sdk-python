# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateReason(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_epoch': 'int',
        'client_ip': 'str',
        'update_reason': 'str',
        'time_str': 'str',
        'id': 'int',
        'user_name': 'str'
    }

    attribute_map = {
        'time_epoch': 'timeEpoch',
        'client_ip': 'clientIp',
        'update_reason': 'updateReason',
        'time_str': 'timeStr',
        'id': 'id',
        'user_name': 'userName'
    }

    def __init__(self, time_epoch=None, client_ip=None, update_reason=None, time_str=None, id=None, user_name=None):  # noqa: E501
        """UpdateReason - a model defined in Swagger"""  # noqa: E501

        self._time_epoch = None
        self._client_ip = None
        self._update_reason = None
        self._time_str = None
        self._id = None
        self._user_name = None
        self.discriminator = None

        if time_epoch is not None:
            self.time_epoch = time_epoch
        if client_ip is not None:
            self.client_ip = client_ip
        if update_reason is not None:
            self.update_reason = update_reason
        if time_str is not None:
            self.time_str = time_str
        if id is not None:
            self.id = id
        if user_name is not None:
            self.user_name = user_name

    @property
    def time_epoch(self):
        """Gets the time_epoch of this UpdateReason.  # noqa: E501

        update date epoch  # noqa: E501

        :return: The time_epoch of this UpdateReason.  # noqa: E501
        :rtype: int
        """
        return self._time_epoch

    @time_epoch.setter
    def time_epoch(self, time_epoch):
        """Sets the time_epoch of this UpdateReason.

        update date epoch  # noqa: E501

        :param time_epoch: The time_epoch of this UpdateReason.  # noqa: E501
        :type: int
        """

        self._time_epoch = time_epoch

    @property
    def client_ip(self):
        """Gets the client_ip of this UpdateReason.  # noqa: E501

        Client IP from which this update has been made  # noqa: E501

        :return: The client_ip of this UpdateReason.  # noqa: E501
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this UpdateReason.

        Client IP from which this update has been made  # noqa: E501

        :param client_ip: The client_ip of this UpdateReason.  # noqa: E501
        :type: str
        """

        self._client_ip = client_ip

    @property
    def update_reason(self):
        """Gets the update_reason of this UpdateReason.  # noqa: E501

        update reason  # noqa: E501

        :return: The update_reason of this UpdateReason.  # noqa: E501
        :rtype: str
        """
        return self._update_reason

    @update_reason.setter
    def update_reason(self, update_reason):
        """Sets the update_reason of this UpdateReason.

        update reason  # noqa: E501

        :param update_reason: The update_reason of this UpdateReason.  # noqa: E501
        :type: str
        """

        self._update_reason = update_reason

    @property
    def time_str(self):
        """Gets the time_str of this UpdateReason.  # noqa: E501

        update date in form 'YYYY-MM-DD HH:MM:SS'  # noqa: E501

        :return: The time_str of this UpdateReason.  # noqa: E501
        :rtype: str
        """
        return self._time_str

    @time_str.setter
    def time_str(self, time_str):
        """Sets the time_str of this UpdateReason.

        update date in form 'YYYY-MM-DD HH:MM:SS'  # noqa: E501

        :param time_str: The time_str of this UpdateReason.  # noqa: E501
        :type: str
        """

        self._time_str = time_str

    @property
    def id(self):
        """Gets the id of this UpdateReason.  # noqa: E501

        ID of update reason  # noqa: E501

        :return: The id of this UpdateReason.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateReason.

        ID of update reason  # noqa: E501

        :param id: The id of this UpdateReason.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this UpdateReason.  # noqa: E501

        user who made this update  # noqa: E501

        :return: The user_name of this UpdateReason.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UpdateReason.

        user who made this update  # noqa: E501

        :param user_name: The user_name of this UpdateReason.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateReason, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateReason):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
