# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class WebsiteOverviewReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_types': 'list[int]',
        'exclude100_availability': 'bool',
        'display_type': 'int',
        'exclude_sdt': 'bool',
        'date_range': 'str',
        'items_type': 'str',
        'items': 'str'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'include_types': 'includeTypes',
        'exclude100_availability': 'exclude100Availability',
        'display_type': 'displayType',
        'exclude_sdt': 'excludeSDT',
        'date_range': 'dateRange',
        'items_type': 'itemsType',
        'items': 'items'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, include_types=None, exclude100_availability=None, display_type=None, exclude_sdt=None, date_range=None, items_type=None, items=None, *args, **kwargs):  # noqa: E501
        """WebsiteOverviewReport - a model defined in Swagger"""  # noqa: E501
        self._include_types = None
        self._exclude100_availability = None
        self._display_type = None
        self._exclude_sdt = None
        self._date_range = None
        self._items_type = None
        self._items = None
        self.discriminator = None
        if include_types is not None:
            self.include_types = include_types
        if exclude100_availability is not None:
            self.exclude100_availability = exclude100_availability
        if display_type is not None:
            self.display_type = display_type
        if exclude_sdt is not None:
            self.exclude_sdt = exclude_sdt
        if date_range is not None:
            self.date_range = date_range
        self.items_type = items_type
        if items is not None:
            self.items = items
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def include_types(self):
        """Gets the include_types of this WebsiteOverviewReport.  # noqa: E501

        The information that should be included in the report. Options include 1: availability, 2: alerts, 3: graphs  # noqa: E501

        :return: The include_types of this WebsiteOverviewReport.  # noqa: E501
        :rtype: list[int]
        """
        return self._include_types

    @include_types.setter
    def include_types(self, include_types):
        """Sets the include_types of this WebsiteOverviewReport.

        The information that should be included in the report. Options include 1: availability, 2: alerts, 3: graphs  # noqa: E501

        :param include_types: The include_types of this WebsiteOverviewReport.  # noqa: E501
        :type: list[int]
        """

        self._include_types = include_types

    @property
    def exclude100_availability(self):
        """Gets the exclude100_availability of this WebsiteOverviewReport.  # noqa: E501

        Whether or not websites with 100% availability should be ignored  # noqa: E501

        :return: The exclude100_availability of this WebsiteOverviewReport.  # noqa: E501
        :rtype: bool
        """
        return self._exclude100_availability

    @exclude100_availability.setter
    def exclude100_availability(self, exclude100_availability):
        """Sets the exclude100_availability of this WebsiteOverviewReport.

        Whether or not websites with 100% availability should be ignored  # noqa: E501

        :param exclude100_availability: The exclude100_availability of this WebsiteOverviewReport.  # noqa: E501
        :type: bool
        """

        self._exclude100_availability = exclude100_availability

    @property
    def display_type(self):
        """Gets the display_type of this WebsiteOverviewReport.  # noqa: E501

        1 | 2 1: Display overall locations 2: Display overall and individual locations  # noqa: E501

        :return: The display_type of this WebsiteOverviewReport.  # noqa: E501
        :rtype: int
        """
        return self._display_type

    @display_type.setter
    def display_type(self, display_type):
        """Sets the display_type of this WebsiteOverviewReport.

        1 | 2 1: Display overall locations 2: Display overall and individual locations  # noqa: E501

        :param display_type: The display_type of this WebsiteOverviewReport.  # noqa: E501
        :type: int
        """

        self._display_type = display_type

    @property
    def exclude_sdt(self):
        """Gets the exclude_sdt of this WebsiteOverviewReport.  # noqa: E501

        Whether or not SDTs periods should be considered for the website's availability  # noqa: E501

        :return: The exclude_sdt of this WebsiteOverviewReport.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_sdt

    @exclude_sdt.setter
    def exclude_sdt(self, exclude_sdt):
        """Sets the exclude_sdt of this WebsiteOverviewReport.

        Whether or not SDTs periods should be considered for the website's availability  # noqa: E501

        :param exclude_sdt: The exclude_sdt of this WebsiteOverviewReport.  # noqa: E501
        :type: bool
        """

        self._exclude_sdt = exclude_sdt

    @property
    def date_range(self):
        """Gets the date_range of this WebsiteOverviewReport.  # noqa: E501

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :return: The date_range of this WebsiteOverviewReport.  # noqa: E501
        :rtype: str
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this WebsiteOverviewReport.

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :param date_range: The date_range of this WebsiteOverviewReport.  # noqa: E501
        :type: str
        """

        self._date_range = date_range

    @property
    def items_type(self):
        """Gets the items_type of this WebsiteOverviewReport.  # noqa: E501

        The type of entities specified in the servicesVal field. Acceptable values are: website, group  # noqa: E501

        :return: The items_type of this WebsiteOverviewReport.  # noqa: E501
        :rtype: str
        """
        return self._items_type

    @items_type.setter
    def items_type(self, items_type):
        """Sets the items_type of this WebsiteOverviewReport.

        The type of entities specified in the servicesVal field. Acceptable values are: website, group  # noqa: E501

        :param items_type: The items_type of this WebsiteOverviewReport.  # noqa: E501
        :type: str
        """
        if items_type is None:
            raise ValueError("Invalid value for `items_type`, must not be `None`")  # noqa: E501

        self._items_type = items_type

    @property
    def items(self):
        """Gets the items of this WebsiteOverviewReport.  # noqa: E501

        The websites OR website groups (full path) selected for the report, where multiple entities are separated by commas  # noqa: E501

        :return: The items of this WebsiteOverviewReport.  # noqa: E501
        :rtype: str
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this WebsiteOverviewReport.

        The websites OR website groups (full path) selected for the report, where multiple entities are separated by commas  # noqa: E501

        :param items: The items of this WebsiteOverviewReport.  # noqa: E501
        :type: str
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebsiteOverviewReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebsiteOverviewReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
