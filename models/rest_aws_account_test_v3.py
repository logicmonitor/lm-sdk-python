# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RestAwsAccountTestV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_id': 'str',
        'account_id': 'str',
        'new_billing_bucket': 'str',
        'assumed_role_arn': 'str',
        'bucket_name_for_billing_files': 'str',
        'access_key': 'str',
        'checked_services': 'str',
        'group_id': 'int',
        'new_billing_path': 'str',
        'external_id': 'str'
    }

    attribute_map = {
        'access_id': 'accessId',
        'account_id': 'accountId',
        'new_billing_bucket': 'newBillingBucket',
        'assumed_role_arn': 'assumedRoleArn',
        'bucket_name_for_billing_files': 'bucketNameForBillingFiles',
        'access_key': 'accessKey',
        'checked_services': 'checkedServices',
        'group_id': 'groupId',
        'new_billing_path': 'newBillingPath',
        'external_id': 'externalId'
    }

    def __init__(self, access_id=None, account_id=None, new_billing_bucket=None, assumed_role_arn=None, bucket_name_for_billing_files=None, access_key=None, checked_services=None, group_id=None, new_billing_path=None, external_id=None):  # noqa: E501
        """RestAwsAccountTestV3 - a model defined in Swagger"""  # noqa: E501

        self._access_id = None
        self._account_id = None
        self._new_billing_bucket = None
        self._assumed_role_arn = None
        self._bucket_name_for_billing_files = None
        self._access_key = None
        self._checked_services = None
        self._group_id = None
        self._new_billing_path = None
        self._external_id = None
        self.discriminator = None

        if access_id is not None:
            self.access_id = access_id
        if account_id is not None:
            self.account_id = account_id
        if new_billing_bucket is not None:
            self.new_billing_bucket = new_billing_bucket
        if assumed_role_arn is not None:
            self.assumed_role_arn = assumed_role_arn
        if bucket_name_for_billing_files is not None:
            self.bucket_name_for_billing_files = bucket_name_for_billing_files
        if access_key is not None:
            self.access_key = access_key
        if checked_services is not None:
            self.checked_services = checked_services
        if group_id is not None:
            self.group_id = group_id
        if new_billing_path is not None:
            self.new_billing_path = new_billing_path
        if external_id is not None:
            self.external_id = external_id

    @property
    def access_id(self):
        """Gets the access_id of this RestAwsAccountTestV3.  # noqa: E501


        :return: The access_id of this RestAwsAccountTestV3.  # noqa: E501
        :rtype: str
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """Sets the access_id of this RestAwsAccountTestV3.


        :param access_id: The access_id of this RestAwsAccountTestV3.  # noqa: E501
        :type: str
        """

        self._access_id = access_id

    @property
    def account_id(self):
        """Gets the account_id of this RestAwsAccountTestV3.  # noqa: E501


        :return: The account_id of this RestAwsAccountTestV3.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RestAwsAccountTestV3.


        :param account_id: The account_id of this RestAwsAccountTestV3.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def new_billing_bucket(self):
        """Gets the new_billing_bucket of this RestAwsAccountTestV3.  # noqa: E501


        :return: The new_billing_bucket of this RestAwsAccountTestV3.  # noqa: E501
        :rtype: str
        """
        return self._new_billing_bucket

    @new_billing_bucket.setter
    def new_billing_bucket(self, new_billing_bucket):
        """Sets the new_billing_bucket of this RestAwsAccountTestV3.


        :param new_billing_bucket: The new_billing_bucket of this RestAwsAccountTestV3.  # noqa: E501
        :type: str
        """

        self._new_billing_bucket = new_billing_bucket

    @property
    def assumed_role_arn(self):
        """Gets the assumed_role_arn of this RestAwsAccountTestV3.  # noqa: E501


        :return: The assumed_role_arn of this RestAwsAccountTestV3.  # noqa: E501
        :rtype: str
        """
        return self._assumed_role_arn

    @assumed_role_arn.setter
    def assumed_role_arn(self, assumed_role_arn):
        """Sets the assumed_role_arn of this RestAwsAccountTestV3.


        :param assumed_role_arn: The assumed_role_arn of this RestAwsAccountTestV3.  # noqa: E501
        :type: str
        """

        self._assumed_role_arn = assumed_role_arn

    @property
    def bucket_name_for_billing_files(self):
        """Gets the bucket_name_for_billing_files of this RestAwsAccountTestV3.  # noqa: E501


        :return: The bucket_name_for_billing_files of this RestAwsAccountTestV3.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name_for_billing_files

    @bucket_name_for_billing_files.setter
    def bucket_name_for_billing_files(self, bucket_name_for_billing_files):
        """Sets the bucket_name_for_billing_files of this RestAwsAccountTestV3.


        :param bucket_name_for_billing_files: The bucket_name_for_billing_files of this RestAwsAccountTestV3.  # noqa: E501
        :type: str
        """

        self._bucket_name_for_billing_files = bucket_name_for_billing_files

    @property
    def access_key(self):
        """Gets the access_key of this RestAwsAccountTestV3.  # noqa: E501


        :return: The access_key of this RestAwsAccountTestV3.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this RestAwsAccountTestV3.


        :param access_key: The access_key of this RestAwsAccountTestV3.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def checked_services(self):
        """Gets the checked_services of this RestAwsAccountTestV3.  # noqa: E501


        :return: The checked_services of this RestAwsAccountTestV3.  # noqa: E501
        :rtype: str
        """
        return self._checked_services

    @checked_services.setter
    def checked_services(self, checked_services):
        """Sets the checked_services of this RestAwsAccountTestV3.


        :param checked_services: The checked_services of this RestAwsAccountTestV3.  # noqa: E501
        :type: str
        """

        self._checked_services = checked_services

    @property
    def group_id(self):
        """Gets the group_id of this RestAwsAccountTestV3.  # noqa: E501


        :return: The group_id of this RestAwsAccountTestV3.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this RestAwsAccountTestV3.


        :param group_id: The group_id of this RestAwsAccountTestV3.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def new_billing_path(self):
        """Gets the new_billing_path of this RestAwsAccountTestV3.  # noqa: E501


        :return: The new_billing_path of this RestAwsAccountTestV3.  # noqa: E501
        :rtype: str
        """
        return self._new_billing_path

    @new_billing_path.setter
    def new_billing_path(self, new_billing_path):
        """Sets the new_billing_path of this RestAwsAccountTestV3.


        :param new_billing_path: The new_billing_path of this RestAwsAccountTestV3.  # noqa: E501
        :type: str
        """

        self._new_billing_path = new_billing_path

    @property
    def external_id(self):
        """Gets the external_id of this RestAwsAccountTestV3.  # noqa: E501


        :return: The external_id of this RestAwsAccountTestV3.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this RestAwsAccountTestV3.


        :param external_id: The external_id of this RestAwsAccountTestV3.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestAwsAccountTestV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestAwsAccountTestV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
