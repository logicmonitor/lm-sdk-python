# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.netscan import Netscan  # noqa: F401,E501

class NMapNetscan(Netscan):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_network_and_broadcast': 'bool',
        'subnet': 'str',
        'ddr': 'NMapDDR',
        'credentials': 'RestNMapNetscanPolicyCredential',
        'exclude': 'str',
        'ports': 'RestNetscanPorts'
    }
    if hasattr(Netscan, "swagger_types"):
        swagger_types.update(Netscan.swagger_types)

    attribute_map = {
        'include_network_and_broadcast': 'includeNetworkAndBroadcast',
        'subnet': 'subnet',
        'ddr': 'ddr',
        'credentials': 'credentials',
        'exclude': 'exclude',
        'ports': 'ports'
    }
    if hasattr(Netscan, "attribute_map"):
        attribute_map.update(Netscan.attribute_map)

    def __init__(self, include_network_and_broadcast=None, subnet=None, ddr=None, credentials=None, exclude=None, ports=None, *args, **kwargs):  # noqa: E501
        """NMapNetscan - a model defined in Swagger"""  # noqa: E501
        self._include_network_and_broadcast = None
        self._subnet = None
        self._ddr = None
        self._credentials = None
        self._exclude = None
        self._ports = None
        self.discriminator = None
        self.include_network_and_broadcast = include_network_and_broadcast
        self.subnet = subnet
        if ddr is not None:
            self.ddr = ddr
        if credentials is not None:
            self.credentials = credentials
        if exclude is not None:
            self.exclude = exclude
        if ports is not None:
            self.ports = ports
        Netscan.__init__(self, *args, **kwargs)

    @property
    def include_network_and_broadcast(self):
        """Gets the include_network_and_broadcast of this NMapNetscan.  # noqa: E501

        Include Network & Broadcast Address for CIDR based netscan  # noqa: E501

        :return: The include_network_and_broadcast of this NMapNetscan.  # noqa: E501
        :rtype: bool
        """
        return self._include_network_and_broadcast

    @include_network_and_broadcast.setter
    def include_network_and_broadcast(self, include_network_and_broadcast):
        """Sets the include_network_and_broadcast of this NMapNetscan.

        Include Network & Broadcast Address for CIDR based netscan  # noqa: E501

        :param include_network_and_broadcast: The include_network_and_broadcast of this NMapNetscan.  # noqa: E501
        :type: bool
        """
        if include_network_and_broadcast is None:
            raise ValueError("Invalid value for `include_network_and_broadcast`, must not be `None`")  # noqa: E501

        self._include_network_and_broadcast = include_network_and_broadcast

    @property
    def subnet(self):
        """Gets the subnet of this NMapNetscan.  # noqa: E501

        The subnet to scan for nmap scans  # noqa: E501

        :return: The subnet of this NMapNetscan.  # noqa: E501
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this NMapNetscan.

        The subnet to scan for nmap scans  # noqa: E501

        :param subnet: The subnet of this NMapNetscan.  # noqa: E501
        :type: str
        """
        if subnet is None:
            raise ValueError("Invalid value for `subnet`, must not be `None`")  # noqa: E501

        self._subnet = subnet

    @property
    def ddr(self):
        """Gets the ddr of this NMapNetscan.  # noqa: E501


        :return: The ddr of this NMapNetscan.  # noqa: E501
        :rtype: NMapDDR
        """
        return self._ddr

    @ddr.setter
    def ddr(self, ddr):
        """Sets the ddr of this NMapNetscan.


        :param ddr: The ddr of this NMapNetscan.  # noqa: E501
        :type: NMapDDR
        """

        self._ddr = ddr

    @property
    def credentials(self):
        """Gets the credentials of this NMapNetscan.  # noqa: E501


        :return: The credentials of this NMapNetscan.  # noqa: E501
        :rtype: RestNMapNetscanPolicyCredential
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this NMapNetscan.


        :param credentials: The credentials of this NMapNetscan.  # noqa: E501
        :type: RestNMapNetscanPolicyCredential
        """

        self._credentials = credentials

    @property
    def exclude(self):
        """Gets the exclude of this NMapNetscan.  # noqa: E501

        The subnet to exclude from scanning from nmap scans  # noqa: E501

        :return: The exclude of this NMapNetscan.  # noqa: E501
        :rtype: str
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this NMapNetscan.

        The subnet to exclude from scanning from nmap scans  # noqa: E501

        :param exclude: The exclude of this NMapNetscan.  # noqa: E501
        :type: str
        """

        self._exclude = exclude

    @property
    def ports(self):
        """Gets the ports of this NMapNetscan.  # noqa: E501


        :return: The ports of this NMapNetscan.  # noqa: E501
        :rtype: RestNetscanPorts
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this NMapNetscan.


        :param ports: The ports of this NMapNetscan.  # noqa: E501
        :type: RestNetscanPorts
        """

        self._ports = ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NMapNetscan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NMapNetscan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
