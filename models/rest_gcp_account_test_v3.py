# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RestGcpAccountTestV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_account_key': 'str',
        'checked_services': 'str',
        'group_id': 'int',
        'project_id': 'str'
    }

    attribute_map = {
        'service_account_key': 'serviceAccountKey',
        'checked_services': 'checkedServices',
        'group_id': 'groupId',
        'project_id': 'projectId'
    }

    def __init__(self, service_account_key=None, checked_services=None, group_id=None, project_id=None):  # noqa: E501
        """RestGcpAccountTestV3 - a model defined in Swagger"""  # noqa: E501

        self._service_account_key = None
        self._checked_services = None
        self._group_id = None
        self._project_id = None
        self.discriminator = None

        if service_account_key is not None:
            self.service_account_key = service_account_key
        if checked_services is not None:
            self.checked_services = checked_services
        if group_id is not None:
            self.group_id = group_id
        if project_id is not None:
            self.project_id = project_id

    @property
    def service_account_key(self):
        """Gets the service_account_key of this RestGcpAccountTestV3.  # noqa: E501


        :return: The service_account_key of this RestGcpAccountTestV3.  # noqa: E501
        :rtype: str
        """
        return self._service_account_key

    @service_account_key.setter
    def service_account_key(self, service_account_key):
        """Sets the service_account_key of this RestGcpAccountTestV3.


        :param service_account_key: The service_account_key of this RestGcpAccountTestV3.  # noqa: E501
        :type: str
        """

        self._service_account_key = service_account_key

    @property
    def checked_services(self):
        """Gets the checked_services of this RestGcpAccountTestV3.  # noqa: E501


        :return: The checked_services of this RestGcpAccountTestV3.  # noqa: E501
        :rtype: str
        """
        return self._checked_services

    @checked_services.setter
    def checked_services(self, checked_services):
        """Sets the checked_services of this RestGcpAccountTestV3.


        :param checked_services: The checked_services of this RestGcpAccountTestV3.  # noqa: E501
        :type: str
        """

        self._checked_services = checked_services

    @property
    def group_id(self):
        """Gets the group_id of this RestGcpAccountTestV3.  # noqa: E501


        :return: The group_id of this RestGcpAccountTestV3.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this RestGcpAccountTestV3.


        :param group_id: The group_id of this RestGcpAccountTestV3.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def project_id(self):
        """Gets the project_id of this RestGcpAccountTestV3.  # noqa: E501


        :return: The project_id of this RestGcpAccountTestV3.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this RestGcpAccountTestV3.


        :param project_id: The project_id of this RestGcpAccountTestV3.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestGcpAccountTestV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestGcpAccountTestV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
