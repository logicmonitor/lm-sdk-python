# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from logicmonitor_sdk.models.auto_discovery_configuration import AutoDiscoveryConfiguration  # noqa: F401,E501
from logicmonitor_sdk.models.collector_attribute import CollectorAttribute  # noqa: F401,E501
from logicmonitor_sdk.models.config_check import ConfigCheck  # noqa: F401,E501
from logicmonitor_sdk.models.integration_metadata import IntegrationMetadata  # noqa: F401,E501


class ConfigSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collector_attribute': 'CollectorAttribute',
        'auto_discovery_config': 'AutoDiscoveryConfiguration',
        'display_name': 'str',
        'config_checks': 'list[ConfigCheck]',
        'description': 'str',
        'applies_to': 'str',
        'enable_auto_discovery': 'bool',
        'technology': 'str',
        'version': 'int',
        'lineage_id': 'str',
        'tags': 'str',
        'audit_version': 'int',
        'collect_method': 'str',
        'has_multi_instances': 'bool',
        'installation_metadata': 'IntegrationMetadata',
        'collect_interval': 'int',
        'checksum': 'str',
        'name': 'str',
        'timestamp_format': 'str',
        'id': 'int',
        'file_format': 'str',
        'group': 'str'
    }

    attribute_map = {
        'collector_attribute': 'collectorAttribute',
        'auto_discovery_config': 'autoDiscoveryConfig',
        'display_name': 'displayName',
        'config_checks': 'configChecks',
        'description': 'description',
        'applies_to': 'appliesTo',
        'enable_auto_discovery': 'enableAutoDiscovery',
        'technology': 'technology',
        'version': 'version',
        'lineage_id': 'lineageId',
        'tags': 'tags',
        'audit_version': 'auditVersion',
        'collect_method': 'collectMethod',
        'has_multi_instances': 'hasMultiInstances',
        'installation_metadata': 'installationMetadata',
        'collect_interval': 'collectInterval',
        'checksum': 'checksum',
        'name': 'name',
        'timestamp_format': 'timestampFormat',
        'id': 'id',
        'file_format': 'fileFormat',
        'group': 'group'
    }

    def __init__(self, collector_attribute=None, auto_discovery_config=None, display_name=None, config_checks=None, description=None, applies_to=None, enable_auto_discovery=None, technology=None, version=None, lineage_id=None, tags=None, audit_version=None, collect_method=None, has_multi_instances=None, installation_metadata=None, collect_interval=None, checksum=None, name=None, timestamp_format=None, id=None, file_format=None, group=None):  # noqa: E501
        """ConfigSource - a model defined in Swagger"""  # noqa: E501

        self._collector_attribute = None
        self._auto_discovery_config = None
        self._display_name = None
        self._config_checks = None
        self._description = None
        self._applies_to = None
        self._enable_auto_discovery = None
        self._technology = None
        self._version = None
        self._lineage_id = None
        self._tags = None
        self._audit_version = None
        self._collect_method = None
        self._has_multi_instances = None
        self._installation_metadata = None
        self._collect_interval = None
        self._checksum = None
        self._name = None
        self._timestamp_format = None
        self._id = None
        self._file_format = None
        self._group = None
        self.discriminator = None

        if collector_attribute is not None:
            self.collector_attribute = collector_attribute
        if auto_discovery_config is not None:
            self.auto_discovery_config = auto_discovery_config
        if display_name is not None:
            self.display_name = display_name
        if config_checks is not None:
            self.config_checks = config_checks
        if description is not None:
            self.description = description
        if applies_to is not None:
            self.applies_to = applies_to
        if enable_auto_discovery is not None:
            self.enable_auto_discovery = enable_auto_discovery
        if technology is not None:
            self.technology = technology
        if version is not None:
            self.version = version
        if lineage_id is not None:
            self.lineage_id = lineage_id
        if tags is not None:
            self.tags = tags
        if audit_version is not None:
            self.audit_version = audit_version
        if collect_method is not None:
            self.collect_method = collect_method
        if has_multi_instances is not None:
            self.has_multi_instances = has_multi_instances
        if installation_metadata is not None:
            self.installation_metadata = installation_metadata
        if collect_interval is not None:
            self.collect_interval = collect_interval
        if checksum is not None:
            self.checksum = checksum
        if name is not None:
            self.name = name
        if timestamp_format is not None:
            self.timestamp_format = timestamp_format
        self.id = id
        if file_format is not None:
            self.file_format = file_format
        if group is not None:
            self.group = group

    @property
    def collector_attribute(self):
        """Gets the collector_attribute of this ConfigSource.  # noqa: E501

        Collector attribute  # noqa: E501

        :return: The collector_attribute of this ConfigSource.  # noqa: E501
        :rtype: CollectorAttribute
        """
        return self._collector_attribute

    @collector_attribute.setter
    def collector_attribute(self, collector_attribute):
        """Sets the collector_attribute of this ConfigSource.

        Collector attribute  # noqa: E501

        :param collector_attribute: The collector_attribute of this ConfigSource.  # noqa: E501
        :type: CollectorAttribute
        """

        self._collector_attribute = collector_attribute

    @property
    def auto_discovery_config(self):
        """Gets the auto_discovery_config of this ConfigSource.  # noqa: E501

        Auto discovery configuration  # noqa: E501

        :return: The auto_discovery_config of this ConfigSource.  # noqa: E501
        :rtype: AutoDiscoveryConfiguration
        """
        return self._auto_discovery_config

    @auto_discovery_config.setter
    def auto_discovery_config(self, auto_discovery_config):
        """Sets the auto_discovery_config of this ConfigSource.

        Auto discovery configuration  # noqa: E501

        :param auto_discovery_config: The auto_discovery_config of this ConfigSource.  # noqa: E501
        :type: AutoDiscoveryConfiguration
        """

        self._auto_discovery_config = auto_discovery_config

    @property
    def display_name(self):
        """Gets the display_name of this ConfigSource.  # noqa: E501

        The ConfigSource display name  # noqa: E501

        :return: The display_name of this ConfigSource.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConfigSource.

        The ConfigSource display name  # noqa: E501

        :param display_name: The display_name of this ConfigSource.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def config_checks(self):
        """Gets the config_checks of this ConfigSource.  # noqa: E501

        The List of ConfigChecks  # noqa: E501

        :return: The config_checks of this ConfigSource.  # noqa: E501
        :rtype: list[ConfigCheck]
        """
        return self._config_checks

    @config_checks.setter
    def config_checks(self, config_checks):
        """Sets the config_checks of this ConfigSource.

        The List of ConfigChecks  # noqa: E501

        :param config_checks: The config_checks of this ConfigSource.  # noqa: E501
        :type: list[ConfigCheck]
        """

        self._config_checks = config_checks

    @property
    def description(self):
        """Gets the description of this ConfigSource.  # noqa: E501

        The description for the LMModule  # noqa: E501

        :return: The description of this ConfigSource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigSource.

        The description for the LMModule  # noqa: E501

        :param description: The description of this ConfigSource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def applies_to(self):
        """Gets the applies_to of this ConfigSource.  # noqa: E501

        The Applies To for the LMModule  # noqa: E501

        :return: The applies_to of this ConfigSource.  # noqa: E501
        :rtype: str
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """Sets the applies_to of this ConfigSource.

        The Applies To for the LMModule  # noqa: E501

        :param applies_to: The applies_to of this ConfigSource.  # noqa: E501
        :type: str
        """

        self._applies_to = applies_to

    @property
    def enable_auto_discovery(self):
        """Gets the enable_auto_discovery of this ConfigSource.  # noqa: E501

        Enable active discovery if ConfigSource has multiple instances. true|false  # noqa: E501

        :return: The enable_auto_discovery of this ConfigSource.  # noqa: E501
        :rtype: bool
        """
        return self._enable_auto_discovery

    @enable_auto_discovery.setter
    def enable_auto_discovery(self, enable_auto_discovery):
        """Sets the enable_auto_discovery of this ConfigSource.

        Enable active discovery if ConfigSource has multiple instances. true|false  # noqa: E501

        :param enable_auto_discovery: The enable_auto_discovery of this ConfigSource.  # noqa: E501
        :type: bool
        """

        self._enable_auto_discovery = enable_auto_discovery

    @property
    def technology(self):
        """Gets the technology of this ConfigSource.  # noqa: E501

        The Technical Notes for the LMModule  # noqa: E501

        :return: The technology of this ConfigSource.  # noqa: E501
        :rtype: str
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """Sets the technology of this ConfigSource.

        The Technical Notes for the LMModule  # noqa: E501

        :param technology: The technology of this ConfigSource.  # noqa: E501
        :type: str
        """

        self._technology = technology

    @property
    def version(self):
        """Gets the version of this ConfigSource.  # noqa: E501

        The ConfigSource version  # noqa: E501

        :return: The version of this ConfigSource.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConfigSource.

        The ConfigSource version  # noqa: E501

        :param version: The version of this ConfigSource.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def lineage_id(self):
        """Gets the lineage_id of this ConfigSource.  # noqa: E501

        The lineageId the LMModule belongs to  # noqa: E501

        :return: The lineage_id of this ConfigSource.  # noqa: E501
        :rtype: str
        """
        return self._lineage_id

    @lineage_id.setter
    def lineage_id(self, lineage_id):
        """Sets the lineage_id of this ConfigSource.

        The lineageId the LMModule belongs to  # noqa: E501

        :param lineage_id: The lineage_id of this ConfigSource.  # noqa: E501
        :type: str
        """

        self._lineage_id = lineage_id

    @property
    def tags(self):
        """Gets the tags of this ConfigSource.  # noqa: E501

        The Tags for the LMModule  # noqa: E501

        :return: The tags of this ConfigSource.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ConfigSource.

        The Tags for the LMModule  # noqa: E501

        :param tags: The tags of this ConfigSource.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def audit_version(self):
        """Gets the audit_version of this ConfigSource.  # noqa: E501

        The ConfigSource audit version  # noqa: E501

        :return: The audit_version of this ConfigSource.  # noqa: E501
        :rtype: int
        """
        return self._audit_version

    @audit_version.setter
    def audit_version(self, audit_version):
        """Sets the audit_version of this ConfigSource.

        The ConfigSource audit version  # noqa: E501

        :param audit_version: The audit_version of this ConfigSource.  # noqa: E501
        :type: int
        """

        self._audit_version = audit_version

    @property
    def collect_method(self):
        """Gets the collect_method of this ConfigSource.  # noqa: E501

        The method to collect data  # noqa: E501

        :return: The collect_method of this ConfigSource.  # noqa: E501
        :rtype: str
        """
        return self._collect_method

    @collect_method.setter
    def collect_method(self, collect_method):
        """Sets the collect_method of this ConfigSource.

        The method to collect data  # noqa: E501

        :param collect_method: The collect_method of this ConfigSource.  # noqa: E501
        :type: str
        """

        self._collect_method = collect_method

    @property
    def has_multi_instances(self):
        """Gets the has_multi_instances of this ConfigSource.  # noqa: E501

        Whether the ConfigSource has multiple instances. true|false  # noqa: E501

        :return: The has_multi_instances of this ConfigSource.  # noqa: E501
        :rtype: bool
        """
        return self._has_multi_instances

    @has_multi_instances.setter
    def has_multi_instances(self, has_multi_instances):
        """Sets the has_multi_instances of this ConfigSource.

        Whether the ConfigSource has multiple instances. true|false  # noqa: E501

        :param has_multi_instances: The has_multi_instances of this ConfigSource.  # noqa: E501
        :type: bool
        """

        self._has_multi_instances = has_multi_instances

    @property
    def installation_metadata(self):
        """Gets the installation_metadata of this ConfigSource.  # noqa: E501

        The local module's IntegrationMetadata, readable for troubleshooting purposes  # noqa: E501

        :return: The installation_metadata of this ConfigSource.  # noqa: E501
        :rtype: IntegrationMetadata
        """
        return self._installation_metadata

    @installation_metadata.setter
    def installation_metadata(self, installation_metadata):
        """Sets the installation_metadata of this ConfigSource.

        The local module's IntegrationMetadata, readable for troubleshooting purposes  # noqa: E501

        :param installation_metadata: The installation_metadata of this ConfigSource.  # noqa: E501
        :type: IntegrationMetadata
        """

        self._installation_metadata = installation_metadata

    @property
    def collect_interval(self):
        """Gets the collect_interval of this ConfigSource.  # noqa: E501

        The ConfigSource data collect interval  # noqa: E501

        :return: The collect_interval of this ConfigSource.  # noqa: E501
        :rtype: int
        """
        return self._collect_interval

    @collect_interval.setter
    def collect_interval(self, collect_interval):
        """Sets the collect_interval of this ConfigSource.

        The ConfigSource data collect interval  # noqa: E501

        :param collect_interval: The collect_interval of this ConfigSource.  # noqa: E501
        :type: int
        """

        self._collect_interval = collect_interval

    @property
    def checksum(self):
        """Gets the checksum of this ConfigSource.  # noqa: E501

        The metadata checksum for the LMModule content  # noqa: E501

        :return: The checksum of this ConfigSource.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this ConfigSource.

        The metadata checksum for the LMModule content  # noqa: E501

        :param checksum: The checksum of this ConfigSource.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def name(self):
        """Gets the name of this ConfigSource.  # noqa: E501

        The config source name  # noqa: E501

        :return: The name of this ConfigSource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigSource.

        The config source name  # noqa: E501

        :param name: The name of this ConfigSource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def timestamp_format(self):
        """Gets the timestamp_format of this ConfigSource.  # noqa: E501

        Timestamp format. ex. yyyy-MM-dd hh:mm:ss  # noqa: E501

        :return: The timestamp_format of this ConfigSource.  # noqa: E501
        :rtype: str
        """
        return self._timestamp_format

    @timestamp_format.setter
    def timestamp_format(self, timestamp_format):
        """Sets the timestamp_format of this ConfigSource.

        Timestamp format. ex. yyyy-MM-dd hh:mm:ss  # noqa: E501

        :param timestamp_format: The timestamp_format of this ConfigSource.  # noqa: E501
        :type: str
        """

        self._timestamp_format = timestamp_format

    @property
    def id(self):
        """Gets the id of this ConfigSource.  # noqa: E501

        The ID of the LMModule  # noqa: E501

        :return: The id of this ConfigSource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfigSource.

        The ID of the LMModule  # noqa: E501

        :param id: The id of this ConfigSource.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def file_format(self):
        """Gets the file_format of this ConfigSource.  # noqa: E501

        Configuration file format. arbitrary|unix|java-properties|JSON|XML  # noqa: E501

        :return: The file_format of this ConfigSource.  # noqa: E501
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this ConfigSource.

        Configuration file format. arbitrary|unix|java-properties|JSON|XML  # noqa: E501

        :param file_format: The file_format of this ConfigSource.  # noqa: E501
        :type: str
        """

        self._file_format = file_format

    @property
    def group(self):
        """Gets the group of this ConfigSource.  # noqa: E501

        The group the LMModule is in  # noqa: E501

        :return: The group of this ConfigSource.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ConfigSource.

        The group the LMModule is in  # noqa: E501

        :param group: The group of this ConfigSource.  # noqa: E501
        :type: str
        """

        self._group = group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
