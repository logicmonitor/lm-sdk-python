# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_for_no_data': 'int',
        'max_value': 'str',
        'data_type': 'int',
        'post_processor_method': 'str',
        'post_processor_param': 'str',
        'max_digits': 'int',
        'raw_data_field_name': 'str',
        'description': 'str',
        'alert_clear_transition_interval': 'int',
        'user_param3': 'str',
        'user_param2': 'str',
        'type': 'int',
        'alert_expr_note': 'str',
        'data_source_id': 'int',
        'min_value': 'str',
        'alert_body': 'str',
        'user_param1': 'str',
        'name': 'str',
        'alert_subject': 'str',
        'id': 'int',
        'alert_transition_interval': 'int',
        'alert_expr': 'str'
    }

    attribute_map = {
        'alert_for_no_data': 'alertForNoData',
        'max_value': 'maxValue',
        'data_type': 'dataType',
        'post_processor_method': 'postProcessorMethod',
        'post_processor_param': 'postProcessorParam',
        'max_digits': 'maxDigits',
        'raw_data_field_name': 'rawDataFieldName',
        'description': 'description',
        'alert_clear_transition_interval': 'alertClearTransitionInterval',
        'user_param3': 'userParam3',
        'user_param2': 'userParam2',
        'type': 'type',
        'alert_expr_note': 'alertExprNote',
        'data_source_id': 'dataSourceId',
        'min_value': 'minValue',
        'alert_body': 'alertBody',
        'user_param1': 'userParam1',
        'name': 'name',
        'alert_subject': 'alertSubject',
        'id': 'id',
        'alert_transition_interval': 'alertTransitionInterval',
        'alert_expr': 'alertExpr'
    }

    def __init__(self, alert_for_no_data=None, max_value=None, data_type=None, post_processor_method=None, post_processor_param=None, max_digits=None, raw_data_field_name=None, description=None, alert_clear_transition_interval=None, user_param3=None, user_param2=None, type=None, alert_expr_note=None, data_source_id=None, min_value=None, alert_body=None, user_param1=None, name=None, alert_subject=None, id=None, alert_transition_interval=None, alert_expr=None):  # noqa: E501
        """DataPoint - a model defined in Swagger"""  # noqa: E501

        self._alert_for_no_data = None
        self._max_value = None
        self._data_type = None
        self._post_processor_method = None
        self._post_processor_param = None
        self._max_digits = None
        self._raw_data_field_name = None
        self._description = None
        self._alert_clear_transition_interval = None
        self._user_param3 = None
        self._user_param2 = None
        self._type = None
        self._alert_expr_note = None
        self._data_source_id = None
        self._min_value = None
        self._alert_body = None
        self._user_param1 = None
        self._name = None
        self._alert_subject = None
        self._id = None
        self._alert_transition_interval = None
        self._alert_expr = None
        self.discriminator = None

        if alert_for_no_data is not None:
            self.alert_for_no_data = alert_for_no_data
        if max_value is not None:
            self.max_value = max_value
        if data_type is not None:
            self.data_type = data_type
        if post_processor_method is not None:
            self.post_processor_method = post_processor_method
        if post_processor_param is not None:
            self.post_processor_param = post_processor_param
        if max_digits is not None:
            self.max_digits = max_digits
        if raw_data_field_name is not None:
            self.raw_data_field_name = raw_data_field_name
        if description is not None:
            self.description = description
        if alert_clear_transition_interval is not None:
            self.alert_clear_transition_interval = alert_clear_transition_interval
        if user_param3 is not None:
            self.user_param3 = user_param3
        if user_param2 is not None:
            self.user_param2 = user_param2
        if type is not None:
            self.type = type
        if alert_expr_note is not None:
            self.alert_expr_note = alert_expr_note
        if data_source_id is not None:
            self.data_source_id = data_source_id
        if min_value is not None:
            self.min_value = min_value
        if alert_body is not None:
            self.alert_body = alert_body
        if user_param1 is not None:
            self.user_param1 = user_param1
        self.name = name
        if alert_subject is not None:
            self.alert_subject = alert_subject
        if id is not None:
            self.id = id
        if alert_transition_interval is not None:
            self.alert_transition_interval = alert_transition_interval
        if alert_expr is not None:
            self.alert_expr = alert_expr

    @property
    def alert_for_no_data(self):
        """Gets the alert_for_no_data of this DataPoint.  # noqa: E501


        :return: The alert_for_no_data of this DataPoint.  # noqa: E501
        :rtype: int
        """
        return self._alert_for_no_data

    @alert_for_no_data.setter
    def alert_for_no_data(self, alert_for_no_data):
        """Sets the alert_for_no_data of this DataPoint.


        :param alert_for_no_data: The alert_for_no_data of this DataPoint.  # noqa: E501
        :type: int
        """

        self._alert_for_no_data = alert_for_no_data

    @property
    def max_value(self):
        """Gets the max_value of this DataPoint.  # noqa: E501


        :return: The max_value of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this DataPoint.


        :param max_value: The max_value of this DataPoint.  # noqa: E501
        :type: str
        """

        self._max_value = max_value

    @property
    def data_type(self):
        """Gets the data_type of this DataPoint.  # noqa: E501


        :return: The data_type of this DataPoint.  # noqa: E501
        :rtype: int
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DataPoint.


        :param data_type: The data_type of this DataPoint.  # noqa: E501
        :type: int
        """

        self._data_type = data_type

    @property
    def post_processor_method(self):
        """Gets the post_processor_method of this DataPoint.  # noqa: E501


        :return: The post_processor_method of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._post_processor_method

    @post_processor_method.setter
    def post_processor_method(self, post_processor_method):
        """Sets the post_processor_method of this DataPoint.


        :param post_processor_method: The post_processor_method of this DataPoint.  # noqa: E501
        :type: str
        """

        self._post_processor_method = post_processor_method

    @property
    def post_processor_param(self):
        """Gets the post_processor_param of this DataPoint.  # noqa: E501


        :return: The post_processor_param of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._post_processor_param

    @post_processor_param.setter
    def post_processor_param(self, post_processor_param):
        """Sets the post_processor_param of this DataPoint.


        :param post_processor_param: The post_processor_param of this DataPoint.  # noqa: E501
        :type: str
        """

        self._post_processor_param = post_processor_param

    @property
    def max_digits(self):
        """Gets the max_digits of this DataPoint.  # noqa: E501


        :return: The max_digits of this DataPoint.  # noqa: E501
        :rtype: int
        """
        return self._max_digits

    @max_digits.setter
    def max_digits(self, max_digits):
        """Sets the max_digits of this DataPoint.


        :param max_digits: The max_digits of this DataPoint.  # noqa: E501
        :type: int
        """

        self._max_digits = max_digits

    @property
    def raw_data_field_name(self):
        """Gets the raw_data_field_name of this DataPoint.  # noqa: E501


        :return: The raw_data_field_name of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._raw_data_field_name

    @raw_data_field_name.setter
    def raw_data_field_name(self, raw_data_field_name):
        """Sets the raw_data_field_name of this DataPoint.


        :param raw_data_field_name: The raw_data_field_name of this DataPoint.  # noqa: E501
        :type: str
        """

        self._raw_data_field_name = raw_data_field_name

    @property
    def description(self):
        """Gets the description of this DataPoint.  # noqa: E501


        :return: The description of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataPoint.


        :param description: The description of this DataPoint.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def alert_clear_transition_interval(self):
        """Gets the alert_clear_transition_interval of this DataPoint.  # noqa: E501


        :return: The alert_clear_transition_interval of this DataPoint.  # noqa: E501
        :rtype: int
        """
        return self._alert_clear_transition_interval

    @alert_clear_transition_interval.setter
    def alert_clear_transition_interval(self, alert_clear_transition_interval):
        """Sets the alert_clear_transition_interval of this DataPoint.


        :param alert_clear_transition_interval: The alert_clear_transition_interval of this DataPoint.  # noqa: E501
        :type: int
        """

        self._alert_clear_transition_interval = alert_clear_transition_interval

    @property
    def user_param3(self):
        """Gets the user_param3 of this DataPoint.  # noqa: E501


        :return: The user_param3 of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._user_param3

    @user_param3.setter
    def user_param3(self, user_param3):
        """Sets the user_param3 of this DataPoint.


        :param user_param3: The user_param3 of this DataPoint.  # noqa: E501
        :type: str
        """

        self._user_param3 = user_param3

    @property
    def user_param2(self):
        """Gets the user_param2 of this DataPoint.  # noqa: E501


        :return: The user_param2 of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._user_param2

    @user_param2.setter
    def user_param2(self, user_param2):
        """Sets the user_param2 of this DataPoint.


        :param user_param2: The user_param2 of this DataPoint.  # noqa: E501
        :type: str
        """

        self._user_param2 = user_param2

    @property
    def type(self):
        """Gets the type of this DataPoint.  # noqa: E501


        :return: The type of this DataPoint.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataPoint.


        :param type: The type of this DataPoint.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def alert_expr_note(self):
        """Gets the alert_expr_note of this DataPoint.  # noqa: E501


        :return: The alert_expr_note of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._alert_expr_note

    @alert_expr_note.setter
    def alert_expr_note(self, alert_expr_note):
        """Sets the alert_expr_note of this DataPoint.


        :param alert_expr_note: The alert_expr_note of this DataPoint.  # noqa: E501
        :type: str
        """

        self._alert_expr_note = alert_expr_note

    @property
    def data_source_id(self):
        """Gets the data_source_id of this DataPoint.  # noqa: E501


        :return: The data_source_id of this DataPoint.  # noqa: E501
        :rtype: int
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this DataPoint.


        :param data_source_id: The data_source_id of this DataPoint.  # noqa: E501
        :type: int
        """

        self._data_source_id = data_source_id

    @property
    def min_value(self):
        """Gets the min_value of this DataPoint.  # noqa: E501


        :return: The min_value of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this DataPoint.


        :param min_value: The min_value of this DataPoint.  # noqa: E501
        :type: str
        """

        self._min_value = min_value

    @property
    def alert_body(self):
        """Gets the alert_body of this DataPoint.  # noqa: E501


        :return: The alert_body of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._alert_body

    @alert_body.setter
    def alert_body(self, alert_body):
        """Sets the alert_body of this DataPoint.


        :param alert_body: The alert_body of this DataPoint.  # noqa: E501
        :type: str
        """

        self._alert_body = alert_body

    @property
    def user_param1(self):
        """Gets the user_param1 of this DataPoint.  # noqa: E501


        :return: The user_param1 of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._user_param1

    @user_param1.setter
    def user_param1(self, user_param1):
        """Sets the user_param1 of this DataPoint.


        :param user_param1: The user_param1 of this DataPoint.  # noqa: E501
        :type: str
        """

        self._user_param1 = user_param1

    @property
    def name(self):
        """Gets the name of this DataPoint.  # noqa: E501


        :return: The name of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataPoint.


        :param name: The name of this DataPoint.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def alert_subject(self):
        """Gets the alert_subject of this DataPoint.  # noqa: E501


        :return: The alert_subject of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._alert_subject

    @alert_subject.setter
    def alert_subject(self, alert_subject):
        """Sets the alert_subject of this DataPoint.


        :param alert_subject: The alert_subject of this DataPoint.  # noqa: E501
        :type: str
        """

        self._alert_subject = alert_subject

    @property
    def id(self):
        """Gets the id of this DataPoint.  # noqa: E501


        :return: The id of this DataPoint.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataPoint.


        :param id: The id of this DataPoint.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def alert_transition_interval(self):
        """Gets the alert_transition_interval of this DataPoint.  # noqa: E501


        :return: The alert_transition_interval of this DataPoint.  # noqa: E501
        :rtype: int
        """
        return self._alert_transition_interval

    @alert_transition_interval.setter
    def alert_transition_interval(self, alert_transition_interval):
        """Sets the alert_transition_interval of this DataPoint.


        :param alert_transition_interval: The alert_transition_interval of this DataPoint.  # noqa: E501
        :type: int
        """

        self._alert_transition_interval = alert_transition_interval

    @property
    def alert_expr(self):
        """Gets the alert_expr of this DataPoint.  # noqa: E501


        :return: The alert_expr of this DataPoint.  # noqa: E501
        :rtype: str
        """
        return self._alert_expr

    @alert_expr.setter
    def alert_expr(self, alert_expr):
        """Sets the alert_expr of this DataPoint.


        :param alert_expr: The alert_expr of this DataPoint.  # noqa: E501
        :type: str
        """

        self._alert_expr = alert_expr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
