# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InheritanceProp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fullpath': 'str',
        'id': 'int',
        'type': 'str',
        'value': 'str'
    }

    attribute_map = {
        'fullpath': 'fullpath',
        'id': 'id',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, fullpath=None, id=None, type=None, value=None):  # noqa: E501
        """InheritanceProp - a model defined in Swagger"""  # noqa: E501

        self._fullpath = None
        self._id = None
        self._type = None
        self._value = None
        self.discriminator = None

        if fullpath is not None:
            self.fullpath = fullpath
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def fullpath(self):
        """Gets the fullpath of this InheritanceProp.  # noqa: E501

        The fullpath of the property  # noqa: E501

        :return: The fullpath of this InheritanceProp.  # noqa: E501
        :rtype: str
        """
        return self._fullpath

    @fullpath.setter
    def fullpath(self, fullpath):
        """Sets the fullpath of this InheritanceProp.

        The fullpath of the property  # noqa: E501

        :param fullpath: The fullpath of this InheritanceProp.  # noqa: E501
        :type: str
        """

        self._fullpath = fullpath

    @property
    def id(self):
        """Gets the id of this InheritanceProp.  # noqa: E501

        Source id for the property,for example,id for group or property rule  # noqa: E501

        :return: The id of this InheritanceProp.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InheritanceProp.

        Source id for the property,for example,id for group or property rule  # noqa: E501

        :param id: The id of this InheritanceProp.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this InheritanceProp.  # noqa: E501

        The type of the parent property from which are inheriting  # noqa: E501

        :return: The type of this InheritanceProp.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InheritanceProp.

        The type of the parent property from which are inheriting  # noqa: E501

        :param type: The type of this InheritanceProp.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this InheritanceProp.  # noqa: E501

        The property value for the group  # noqa: E501

        :return: The value of this InheritanceProp.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InheritanceProp.

        The property value for the group  # noqa: E501

        :param value: The value of this InheritanceProp.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InheritanceProp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InheritanceProp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
