# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DynamicTableWidgetRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_name': 'str',
        'label': 'str',
        'device_display_name': 'str',
        'group_full_path': 'str'
    }

    attribute_map = {
        'instance_name': 'instanceName',
        'label': 'label',
        'device_display_name': 'deviceDisplayName',
        'group_full_path': 'groupFullPath'
    }

    def __init__(self, instance_name=None, label=None, device_display_name=None, group_full_path=None):  # noqa: E501
        """DynamicTableWidgetRow - a model defined in Swagger"""  # noqa: E501

        self._instance_name = None
        self._label = None
        self._device_display_name = None
        self._group_full_path = None
        self.discriminator = None

        if instance_name is not None:
            self.instance_name = instance_name
        if label is not None:
            self.label = label
        if device_display_name is not None:
            self.device_display_name = device_display_name
        if group_full_path is not None:
            self.group_full_path = group_full_path

    @property
    def instance_name(self):
        """Gets the instance_name of this DynamicTableWidgetRow.  # noqa: E501

        The instances for each column of the row  # noqa: E501

        :return: The instance_name of this DynamicTableWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this DynamicTableWidgetRow.

        The instances for each column of the row  # noqa: E501

        :param instance_name: The instance_name of this DynamicTableWidgetRow.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def label(self):
        """Gets the label of this DynamicTableWidgetRow.  # noqa: E501

        The label for the row  # noqa: E501

        :return: The label of this DynamicTableWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DynamicTableWidgetRow.

        The label for the row  # noqa: E501

        :param label: The label of this DynamicTableWidgetRow.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def device_display_name(self):
        """Gets the device_display_name of this DynamicTableWidgetRow.  # noqa: E501

        The display name of the device selected for the row  # noqa: E501

        :return: The device_display_name of this DynamicTableWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._device_display_name

    @device_display_name.setter
    def device_display_name(self, device_display_name):
        """Sets the device_display_name of this DynamicTableWidgetRow.

        The display name of the device selected for the row  # noqa: E501

        :param device_display_name: The device_display_name of this DynamicTableWidgetRow.  # noqa: E501
        :type: str
        """

        self._device_display_name = device_display_name

    @property
    def group_full_path(self):
        """Gets the group_full_path of this DynamicTableWidgetRow.  # noqa: E501

        The full path of the group selected for the row  # noqa: E501

        :return: The group_full_path of this DynamicTableWidgetRow.  # noqa: E501
        :rtype: str
        """
        return self._group_full_path

    @group_full_path.setter
    def group_full_path(self, group_full_path):
        """Sets the group_full_path of this DynamicTableWidgetRow.

        The full path of the group selected for the row  # noqa: E501

        :param group_full_path: The group_full_path of this DynamicTableWidgetRow.  # noqa: E501
        :type: str
        """

        self._group_full_path = group_full_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DynamicTableWidgetRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DynamicTableWidgetRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
