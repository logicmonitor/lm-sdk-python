# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SiteMonitorCheckpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geo_info': 'str',
        'display_prio': 'int',
        'name': 'str',
        'is_enabled_in_root': 'bool',
        'description': 'str',
        'id': 'int'
    }

    attribute_map = {
        'geo_info': 'geoInfo',
        'display_prio': 'displayPrio',
        'name': 'name',
        'is_enabled_in_root': 'isEnabledInRoot',
        'description': 'description',
        'id': 'id'
    }

    def __init__(self, geo_info=None, display_prio=None, name=None, is_enabled_in_root=None, description=None, id=None):  # noqa: E501
        """SiteMonitorCheckpoint - a model defined in Swagger"""  # noqa: E501

        self._geo_info = None
        self._display_prio = None
        self._name = None
        self._is_enabled_in_root = None
        self._description = None
        self._id = None
        self.discriminator = None

        if geo_info is not None:
            self.geo_info = geo_info
        if display_prio is not None:
            self.display_prio = display_prio
        if name is not None:
            self.name = name
        if is_enabled_in_root is not None:
            self.is_enabled_in_root = is_enabled_in_root
        self.description = description
        if id is not None:
            self.id = id

    @property
    def geo_info(self):
        """Gets the geo_info of this SiteMonitorCheckpoint.  # noqa: E501

        The geographical information (location) of the SiteMonitor Checkpoint  # noqa: E501

        :return: The geo_info of this SiteMonitorCheckpoint.  # noqa: E501
        :rtype: str
        """
        return self._geo_info

    @geo_info.setter
    def geo_info(self, geo_info):
        """Sets the geo_info of this SiteMonitorCheckpoint.

        The geographical information (location) of the SiteMonitor Checkpoint  # noqa: E501

        :param geo_info: The geo_info of this SiteMonitorCheckpoint.  # noqa: E501
        :type: str
        """

        self._geo_info = geo_info

    @property
    def display_prio(self):
        """Gets the display_prio of this SiteMonitorCheckpoint.  # noqa: E501

        The display priority of the SiteMonitor Checkpoint in your LogicMonitor portal  # noqa: E501

        :return: The display_prio of this SiteMonitorCheckpoint.  # noqa: E501
        :rtype: int
        """
        return self._display_prio

    @display_prio.setter
    def display_prio(self, display_prio):
        """Sets the display_prio of this SiteMonitorCheckpoint.

        The display priority of the SiteMonitor Checkpoint in your LogicMonitor portal  # noqa: E501

        :param display_prio: The display_prio of this SiteMonitorCheckpoint.  # noqa: E501
        :type: int
        """

        self._display_prio = display_prio

    @property
    def name(self):
        """Gets the name of this SiteMonitorCheckpoint.  # noqa: E501

        The SiteMonitor checkPoint name  # noqa: E501

        :return: The name of this SiteMonitorCheckpoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SiteMonitorCheckpoint.

        The SiteMonitor checkPoint name  # noqa: E501

        :param name: The name of this SiteMonitorCheckpoint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_enabled_in_root(self):
        """Gets the is_enabled_in_root of this SiteMonitorCheckpoint.  # noqa: E501

        Checks if sitemonitor enabled in root service group  # noqa: E501

        :return: The is_enabled_in_root of this SiteMonitorCheckpoint.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled_in_root

    @is_enabled_in_root.setter
    def is_enabled_in_root(self, is_enabled_in_root):
        """Sets the is_enabled_in_root of this SiteMonitorCheckpoint.

        Checks if sitemonitor enabled in root service group  # noqa: E501

        :param is_enabled_in_root: The is_enabled_in_root of this SiteMonitorCheckpoint.  # noqa: E501
        :type: bool
        """

        self._is_enabled_in_root = is_enabled_in_root

    @property
    def description(self):
        """Gets the description of this SiteMonitorCheckpoint.  # noqa: E501

        Check point description  # noqa: E501

        :return: The description of this SiteMonitorCheckpoint.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SiteMonitorCheckpoint.

        Check point description  # noqa: E501

        :param description: The description of this SiteMonitorCheckpoint.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def id(self):
        """Gets the id of this SiteMonitorCheckpoint.  # noqa: E501

        The Id of the SiteMonitor Checkpoint  # noqa: E501

        :return: The id of this SiteMonitorCheckpoint.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SiteMonitorCheckpoint.

        The Id of the SiteMonitor Checkpoint  # noqa: E501

        :param id: The id of this SiteMonitorCheckpoint.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteMonitorCheckpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteMonitorCheckpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
