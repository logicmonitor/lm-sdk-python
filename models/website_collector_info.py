# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebsiteCollectorInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hostname': 'str',
        'collector_group_name': 'str',
        'collector_group_id': 'int',
        'description': 'str',
        'id': 'int',
        'status': 'str'
    }

    attribute_map = {
        'hostname': 'hostname',
        'collector_group_name': 'collectorGroupName',
        'collector_group_id': 'collectorGroupId',
        'description': 'description',
        'id': 'id',
        'status': 'status'
    }

    def __init__(self, hostname=None, collector_group_name=None, collector_group_id=None, description=None, id=None, status=None):  # noqa: E501
        """WebsiteCollectorInfo - a model defined in Swagger"""  # noqa: E501

        self._hostname = None
        self._collector_group_name = None
        self._collector_group_id = None
        self._description = None
        self._id = None
        self._status = None
        self.discriminator = None

        if hostname is not None:
            self.hostname = hostname
        if collector_group_name is not None:
            self.collector_group_name = collector_group_name
        if collector_group_id is not None:
            self.collector_group_id = collector_group_id
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status

    @property
    def hostname(self):
        """Gets the hostname of this WebsiteCollectorInfo.  # noqa: E501


        :return: The hostname of this WebsiteCollectorInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this WebsiteCollectorInfo.


        :param hostname: The hostname of this WebsiteCollectorInfo.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def collector_group_name(self):
        """Gets the collector_group_name of this WebsiteCollectorInfo.  # noqa: E501


        :return: The collector_group_name of this WebsiteCollectorInfo.  # noqa: E501
        :rtype: str
        """
        return self._collector_group_name

    @collector_group_name.setter
    def collector_group_name(self, collector_group_name):
        """Sets the collector_group_name of this WebsiteCollectorInfo.


        :param collector_group_name: The collector_group_name of this WebsiteCollectorInfo.  # noqa: E501
        :type: str
        """

        self._collector_group_name = collector_group_name

    @property
    def collector_group_id(self):
        """Gets the collector_group_id of this WebsiteCollectorInfo.  # noqa: E501


        :return: The collector_group_id of this WebsiteCollectorInfo.  # noqa: E501
        :rtype: int
        """
        return self._collector_group_id

    @collector_group_id.setter
    def collector_group_id(self, collector_group_id):
        """Sets the collector_group_id of this WebsiteCollectorInfo.


        :param collector_group_id: The collector_group_id of this WebsiteCollectorInfo.  # noqa: E501
        :type: int
        """

        self._collector_group_id = collector_group_id

    @property
    def description(self):
        """Gets the description of this WebsiteCollectorInfo.  # noqa: E501


        :return: The description of this WebsiteCollectorInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebsiteCollectorInfo.


        :param description: The description of this WebsiteCollectorInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this WebsiteCollectorInfo.  # noqa: E501


        :return: The id of this WebsiteCollectorInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebsiteCollectorInfo.


        :param id: The id of this WebsiteCollectorInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this WebsiteCollectorInfo.  # noqa: E501


        :return: The status of this WebsiteCollectorInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WebsiteCollectorInfo.


        :param status: The status of this WebsiteCollectorInfo.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebsiteCollectorInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebsiteCollectorInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
