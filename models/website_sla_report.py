# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class WebsiteSLAReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_range': 'str',
        'timezone': 'str',
        'day_in_one_week': 'str',
        'period_in_one_day': 'str',
        'metrics': 'list[SlaMetric]'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'date_range': 'dateRange',
        'timezone': 'timezone',
        'day_in_one_week': 'dayInOneWeek',
        'period_in_one_day': 'periodInOneDay',
        'metrics': 'metrics'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, date_range=None, timezone=None, day_in_one_week=None, period_in_one_day=None, metrics=None, *args, **kwargs):  # noqa: E501
        """WebsiteSLAReport - a model defined in Swagger"""  # noqa: E501
        self._date_range = None
        self._timezone = None
        self._day_in_one_week = None
        self._period_in_one_day = None
        self._metrics = None
        self.discriminator = None
        if date_range is not None:
            self.date_range = date_range
        if timezone is not None:
            self.timezone = timezone
        if day_in_one_week is not None:
            self.day_in_one_week = day_in_one_week
        if period_in_one_day is not None:
            self.period_in_one_day = period_in_one_day
        self.metrics = metrics
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def date_range(self):
        """Gets the date_range of this WebsiteSLAReport.  # noqa: E501


        :return: The date_range of this WebsiteSLAReport.  # noqa: E501
        :rtype: str
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this WebsiteSLAReport.


        :param date_range: The date_range of this WebsiteSLAReport.  # noqa: E501
        :type: str
        """

        self._date_range = date_range

    @property
    def timezone(self):
        """Gets the timezone of this WebsiteSLAReport.  # noqa: E501


        :return: The timezone of this WebsiteSLAReport.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this WebsiteSLAReport.


        :param timezone: The timezone of this WebsiteSLAReport.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def day_in_one_week(self):
        """Gets the day_in_one_week of this WebsiteSLAReport.  # noqa: E501


        :return: The day_in_one_week of this WebsiteSLAReport.  # noqa: E501
        :rtype: str
        """
        return self._day_in_one_week

    @day_in_one_week.setter
    def day_in_one_week(self, day_in_one_week):
        """Sets the day_in_one_week of this WebsiteSLAReport.


        :param day_in_one_week: The day_in_one_week of this WebsiteSLAReport.  # noqa: E501
        :type: str
        """

        self._day_in_one_week = day_in_one_week

    @property
    def period_in_one_day(self):
        """Gets the period_in_one_day of this WebsiteSLAReport.  # noqa: E501


        :return: The period_in_one_day of this WebsiteSLAReport.  # noqa: E501
        :rtype: str
        """
        return self._period_in_one_day

    @period_in_one_day.setter
    def period_in_one_day(self, period_in_one_day):
        """Sets the period_in_one_day of this WebsiteSLAReport.


        :param period_in_one_day: The period_in_one_day of this WebsiteSLAReport.  # noqa: E501
        :type: str
        """

        self._period_in_one_day = period_in_one_day

    @property
    def metrics(self):
        """Gets the metrics of this WebsiteSLAReport.  # noqa: E501


        :return: The metrics of this WebsiteSLAReport.  # noqa: E501
        :rtype: list[SlaMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this WebsiteSLAReport.


        :param metrics: The metrics of this WebsiteSLAReport.  # noqa: E501
        :type: list[SlaMetric]
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebsiteSLAReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebsiteSLAReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
