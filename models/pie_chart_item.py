# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PieChartItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_point_name': 'str',
        'color': 'str',
        'legend': 'str'
    }

    attribute_map = {
        'data_point_name': 'dataPointName',
        'color': 'color',
        'legend': 'legend'
    }

    def __init__(self, data_point_name=None, color=None, legend=None):  # noqa: E501
        """PieChartItem - a model defined in Swagger"""  # noqa: E501

        self._data_point_name = None
        self._color = None
        self._legend = None
        self.discriminator = None

        self.data_point_name = data_point_name
        if color is not None:
            self.color = color
        self.legend = legend

    @property
    def data_point_name(self):
        """Gets the data_point_name of this PieChartItem.  # noqa: E501


        :return: The data_point_name of this PieChartItem.  # noqa: E501
        :rtype: str
        """
        return self._data_point_name

    @data_point_name.setter
    def data_point_name(self, data_point_name):
        """Sets the data_point_name of this PieChartItem.


        :param data_point_name: The data_point_name of this PieChartItem.  # noqa: E501
        :type: str
        """
        if data_point_name is None:
            raise ValueError("Invalid value for `data_point_name`, must not be `None`")  # noqa: E501

        self._data_point_name = data_point_name

    @property
    def color(self):
        """Gets the color of this PieChartItem.  # noqa: E501


        :return: The color of this PieChartItem.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PieChartItem.


        :param color: The color of this PieChartItem.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def legend(self):
        """Gets the legend of this PieChartItem.  # noqa: E501


        :return: The legend of this PieChartItem.  # noqa: E501
        :rtype: str
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this PieChartItem.


        :param legend: The legend of this PieChartItem.  # noqa: E501
        :type: str
        """
        if legend is None:
            raise ValueError("Invalid value for `legend`, must not be `None`")  # noqa: E501

        self._legend = legend

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PieChartItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PieChartItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
