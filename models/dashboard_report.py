# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class DashboardReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dashboard_id': 'int',
        'date_range': 'str',
        'display_name': 'str',
        'display_link': 'bool',
        'dashboard_group_full_path': 'str',
        'dashboard_name': 'str'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'dashboard_id': 'dashboardId',
        'date_range': 'dateRange',
        'display_name': 'displayName',
        'display_link': 'displayLink',
        'dashboard_group_full_path': 'dashboardGroupFullPath',
        'dashboard_name': 'dashboardName'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, dashboard_id=None, date_range=None, display_name=None, display_link=None, dashboard_group_full_path=None, dashboard_name=None, *args, **kwargs):  # noqa: E501
        """DashboardReport - a model defined in Swagger"""  # noqa: E501
        self._dashboard_id = None
        self._date_range = None
        self._display_name = None
        self._display_link = None
        self._dashboard_group_full_path = None
        self._dashboard_name = None
        self.discriminator = None
        self.dashboard_id = dashboard_id
        self.date_range = date_range
        if display_name is not None:
            self.display_name = display_name
        if display_link is not None:
            self.display_link = display_link
        if dashboard_group_full_path is not None:
            self.dashboard_group_full_path = dashboard_group_full_path
        if dashboard_name is not None:
            self.dashboard_name = dashboard_name
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this DashboardReport.  # noqa: E501

        The id of the source dashboard for the report  # noqa: E501

        :return: The dashboard_id of this DashboardReport.  # noqa: E501
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this DashboardReport.

        The id of the source dashboard for the report  # noqa: E501

        :param dashboard_id: The dashboard_id of this DashboardReport.  # noqa: E501
        :type: int
        """
        if dashboard_id is None:
            raise ValueError("Invalid value for `dashboard_id`, must not be `None`")  # noqa: E501

        self._dashboard_id = dashboard_id

    @property
    def date_range(self):
        """Gets the date_range of this DashboardReport.  # noqa: E501

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :return: The date_range of this DashboardReport.  # noqa: E501
        :rtype: str
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this DashboardReport.

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :param date_range: The date_range of this DashboardReport.  # noqa: E501
        :type: str
        """
        if date_range is None:
            raise ValueError("Invalid value for `date_range`, must not be `None`")  # noqa: E501

        self._date_range = date_range

    @property
    def display_name(self):
        """Gets the display_name of this DashboardReport.  # noqa: E501

        The name of the dashboard report  # noqa: E501

        :return: The display_name of this DashboardReport.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DashboardReport.

        The name of the dashboard report  # noqa: E501

        :param display_name: The display_name of this DashboardReport.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def display_link(self):
        """Gets the display_link of this DashboardReport.  # noqa: E501

        Whether need to display a link to the real dashboard  # noqa: E501

        :return: The display_link of this DashboardReport.  # noqa: E501
        :rtype: bool
        """
        return self._display_link

    @display_link.setter
    def display_link(self, display_link):
        """Sets the display_link of this DashboardReport.

        Whether need to display a link to the real dashboard  # noqa: E501

        :param display_link: The display_link of this DashboardReport.  # noqa: E501
        :type: bool
        """

        self._display_link = display_link

    @property
    def dashboard_group_full_path(self):
        """Gets the dashboard_group_full_path of this DashboardReport.  # noqa: E501

        The full path name of the group of the source dashboard  # noqa: E501

        :return: The dashboard_group_full_path of this DashboardReport.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_group_full_path

    @dashboard_group_full_path.setter
    def dashboard_group_full_path(self, dashboard_group_full_path):
        """Sets the dashboard_group_full_path of this DashboardReport.

        The full path name of the group of the source dashboard  # noqa: E501

        :param dashboard_group_full_path: The dashboard_group_full_path of this DashboardReport.  # noqa: E501
        :type: str
        """

        self._dashboard_group_full_path = dashboard_group_full_path

    @property
    def dashboard_name(self):
        """Gets the dashboard_name of this DashboardReport.  # noqa: E501

        The name of the source dashboard for the report  # noqa: E501

        :return: The dashboard_name of this DashboardReport.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_name

    @dashboard_name.setter
    def dashboard_name(self, dashboard_name):
        """Sets the dashboard_name of this DashboardReport.

        The name of the source dashboard for the report  # noqa: E501

        :param dashboard_name: The dashboard_name of this DashboardReport.  # noqa: E501
        :type: str
        """

        self._dashboard_name = dashboard_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
