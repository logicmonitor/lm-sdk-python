# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class AlertSlaReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hosts_val_type': 'str',
        'date_range': 'str',
        'hosts_val': 'str',
        'data_point': 'str',
        'alert_level': 'str',
        'alert_rule': 'str',
        'data_source': 'str'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'hosts_val_type': 'hostsValType',
        'date_range': 'dateRange',
        'hosts_val': 'hostsVal',
        'data_point': 'dataPoint',
        'alert_level': 'alertLevel',
        'alert_rule': 'alertRule',
        'data_source': 'dataSource'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, hosts_val_type=None, date_range=None, hosts_val=None, data_point=None, alert_level=None, alert_rule=None, data_source=None, *args, **kwargs):  # noqa: E501
        """AlertSlaReport - a model defined in Swagger"""  # noqa: E501
        self._hosts_val_type = None
        self._date_range = None
        self._hosts_val = None
        self._data_point = None
        self._alert_level = None
        self._alert_rule = None
        self._data_source = None
        self.discriminator = None
        if hosts_val_type is not None:
            self.hosts_val_type = hosts_val_type
        if date_range is not None:
            self.date_range = date_range
        if hosts_val is not None:
            self.hosts_val = hosts_val
        if data_point is not None:
            self.data_point = data_point
        if alert_level is not None:
            self.alert_level = alert_level
        if alert_rule is not None:
            self.alert_rule = alert_rule
        if data_source is not None:
            self.data_source = data_source
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def hosts_val_type(self):
        """Gets the hosts_val_type of this AlertSlaReport.  # noqa: E501

        host | group. The type of entities specified in the hostsVal field  # noqa: E501

        :return: The hosts_val_type of this AlertSlaReport.  # noqa: E501
        :rtype: str
        """
        return self._hosts_val_type

    @hosts_val_type.setter
    def hosts_val_type(self, hosts_val_type):
        """Sets the hosts_val_type of this AlertSlaReport.

        host | group. The type of entities specified in the hostsVal field  # noqa: E501

        :param hosts_val_type: The hosts_val_type of this AlertSlaReport.  # noqa: E501
        :type: str
        """

        self._hosts_val_type = hosts_val_type

    @property
    def date_range(self):
        """Gets the date_range of this AlertSlaReport.  # noqa: E501

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :return: The date_range of this AlertSlaReport.  # noqa: E501
        :rtype: str
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this AlertSlaReport.

        The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm  # noqa: E501

        :param date_range: The date_range of this AlertSlaReport.  # noqa: E501
        :type: str
        """

        self._date_range = date_range

    @property
    def hosts_val(self):
        """Gets the hosts_val of this AlertSlaReport.  # noqa: E501

        The devices OR groups (use full path) selected for the report, where multiple entities are separated by commas. Note that glob is supported  # noqa: E501

        :return: The hosts_val of this AlertSlaReport.  # noqa: E501
        :rtype: str
        """
        return self._hosts_val

    @hosts_val.setter
    def hosts_val(self, hosts_val):
        """Sets the hosts_val of this AlertSlaReport.

        The devices OR groups (use full path) selected for the report, where multiple entities are separated by commas. Note that glob is supported  # noqa: E501

        :param hosts_val: The hosts_val of this AlertSlaReport.  # noqa: E501
        :type: str
        """

        self._hosts_val = hosts_val

    @property
    def data_point(self):
        """Gets the data_point of this AlertSlaReport.  # noqa: E501

        The datapoints selected for the report, where multiple datapoints are separated by commas  # noqa: E501

        :return: The data_point of this AlertSlaReport.  # noqa: E501
        :rtype: str
        """
        return self._data_point

    @data_point.setter
    def data_point(self, data_point):
        """Sets the data_point of this AlertSlaReport.

        The datapoints selected for the report, where multiple datapoints are separated by commas  # noqa: E501

        :param data_point: The data_point of this AlertSlaReport.  # noqa: E501
        :type: str
        """

        self._data_point = data_point

    @property
    def alert_level(self):
        """Gets the alert_level of this AlertSlaReport.  # noqa: E501

        Warn | Error | Critical. The minimum severity of the alert statuses you’d like to evaluate for the specified devices and device groups  # noqa: E501

        :return: The alert_level of this AlertSlaReport.  # noqa: E501
        :rtype: str
        """
        return self._alert_level

    @alert_level.setter
    def alert_level(self, alert_level):
        """Sets the alert_level of this AlertSlaReport.

        Warn | Error | Critical. The minimum severity of the alert statuses you’d like to evaluate for the specified devices and device groups  # noqa: E501

        :param alert_level: The alert_level of this AlertSlaReport.  # noqa: E501
        :type: str
        """

        self._alert_level = alert_level

    @property
    def alert_rule(self):
        """Gets the alert_rule of this AlertSlaReport.  # noqa: E501

        The name of the Alert Rule that the datapoint alert you’re evaluating will be routed to. Note that if you do not select the correct alert rule, no matching alerts will be displayed  # noqa: E501

        :return: The alert_rule of this AlertSlaReport.  # noqa: E501
        :rtype: str
        """
        return self._alert_rule

    @alert_rule.setter
    def alert_rule(self, alert_rule):
        """Sets the alert_rule of this AlertSlaReport.

        The name of the Alert Rule that the datapoint alert you’re evaluating will be routed to. Note that if you do not select the correct alert rule, no matching alerts will be displayed  # noqa: E501

        :param alert_rule: The alert_rule of this AlertSlaReport.  # noqa: E501
        :type: str
        """

        self._alert_rule = alert_rule

    @property
    def data_source(self):
        """Gets the data_source of this AlertSlaReport.  # noqa: E501

        The datasource instance selected for the report, in the format DatasourceName-InstanceName (If it is a single instance datasource you can just leave it at DatasourceName)  # noqa: E501

        :return: The data_source of this AlertSlaReport.  # noqa: E501
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this AlertSlaReport.

        The datasource instance selected for the report, in the format DatasourceName-InstanceName (If it is a single instance datasource you can just leave it at DatasourceName)  # noqa: E501

        :param data_source: The data_source of this AlertSlaReport.  # noqa: E501
        :type: str
        """

        self._data_source = data_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertSlaReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertSlaReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
