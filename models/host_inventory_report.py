# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class HostInventoryReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sorted_by': 'str',
        'hosts_val_type': 'str',
        'hosts_val': 'str',
        'metrics': 'list[HostInventoryMetric]',
        'properties': 'list[str]'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'sorted_by': 'sortedBy',
        'hosts_val_type': 'hostsValType',
        'hosts_val': 'hostsVal',
        'metrics': 'metrics',
        'properties': 'properties'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, sorted_by=None, hosts_val_type=None, hosts_val=None, metrics=None, properties=None, *args, **kwargs):  # noqa: E501
        """HostInventoryReport - a model defined in Swagger"""  # noqa: E501
        self._sorted_by = None
        self._hosts_val_type = None
        self._hosts_val = None
        self._metrics = None
        self._properties = None
        self.discriminator = None
        if sorted_by is not None:
            self.sorted_by = sorted_by
        if hosts_val_type is not None:
            self.hosts_val_type = hosts_val_type
        if hosts_val is not None:
            self.hosts_val = hosts_val
        if metrics is not None:
            self.metrics = metrics
        self.properties = properties
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def sorted_by(self):
        """Gets the sorted_by of this HostInventoryReport.  # noqa: E501

        Specify a property that is included in the 'properties' list that should be used to sort the devices/groups displayed in the report  # noqa: E501

        :return: The sorted_by of this HostInventoryReport.  # noqa: E501
        :rtype: str
        """
        return self._sorted_by

    @sorted_by.setter
    def sorted_by(self, sorted_by):
        """Sets the sorted_by of this HostInventoryReport.

        Specify a property that is included in the 'properties' list that should be used to sort the devices/groups displayed in the report  # noqa: E501

        :param sorted_by: The sorted_by of this HostInventoryReport.  # noqa: E501
        :type: str
        """

        self._sorted_by = sorted_by

    @property
    def hosts_val_type(self):
        """Gets the hosts_val_type of this HostInventoryReport.  # noqa: E501

        host | group. The type of entities specified in the hostsVal field  # noqa: E501

        :return: The hosts_val_type of this HostInventoryReport.  # noqa: E501
        :rtype: str
        """
        return self._hosts_val_type

    @hosts_val_type.setter
    def hosts_val_type(self, hosts_val_type):
        """Sets the hosts_val_type of this HostInventoryReport.

        host | group. The type of entities specified in the hostsVal field  # noqa: E501

        :param hosts_val_type: The hosts_val_type of this HostInventoryReport.  # noqa: E501
        :type: str
        """

        self._hosts_val_type = hosts_val_type

    @property
    def hosts_val(self):
        """Gets the hosts_val of this HostInventoryReport.  # noqa: E501

        The devices OR groups (full path) selected for the report, where multiple entities are separated by commas  # noqa: E501

        :return: The hosts_val of this HostInventoryReport.  # noqa: E501
        :rtype: str
        """
        return self._hosts_val

    @hosts_val.setter
    def hosts_val(self, hosts_val):
        """Sets the hosts_val of this HostInventoryReport.

        The devices OR groups (full path) selected for the report, where multiple entities are separated by commas  # noqa: E501

        :param hosts_val: The hosts_val of this HostInventoryReport.  # noqa: E501
        :type: str
        """

        self._hosts_val = hosts_val

    @property
    def metrics(self):
        """Gets the metrics of this HostInventoryReport.  # noqa: E501

        The instances will be included in the report  # noqa: E501

        :return: The metrics of this HostInventoryReport.  # noqa: E501
        :rtype: list[HostInventoryMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this HostInventoryReport.

        The instances will be included in the report  # noqa: E501

        :param metrics: The metrics of this HostInventoryReport.  # noqa: E501
        :type: list[HostInventoryMetric]
        """

        self._metrics = metrics

    @property
    def properties(self):
        """Gets the properties of this HostInventoryReport.  # noqa: E501

        The properties that should be displayed in the report  # noqa: E501

        :return: The properties of this HostInventoryReport.  # noqa: E501
        :rtype: list[str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this HostInventoryReport.

        The properties that should be displayed in the report  # noqa: E501

        :param properties: The properties of this HostInventoryReport.  # noqa: E501
        :type: list[str]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostInventoryReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostInventoryReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
