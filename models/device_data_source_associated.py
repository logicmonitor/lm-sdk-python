# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from logicmonitor_sdk.models.device_data_source_associated_instance import DeviceDataSourceAssociatedInstance  # noqa: F401,E501


class DeviceDataSourceAssociated(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance': 'list[DeviceDataSourceAssociatedInstance]',
        'display_name': 'str',
        'name': 'str',
        'has_more': 'int',
        'description': 'str',
        'id': 'int',
        'has_active_instance': 'bool'
    }

    attribute_map = {
        'instance': 'instance',
        'display_name': 'displayName',
        'name': 'name',
        'has_more': 'hasMore',
        'description': 'description',
        'id': 'id',
        'has_active_instance': 'hasActiveInstance'
    }

    def __init__(self, instance=None, display_name=None, name=None, has_more=None, description=None, id=None, has_active_instance=None):  # noqa: E501
        """DeviceDataSourceAssociated - a model defined in Swagger"""  # noqa: E501

        self._instance = None
        self._display_name = None
        self._name = None
        self._has_more = None
        self._description = None
        self._id = None
        self._has_active_instance = None
        self.discriminator = None

        if instance is not None:
            self.instance = instance
        if display_name is not None:
            self.display_name = display_name
        if name is not None:
            self.name = name
        if has_more is not None:
            self.has_more = has_more
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if has_active_instance is not None:
            self.has_active_instance = has_active_instance

    @property
    def instance(self):
        """Gets the instance of this DeviceDataSourceAssociated.  # noqa: E501


        :return: The instance of this DeviceDataSourceAssociated.  # noqa: E501
        :rtype: list[DeviceDataSourceAssociatedInstance]
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this DeviceDataSourceAssociated.


        :param instance: The instance of this DeviceDataSourceAssociated.  # noqa: E501
        :type: list[DeviceDataSourceAssociatedInstance]
        """

        self._instance = instance

    @property
    def display_name(self):
        """Gets the display_name of this DeviceDataSourceAssociated.  # noqa: E501


        :return: The display_name of this DeviceDataSourceAssociated.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DeviceDataSourceAssociated.


        :param display_name: The display_name of this DeviceDataSourceAssociated.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this DeviceDataSourceAssociated.  # noqa: E501


        :return: The name of this DeviceDataSourceAssociated.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceDataSourceAssociated.


        :param name: The name of this DeviceDataSourceAssociated.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def has_more(self):
        """Gets the has_more of this DeviceDataSourceAssociated.  # noqa: E501


        :return: The has_more of this DeviceDataSourceAssociated.  # noqa: E501
        :rtype: int
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this DeviceDataSourceAssociated.


        :param has_more: The has_more of this DeviceDataSourceAssociated.  # noqa: E501
        :type: int
        """

        self._has_more = has_more

    @property
    def description(self):
        """Gets the description of this DeviceDataSourceAssociated.  # noqa: E501


        :return: The description of this DeviceDataSourceAssociated.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceDataSourceAssociated.


        :param description: The description of this DeviceDataSourceAssociated.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this DeviceDataSourceAssociated.  # noqa: E501


        :return: The id of this DeviceDataSourceAssociated.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceDataSourceAssociated.


        :param id: The id of this DeviceDataSourceAssociated.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def has_active_instance(self):
        """Gets the has_active_instance of this DeviceDataSourceAssociated.  # noqa: E501


        :return: The has_active_instance of this DeviceDataSourceAssociated.  # noqa: E501
        :rtype: bool
        """
        return self._has_active_instance

    @has_active_instance.setter
    def has_active_instance(self, has_active_instance):
        """Sets the has_active_instance of this DeviceDataSourceAssociated.


        :param has_active_instance: The has_active_instance of this DeviceDataSourceAssociated.  # noqa: E501
        :type: bool
        """

        self._has_active_instance = has_active_instance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceDataSourceAssociated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceDataSourceAssociated):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
