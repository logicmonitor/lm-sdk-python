# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.website import Website  # noqa: F401,E501

class WebCheck(Website):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema': 'str',
        'trigger_ssl_expiration_alert': 'bool',
        'trigger_ssl_status_alert': 'bool',
        'page_load_alert_time_in_ms': 'int',
        'ignore_ssl': 'object',
        'alert_expr': 'str'
    }
    if hasattr(Website, "swagger_types"):
        swagger_types.update(Website.swagger_types)

    attribute_map = {
        'schema': 'schema',
        'trigger_ssl_expiration_alert': 'triggerSSLExpirationAlert',
        'trigger_ssl_status_alert': 'triggerSSLStatusAlert',
        'page_load_alert_time_in_ms': 'pageLoadAlertTimeInMS',
        'ignore_ssl': 'ignoreSSL',
        'alert_expr': 'alertExpr'
    }
    if hasattr(Website, "attribute_map"):
        attribute_map.update(Website.attribute_map)

    def __init__(self, schema=None, trigger_ssl_expiration_alert=None, trigger_ssl_status_alert=None, page_load_alert_time_in_ms=None, ignore_ssl=None, alert_expr=None, *args, **kwargs):  # noqa: E501
        """WebCheck - a model defined in Swagger"""  # noqa: E501
        self._schema = None
        self._trigger_ssl_expiration_alert = None
        self._trigger_ssl_status_alert = None
        self._page_load_alert_time_in_ms = None
        self._ignore_ssl = None
        self._alert_expr = None
        self.discriminator = None
        if schema is not None:
            self.schema = schema
        if trigger_ssl_expiration_alert is not None:
            self.trigger_ssl_expiration_alert = trigger_ssl_expiration_alert
        if trigger_ssl_status_alert is not None:
            self.trigger_ssl_status_alert = trigger_ssl_status_alert
        if page_load_alert_time_in_ms is not None:
            self.page_load_alert_time_in_ms = page_load_alert_time_in_ms
        if ignore_ssl is not None:
            self.ignore_ssl = ignore_ssl
        if alert_expr is not None:
            self.alert_expr = alert_expr
        Website.__init__(self, *args, **kwargs)

    @property
    def schema(self):
        """Gets the schema of this WebCheck.  # noqa: E501

        The scheme or protocol associated with the URL to check. Acceptable values are: http, https  # noqa: E501

        :return: The schema of this WebCheck.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this WebCheck.

        The scheme or protocol associated with the URL to check. Acceptable values are: http, https  # noqa: E501

        :param schema: The schema of this WebCheck.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def trigger_ssl_expiration_alert(self):
        """Gets the trigger_ssl_expiration_alert of this WebCheck.  # noqa: E501

        Whether or not SSL expiration alerts should be triggered  # noqa: E501

        :return: The trigger_ssl_expiration_alert of this WebCheck.  # noqa: E501
        :rtype: bool
        """
        return self._trigger_ssl_expiration_alert

    @trigger_ssl_expiration_alert.setter
    def trigger_ssl_expiration_alert(self, trigger_ssl_expiration_alert):
        """Sets the trigger_ssl_expiration_alert of this WebCheck.

        Whether or not SSL expiration alerts should be triggered  # noqa: E501

        :param trigger_ssl_expiration_alert: The trigger_ssl_expiration_alert of this WebCheck.  # noqa: E501
        :type: bool
        """

        self._trigger_ssl_expiration_alert = trigger_ssl_expiration_alert

    @property
    def trigger_ssl_status_alert(self):
        """Gets the trigger_ssl_status_alert of this WebCheck.  # noqa: E501

        Whether or not SSL status alerts should be triggered  # noqa: E501

        :return: The trigger_ssl_status_alert of this WebCheck.  # noqa: E501
        :rtype: bool
        """
        return self._trigger_ssl_status_alert

    @trigger_ssl_status_alert.setter
    def trigger_ssl_status_alert(self, trigger_ssl_status_alert):
        """Sets the trigger_ssl_status_alert of this WebCheck.

        Whether or not SSL status alerts should be triggered  # noqa: E501

        :param trigger_ssl_status_alert: The trigger_ssl_status_alert of this WebCheck.  # noqa: E501
        :type: bool
        """

        self._trigger_ssl_status_alert = trigger_ssl_status_alert

    @property
    def page_load_alert_time_in_ms(self):
        """Gets the page_load_alert_time_in_ms of this WebCheck.  # noqa: E501

        The time in milliseconds that the page must load within for each step to avoid triggering an alert  # noqa: E501

        :return: The page_load_alert_time_in_ms of this WebCheck.  # noqa: E501
        :rtype: int
        """
        return self._page_load_alert_time_in_ms

    @page_load_alert_time_in_ms.setter
    def page_load_alert_time_in_ms(self, page_load_alert_time_in_ms):
        """Sets the page_load_alert_time_in_ms of this WebCheck.

        The time in milliseconds that the page must load within for each step to avoid triggering an alert  # noqa: E501

        :param page_load_alert_time_in_ms: The page_load_alert_time_in_ms of this WebCheck.  # noqa: E501
        :type: int
        """

        self._page_load_alert_time_in_ms = page_load_alert_time_in_ms

    @property
    def ignore_ssl(self):
        """Gets the ignore_ssl of this WebCheck.  # noqa: E501

        Whether or not SSL should be ignored, the default value is true  # noqa: E501

        :return: The ignore_ssl of this WebCheck.  # noqa: E501
        :rtype: object
        """
        return self._ignore_ssl

    @ignore_ssl.setter
    def ignore_ssl(self, ignore_ssl):
        """Sets the ignore_ssl of this WebCheck.

        Whether or not SSL should be ignored, the default value is true  # noqa: E501

        :param ignore_ssl: The ignore_ssl of this WebCheck.  # noqa: E501
        :type: object
        """

        self._ignore_ssl = ignore_ssl

    @property
    def alert_expr(self):
        """Gets the alert_expr of this WebCheck.  # noqa: E501

        The threshold (in days) for triggering SSL certification alerts  # noqa: E501

        :return: The alert_expr of this WebCheck.  # noqa: E501
        :rtype: str
        """
        return self._alert_expr

    @alert_expr.setter
    def alert_expr(self, alert_expr):
        """Sets the alert_expr of this WebCheck.

        The threshold (in days) for triggering SSL certification alerts  # noqa: E501

        :param alert_expr: The alert_expr of this WebCheck.  # noqa: E501
        :type: str
        """

        self._alert_expr = alert_expr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
