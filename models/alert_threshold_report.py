# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.report_base import ReportBase  # noqa: F401,E501

class AlertThresholdReport(ReportBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sorted_by': 'str',
        'data_source_instance_name': 'str',
        'columns': 'list[DynamicColumn]',
        'data_point': 'str',
        'device_display_name': 'str',
        'exclude_global': 'object',
        'group_full_path': 'str'
    }
    if hasattr(ReportBase, "swagger_types"):
        swagger_types.update(ReportBase.swagger_types)

    attribute_map = {
        'sorted_by': 'sortedBy',
        'data_source_instance_name': 'dataSourceInstanceName',
        'columns': 'columns',
        'data_point': 'dataPoint',
        'device_display_name': 'deviceDisplayName',
        'exclude_global': 'excludeGlobal',
        'group_full_path': 'groupFullPath'
    }
    if hasattr(ReportBase, "attribute_map"):
        attribute_map.update(ReportBase.attribute_map)

    def __init__(self, sorted_by=None, data_source_instance_name=None, columns=None, data_point=None, device_display_name=None, exclude_global=None, group_full_path=None, *args, **kwargs):  # noqa: E501
        """AlertThresholdReport - a model defined in Swagger"""  # noqa: E501
        self._sorted_by = None
        self._data_source_instance_name = None
        self._columns = None
        self._data_point = None
        self._device_display_name = None
        self._exclude_global = None
        self._group_full_path = None
        self.discriminator = None
        if sorted_by is not None:
            self.sorted_by = sorted_by
        if data_source_instance_name is not None:
            self.data_source_instance_name = data_source_instance_name
        if columns is not None:
            self.columns = columns
        if data_point is not None:
            self.data_point = data_point
        if device_display_name is not None:
            self.device_display_name = device_display_name
        if exclude_global is not None:
            self.exclude_global = exclude_global
        if group_full_path is not None:
            self.group_full_path = group_full_path
        ReportBase.__init__(self, *args, **kwargs)

    @property
    def sorted_by(self):
        """Gets the sorted_by of this AlertThresholdReport.  # noqa: E501

        host | datasource | datapoint host: displayed thresholds will be sorted by device datasource: displayed thresholds will be sorted by datasource instance datapoint: displayed thresholds will be sorted by datapoint (metric)  # noqa: E501

        :return: The sorted_by of this AlertThresholdReport.  # noqa: E501
        :rtype: str
        """
        return self._sorted_by

    @sorted_by.setter
    def sorted_by(self, sorted_by):
        """Sets the sorted_by of this AlertThresholdReport.

        host | datasource | datapoint host: displayed thresholds will be sorted by device datasource: displayed thresholds will be sorted by datasource instance datapoint: displayed thresholds will be sorted by datapoint (metric)  # noqa: E501

        :param sorted_by: The sorted_by of this AlertThresholdReport.  # noqa: E501
        :type: str
        """

        self._sorted_by = sorted_by

    @property
    def data_source_instance_name(self):
        """Gets the data_source_instance_name of this AlertThresholdReport.  # noqa: E501

        The name of the datasource instance to be included in the report, where the syntax should be dataSourceDisplayName-InstanceName. If you're referencing a single instance datasource, you can just specify dataSourceDisplayName. Glob expressions supported  # noqa: E501

        :return: The data_source_instance_name of this AlertThresholdReport.  # noqa: E501
        :rtype: str
        """
        return self._data_source_instance_name

    @data_source_instance_name.setter
    def data_source_instance_name(self, data_source_instance_name):
        """Sets the data_source_instance_name of this AlertThresholdReport.

        The name of the datasource instance to be included in the report, where the syntax should be dataSourceDisplayName-InstanceName. If you're referencing a single instance datasource, you can just specify dataSourceDisplayName. Glob expressions supported  # noqa: E501

        :param data_source_instance_name: The data_source_instance_name of this AlertThresholdReport.  # noqa: E501
        :type: str
        """

        self._data_source_instance_name = data_source_instance_name

    @property
    def columns(self):
        """Gets the columns of this AlertThresholdReport.  # noqa: E501

        The columns that will be displayed in the report. You should specify the columns in the order in which you'd like them to be displayed  # noqa: E501

        :return: The columns of this AlertThresholdReport.  # noqa: E501
        :rtype: list[DynamicColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this AlertThresholdReport.

        The columns that will be displayed in the report. You should specify the columns in the order in which you'd like them to be displayed  # noqa: E501

        :param columns: The columns of this AlertThresholdReport.  # noqa: E501
        :type: list[DynamicColumn]
        """

        self._columns = columns

    @property
    def data_point(self):
        """Gets the data_point of this AlertThresholdReport.  # noqa: E501

        The datapoint to be included in the report. Glob expressions supported  # noqa: E501

        :return: The data_point of this AlertThresholdReport.  # noqa: E501
        :rtype: str
        """
        return self._data_point

    @data_point.setter
    def data_point(self, data_point):
        """Sets the data_point of this AlertThresholdReport.

        The datapoint to be included in the report. Glob expressions supported  # noqa: E501

        :param data_point: The data_point of this AlertThresholdReport.  # noqa: E501
        :type: str
        """

        self._data_point = data_point

    @property
    def device_display_name(self):
        """Gets the device_display_name of this AlertThresholdReport.  # noqa: E501

        The display name of the device(s) to be included in the report. Glob expressions supported  # noqa: E501

        :return: The device_display_name of this AlertThresholdReport.  # noqa: E501
        :rtype: str
        """
        return self._device_display_name

    @device_display_name.setter
    def device_display_name(self, device_display_name):
        """Sets the device_display_name of this AlertThresholdReport.

        The display name of the device(s) to be included in the report. Glob expressions supported  # noqa: E501

        :param device_display_name: The device_display_name of this AlertThresholdReport.  # noqa: E501
        :type: str
        """

        self._device_display_name = device_display_name

    @property
    def exclude_global(self):
        """Gets the exclude_global of this AlertThresholdReport.  # noqa: E501

        true: only variations from the global thresholds will be displayed false: all thresholds will be displayed, including global thresholds an custom group and instance level thresholds the default value is true  # noqa: E501

        :return: The exclude_global of this AlertThresholdReport.  # noqa: E501
        :rtype: object
        """
        return self._exclude_global

    @exclude_global.setter
    def exclude_global(self, exclude_global):
        """Sets the exclude_global of this AlertThresholdReport.

        true: only variations from the global thresholds will be displayed false: all thresholds will be displayed, including global thresholds an custom group and instance level thresholds the default value is true  # noqa: E501

        :param exclude_global: The exclude_global of this AlertThresholdReport.  # noqa: E501
        :type: object
        """

        self._exclude_global = exclude_global

    @property
    def group_full_path(self):
        """Gets the group_full_path of this AlertThresholdReport.  # noqa: E501

        The full path of the group whose member devices you are going to include in the report. Glob expressions supported  # noqa: E501

        :return: The group_full_path of this AlertThresholdReport.  # noqa: E501
        :rtype: str
        """
        return self._group_full_path

    @group_full_path.setter
    def group_full_path(self, group_full_path):
        """Sets the group_full_path of this AlertThresholdReport.

        The full path of the group whose member devices you are going to include in the report. Glob expressions supported  # noqa: E501

        :param group_full_path: The group_full_path of this AlertThresholdReport.  # noqa: E501
        :type: str
        """

        self._group_full_path = group_full_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertThresholdReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertThresholdReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
