# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from logicmonitor_sdk.models.collector_attribute import CollectorAttribute  # noqa: F401,E501


class NetflowAlertModulesCollectorAttributeV3(CollectorAttribute):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type_of_alert': 'str',
        'threshold_value_unit': 'str',
        'netflow_filters': 'str',
        'traffic_type': 'str',
        'alert_enable': 'bool',
        'top_threshold_expression': 'str',
        'data_duration': 'str',
        'enabled': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'type_of_alert': 'typeOfAlert',
        'threshold_value_unit': 'thresholdValueUnit',
        'netflow_filters': 'netflowFilters',
        'traffic_type': 'trafficType',
        'alert_enable': 'alertEnable',
        'top_threshold_expression': 'topThresholdExpression',
        'data_duration': 'dataDuration',
        'enabled': 'enabled'
    }

    def __init__(self, name=None, type_of_alert=None, threshold_value_unit=None, netflow_filters=None, traffic_type=None, alert_enable=None, top_threshold_expression=None, data_duration=None, enabled=None):  # noqa: E501
        """NetflowAlertModulesCollectorAttributeV3 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._type_of_alert = None
        self._threshold_value_unit = None
        self._netflow_filters = None
        self._traffic_type = None
        self._alert_enable = None
        self._top_threshold_expression = None
        self._data_duration = None
        self._enabled = None
        self.discriminator = None

        self.name = name
        if type_of_alert is not None:
            self.type_of_alert = type_of_alert
        if threshold_value_unit is not None:
            self.threshold_value_unit = threshold_value_unit
        if netflow_filters is not None:
            self.netflow_filters = netflow_filters
        if traffic_type is not None:
            self.traffic_type = traffic_type
        if alert_enable is not None:
            self.alert_enable = alert_enable
        if top_threshold_expression is not None:
            self.top_threshold_expression = top_threshold_expression
        if data_duration is not None:
            self.data_duration = data_duration
        if enabled is not None:
            self.enabled = enabled

    @property
    def name(self):
        """Gets the name of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501

        data collector's name  # noqa: E501

        :return: The name of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetflowAlertModulesCollectorAttributeV3.

        data collector's name  # noqa: E501

        :param name: The name of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type_of_alert(self):
        """Gets the type_of_alert of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501


        :return: The type_of_alert of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._type_of_alert

    @type_of_alert.setter
    def type_of_alert(self, type_of_alert):
        """Sets the type_of_alert of this NetflowAlertModulesCollectorAttributeV3.


        :param type_of_alert: The type_of_alert of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :type: str
        """

        self._type_of_alert = type_of_alert

    @property
    def threshold_value_unit(self):
        """Gets the threshold_value_unit of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501


        :return: The threshold_value_unit of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._threshold_value_unit

    @threshold_value_unit.setter
    def threshold_value_unit(self, threshold_value_unit):
        """Sets the threshold_value_unit of this NetflowAlertModulesCollectorAttributeV3.


        :param threshold_value_unit: The threshold_value_unit of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :type: str
        """

        self._threshold_value_unit = threshold_value_unit

    @property
    def netflow_filters(self):
        """Gets the netflow_filters of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501


        :return: The netflow_filters of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._netflow_filters

    @netflow_filters.setter
    def netflow_filters(self, netflow_filters):
        """Sets the netflow_filters of this NetflowAlertModulesCollectorAttributeV3.


        :param netflow_filters: The netflow_filters of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :type: str
        """

        self._netflow_filters = netflow_filters

    @property
    def traffic_type(self):
        """Gets the traffic_type of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501


        :return: The traffic_type of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._traffic_type

    @traffic_type.setter
    def traffic_type(self, traffic_type):
        """Sets the traffic_type of this NetflowAlertModulesCollectorAttributeV3.


        :param traffic_type: The traffic_type of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :type: str
        """

        self._traffic_type = traffic_type

    @property
    def alert_enable(self):
        """Gets the alert_enable of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501


        :return: The alert_enable of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :rtype: bool
        """
        return self._alert_enable

    @alert_enable.setter
    def alert_enable(self, alert_enable):
        """Sets the alert_enable of this NetflowAlertModulesCollectorAttributeV3.


        :param alert_enable: The alert_enable of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :type: bool
        """

        self._alert_enable = alert_enable

    @property
    def top_threshold_expression(self):
        """Gets the top_threshold_expression of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501


        :return: The top_threshold_expression of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._top_threshold_expression

    @top_threshold_expression.setter
    def top_threshold_expression(self, top_threshold_expression):
        """Sets the top_threshold_expression of this NetflowAlertModulesCollectorAttributeV3.


        :param top_threshold_expression: The top_threshold_expression of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :type: str
        """

        self._top_threshold_expression = top_threshold_expression

    @property
    def data_duration(self):
        """Gets the data_duration of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501


        :return: The data_duration of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :rtype: str
        """
        return self._data_duration

    @data_duration.setter
    def data_duration(self, data_duration):
        """Sets the data_duration of this NetflowAlertModulesCollectorAttributeV3.


        :param data_duration: The data_duration of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :type: str
        """

        self._data_duration = data_duration

    @property
    def enabled(self):
        """Gets the enabled of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501


        :return: The enabled of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NetflowAlertModulesCollectorAttributeV3.


        :param enabled: The enabled of this NetflowAlertModulesCollectorAttributeV3.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetflowAlertModulesCollectorAttributeV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetflowAlertModulesCollectorAttributeV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
