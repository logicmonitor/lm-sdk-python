# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TreeNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_permission': 'str',
        'display_name': 'str',
        'id': 'int',
        'type': 'str'
    }

    attribute_map = {
        'user_permission': 'userPermission',
        'display_name': 'displayName',
        'id': 'id',
        'type': 'type'
    }

    def __init__(self, user_permission=None, display_name=None, id=None, type=None):  # noqa: E501
        """TreeNode - a model defined in Swagger"""  # noqa: E501

        self._user_permission = None
        self._display_name = None
        self._id = None
        self._type = None
        self.discriminator = None

        if user_permission is not None:
            self.user_permission = user_permission
        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type

    @property
    def user_permission(self):
        """Gets the user_permission of this TreeNode.  # noqa: E501


        :return: The user_permission of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._user_permission

    @user_permission.setter
    def user_permission(self, user_permission):
        """Sets the user_permission of this TreeNode.


        :param user_permission: The user_permission of this TreeNode.  # noqa: E501
        :type: str
        """

        self._user_permission = user_permission

    @property
    def display_name(self):
        """Gets the display_name of this TreeNode.  # noqa: E501


        :return: The display_name of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TreeNode.


        :param display_name: The display_name of this TreeNode.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this TreeNode.  # noqa: E501


        :return: The id of this TreeNode.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TreeNode.


        :param id: The id of this TreeNode.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this TreeNode.  # noqa: E501


        :return: The type of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TreeNode.


        :param type: The type of this TreeNode.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TreeNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TreeNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
