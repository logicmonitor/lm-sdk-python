# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateReasons(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reasons': 'str',
        'ip': 'str',
        'happened_on': 'int',
        'id': 'int',
        'type': 'str',
        'object_id': 'int',
        'username': 'str'
    }

    attribute_map = {
        'reasons': 'reasons',
        'ip': 'ip',
        'happened_on': 'happenedOn',
        'id': 'id',
        'type': 'type',
        'object_id': 'objectId',
        'username': 'username'
    }

    def __init__(self, reasons=None, ip=None, happened_on=None, id=None, type=None, object_id=None, username=None):  # noqa: E501
        """UpdateReasons - a model defined in Swagger"""  # noqa: E501
        self._reasons = None
        self._ip = None
        self._happened_on = None
        self._id = None
        self._type = None
        self._object_id = None
        self._username = None
        self.discriminator = None
        if reasons is not None:
            self.reasons = reasons
        if ip is not None:
            self.ip = ip
        if happened_on is not None:
            self.happened_on = happened_on
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if object_id is not None:
            self.object_id = object_id
        if username is not None:
            self.username = username

    @property
    def reasons(self):
        """Gets the reasons of this UpdateReasons.  # noqa: E501


        :return: The reasons of this UpdateReasons.  # noqa: E501
        :rtype: str
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this UpdateReasons.


        :param reasons: The reasons of this UpdateReasons.  # noqa: E501
        :type: str
        """

        self._reasons = reasons

    @property
    def ip(self):
        """Gets the ip of this UpdateReasons.  # noqa: E501


        :return: The ip of this UpdateReasons.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this UpdateReasons.


        :param ip: The ip of this UpdateReasons.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def happened_on(self):
        """Gets the happened_on of this UpdateReasons.  # noqa: E501


        :return: The happened_on of this UpdateReasons.  # noqa: E501
        :rtype: int
        """
        return self._happened_on

    @happened_on.setter
    def happened_on(self, happened_on):
        """Sets the happened_on of this UpdateReasons.


        :param happened_on: The happened_on of this UpdateReasons.  # noqa: E501
        :type: int
        """

        self._happened_on = happened_on

    @property
    def id(self):
        """Gets the id of this UpdateReasons.  # noqa: E501


        :return: The id of this UpdateReasons.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateReasons.


        :param id: The id of this UpdateReasons.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this UpdateReasons.  # noqa: E501


        :return: The type of this UpdateReasons.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateReasons.


        :param type: The type of this UpdateReasons.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def object_id(self):
        """Gets the object_id of this UpdateReasons.  # noqa: E501


        :return: The object_id of this UpdateReasons.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this UpdateReasons.


        :param object_id: The object_id of this UpdateReasons.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def username(self):
        """Gets the username of this UpdateReasons.  # noqa: E501


        :return: The username of this UpdateReasons.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UpdateReasons.


        :param username: The username of this UpdateReasons.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateReasons, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateReasons):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
