# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.netscan import Netscan  # noqa: F401,E501

class EnhancedScriptNetscan(Netscan):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'script_path': 'str',
        'default_group_full_path': 'str',
        'groovy_script': 'str',
        'credentials': 'RestNMapNetscanPolicyCredential',
        'linux_script_params': 'str',
        'groovy_script_params': 'str',
        'windows_script': 'str',
        'filters': 'list[DeviceFilter]',
        'default_group': 'int',
        'script_type': 'str',
        'windows_script_params': 'str',
        'script_params': 'str',
        'linux_script': 'str'
    }
    if hasattr(Netscan, "swagger_types"):
        swagger_types.update(Netscan.swagger_types)

    attribute_map = {
        'script_path': 'scriptPath',
        'default_group_full_path': 'defaultGroupFullPath',
        'groovy_script': 'groovyScript',
        'credentials': 'credentials',
        'linux_script_params': 'linuxScriptParams',
        'groovy_script_params': 'groovyScriptParams',
        'windows_script': 'windowsScript',
        'filters': 'filters',
        'default_group': 'defaultGroup',
        'script_type': 'scriptType',
        'windows_script_params': 'windowsScriptParams',
        'script_params': 'scriptParams',
        'linux_script': 'linuxScript'
    }
    if hasattr(Netscan, "attribute_map"):
        attribute_map.update(Netscan.attribute_map)

    def __init__(self, script_path=None, default_group_full_path=None, groovy_script=None, credentials=None, linux_script_params=None, groovy_script_params=None, windows_script=None, filters=None, default_group=None, script_type=None, windows_script_params=None, script_params=None, linux_script=None, *args, **kwargs):  # noqa: E501
        """EnhancedScriptNetscan - a model defined in Swagger"""  # noqa: E501
        self._script_path = None
        self._default_group_full_path = None
        self._groovy_script = None
        self._credentials = None
        self._linux_script_params = None
        self._groovy_script_params = None
        self._windows_script = None
        self._filters = None
        self._default_group = None
        self._script_type = None
        self._windows_script_params = None
        self._script_params = None
        self._linux_script = None
        self.discriminator = None
        if script_path is not None:
            self.script_path = script_path
        if default_group_full_path is not None:
            self.default_group_full_path = default_group_full_path
        if groovy_script is not None:
            self.groovy_script = groovy_script
        if credentials is not None:
            self.credentials = credentials
        if linux_script_params is not None:
            self.linux_script_params = linux_script_params
        if groovy_script_params is not None:
            self.groovy_script_params = groovy_script_params
        if windows_script is not None:
            self.windows_script = windows_script
        if filters is not None:
            self.filters = filters
        if default_group is not None:
            self.default_group = default_group
        self.script_type = script_type
        if windows_script_params is not None:
            self.windows_script_params = windows_script_params
        if script_params is not None:
            self.script_params = script_params
        if linux_script is not None:
            self.linux_script = linux_script
        Netscan.__init__(self, *args, **kwargs)

    @property
    def script_path(self):
        """Gets the script_path of this EnhancedScriptNetscan.  # noqa: E501

        The script path for an external script  # noqa: E501

        :return: The script_path of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: str
        """
        return self._script_path

    @script_path.setter
    def script_path(self, script_path):
        """Sets the script_path of this EnhancedScriptNetscan.

        The script path for an external script  # noqa: E501

        :param script_path: The script_path of this EnhancedScriptNetscan.  # noqa: E501
        :type: str
        """

        self._script_path = script_path

    @property
    def default_group_full_path(self):
        """Gets the default_group_full_path of this EnhancedScriptNetscan.  # noqa: E501

        The full path of the default group to add discovered devices to  # noqa: E501

        :return: The default_group_full_path of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: str
        """
        return self._default_group_full_path

    @default_group_full_path.setter
    def default_group_full_path(self, default_group_full_path):
        """Sets the default_group_full_path of this EnhancedScriptNetscan.

        The full path of the default group to add discovered devices to  # noqa: E501

        :param default_group_full_path: The default_group_full_path of this EnhancedScriptNetscan.  # noqa: E501
        :type: str
        """

        self._default_group_full_path = default_group_full_path

    @property
    def groovy_script(self):
        """Gets the groovy_script of this EnhancedScriptNetscan.  # noqa: E501

        For embedded script scans, the groovy script contents  # noqa: E501

        :return: The groovy_script of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: str
        """
        return self._groovy_script

    @groovy_script.setter
    def groovy_script(self, groovy_script):
        """Sets the groovy_script of this EnhancedScriptNetscan.

        For embedded script scans, the groovy script contents  # noqa: E501

        :param groovy_script: The groovy_script of this EnhancedScriptNetscan.  # noqa: E501
        :type: str
        """

        self._groovy_script = groovy_script

    @property
    def credentials(self):
        """Gets the credentials of this EnhancedScriptNetscan.  # noqa: E501


        :return: The credentials of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: RestNMapNetscanPolicyCredential
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this EnhancedScriptNetscan.


        :param credentials: The credentials of this EnhancedScriptNetscan.  # noqa: E501
        :type: RestNMapNetscanPolicyCredential
        """

        self._credentials = credentials

    @property
    def linux_script_params(self):
        """Gets the linux_script_params of this EnhancedScriptNetscan.  # noqa: E501


        :return: The linux_script_params of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: str
        """
        return self._linux_script_params

    @linux_script_params.setter
    def linux_script_params(self, linux_script_params):
        """Sets the linux_script_params of this EnhancedScriptNetscan.


        :param linux_script_params: The linux_script_params of this EnhancedScriptNetscan.  # noqa: E501
        :type: str
        """

        self._linux_script_params = linux_script_params

    @property
    def groovy_script_params(self):
        """Gets the groovy_script_params of this EnhancedScriptNetscan.  # noqa: E501

        For embedded script scans, the groovy script parameters  # noqa: E501

        :return: The groovy_script_params of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: str
        """
        return self._groovy_script_params

    @groovy_script_params.setter
    def groovy_script_params(self, groovy_script_params):
        """Sets the groovy_script_params of this EnhancedScriptNetscan.

        For embedded script scans, the groovy script parameters  # noqa: E501

        :param groovy_script_params: The groovy_script_params of this EnhancedScriptNetscan.  # noqa: E501
        :type: str
        """

        self._groovy_script_params = groovy_script_params

    @property
    def windows_script(self):
        """Gets the windows_script of this EnhancedScriptNetscan.  # noqa: E501


        :return: The windows_script of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: str
        """
        return self._windows_script

    @windows_script.setter
    def windows_script(self, windows_script):
        """Sets the windows_script of this EnhancedScriptNetscan.


        :param windows_script: The windows_script of this EnhancedScriptNetscan.  # noqa: E501
        :type: str
        """

        self._windows_script = windows_script

    @property
    def filters(self):
        """Gets the filters of this EnhancedScriptNetscan.  # noqa: E501

        The filter to be applied to filter out the reported devices  # noqa: E501

        :return: The filters of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: list[DeviceFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this EnhancedScriptNetscan.

        The filter to be applied to filter out the reported devices  # noqa: E501

        :param filters: The filters of this EnhancedScriptNetscan.  # noqa: E501
        :type: list[DeviceFilter]
        """

        self._filters = filters

    @property
    def default_group(self):
        """Gets the default_group of this EnhancedScriptNetscan.  # noqa: E501

        The ID of the default group to add discovered devices to  # noqa: E501

        :return: The default_group of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: int
        """
        return self._default_group

    @default_group.setter
    def default_group(self, default_group):
        """Sets the default_group of this EnhancedScriptNetscan.

        The ID of the default group to add discovered devices to  # noqa: E501

        :param default_group: The default_group of this EnhancedScriptNetscan.  # noqa: E501
        :type: int
        """

        self._default_group = default_group

    @property
    def script_type(self):
        """Gets the script_type of this EnhancedScriptNetscan.  # noqa: E501

        For script scans, the type of script. Options are embeded and external  # noqa: E501

        :return: The script_type of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: str
        """
        return self._script_type

    @script_type.setter
    def script_type(self, script_type):
        """Sets the script_type of this EnhancedScriptNetscan.

        For script scans, the type of script. Options are embeded and external  # noqa: E501

        :param script_type: The script_type of this EnhancedScriptNetscan.  # noqa: E501
        :type: str
        """
        if script_type is None:
            raise ValueError("Invalid value for `script_type`, must not be `None`")  # noqa: E501

        self._script_type = script_type

    @property
    def windows_script_params(self):
        """Gets the windows_script_params of this EnhancedScriptNetscan.  # noqa: E501


        :return: The windows_script_params of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: str
        """
        return self._windows_script_params

    @windows_script_params.setter
    def windows_script_params(self, windows_script_params):
        """Sets the windows_script_params of this EnhancedScriptNetscan.


        :param windows_script_params: The windows_script_params of this EnhancedScriptNetscan.  # noqa: E501
        :type: str
        """

        self._windows_script_params = windows_script_params

    @property
    def script_params(self):
        """Gets the script_params of this EnhancedScriptNetscan.  # noqa: E501

        The parameters for an external script  # noqa: E501

        :return: The script_params of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: str
        """
        return self._script_params

    @script_params.setter
    def script_params(self, script_params):
        """Sets the script_params of this EnhancedScriptNetscan.

        The parameters for an external script  # noqa: E501

        :param script_params: The script_params of this EnhancedScriptNetscan.  # noqa: E501
        :type: str
        """

        self._script_params = script_params

    @property
    def linux_script(self):
        """Gets the linux_script of this EnhancedScriptNetscan.  # noqa: E501


        :return: The linux_script of this EnhancedScriptNetscan.  # noqa: E501
        :rtype: str
        """
        return self._linux_script

    @linux_script.setter
    def linux_script(self, linux_script):
        """Sets the linux_script of this EnhancedScriptNetscan.


        :param linux_script: The linux_script of this EnhancedScriptNetscan.  # noqa: E501
        :type: str
        """

        self._linux_script = linux_script

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnhancedScriptNetscan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnhancedScriptNetscan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
