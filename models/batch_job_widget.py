# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. <br> <br> Note: <ul> <li> For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. </li> <li> Both underscore and camelCase are supported if parameters are encapsulated within the body. </li> <li> Only camelCase is supported if parameters are encapsulated within the body and also if the user is passing raw JSON as REQUEST parameter. However, the RESPONSE parameters always contain an underscore. For example, you can use testLocation or test_location in the REQUEST parameter. But the RESPONSE parameter will always be test_location. </li> <li> The fields parameter only supports camelCase. </li> </ul>  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from logicmonitor_sdk.models.widget import Widget  # noqa: F401,E501

class BatchJobWidget(Widget):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_display_name': 'str',
        'batch_job_id': 'int',
        'batch_job_name': 'str',
        'device_display_name': 'str'
    }
    if hasattr(Widget, "swagger_types"):
        swagger_types.update(Widget.swagger_types)

    attribute_map = {
        'group_display_name': 'groupDisplayName',
        'batch_job_id': 'batchJobId',
        'batch_job_name': 'batchJobName',
        'device_display_name': 'deviceDisplayName'
    }
    if hasattr(Widget, "attribute_map"):
        attribute_map.update(Widget.attribute_map)

    def __init__(self, group_display_name=None, batch_job_id=None, batch_job_name=None, device_display_name=None, *args, **kwargs):  # noqa: E501
        """BatchJobWidget - a model defined in Swagger"""  # noqa: E501
        self._group_display_name = None
        self._batch_job_id = None
        self._batch_job_name = None
        self._device_display_name = None
        self.discriminator = None
        if group_display_name is not None:
            self.group_display_name = group_display_name
        if batch_job_id is not None:
            self.batch_job_id = batch_job_id
        if batch_job_name is not None:
            self.batch_job_name = batch_job_name
        if device_display_name is not None:
            self.device_display_name = device_display_name
        Widget.__init__(self, *args, **kwargs)

    @property
    def group_display_name(self):
        """Gets the group_display_name of this BatchJobWidget.  # noqa: E501

        The display name of the device group in LogicMonitor that the batchjob is running on  # noqa: E501

        :return: The group_display_name of this BatchJobWidget.  # noqa: E501
        :rtype: str
        """
        return self._group_display_name

    @group_display_name.setter
    def group_display_name(self, group_display_name):
        """Sets the group_display_name of this BatchJobWidget.

        The display name of the device group in LogicMonitor that the batchjob is running on  # noqa: E501

        :param group_display_name: The group_display_name of this BatchJobWidget.  # noqa: E501
        :type: str
        """

        self._group_display_name = group_display_name

    @property
    def batch_job_id(self):
        """Gets the batch_job_id of this BatchJobWidget.  # noqa: E501

        The id of the batchjob definition in LogicMonitor  # noqa: E501

        :return: The batch_job_id of this BatchJobWidget.  # noqa: E501
        :rtype: int
        """
        return self._batch_job_id

    @batch_job_id.setter
    def batch_job_id(self, batch_job_id):
        """Sets the batch_job_id of this BatchJobWidget.

        The id of the batchjob definition in LogicMonitor  # noqa: E501

        :param batch_job_id: The batch_job_id of this BatchJobWidget.  # noqa: E501
        :type: int
        """

        self._batch_job_id = batch_job_id

    @property
    def batch_job_name(self):
        """Gets the batch_job_name of this BatchJobWidget.  # noqa: E501

        The name of the batchjob definition in LogicMonitor  # noqa: E501

        :return: The batch_job_name of this BatchJobWidget.  # noqa: E501
        :rtype: str
        """
        return self._batch_job_name

    @batch_job_name.setter
    def batch_job_name(self, batch_job_name):
        """Sets the batch_job_name of this BatchJobWidget.

        The name of the batchjob definition in LogicMonitor  # noqa: E501

        :param batch_job_name: The batch_job_name of this BatchJobWidget.  # noqa: E501
        :type: str
        """

        self._batch_job_name = batch_job_name

    @property
    def device_display_name(self):
        """Gets the device_display_name of this BatchJobWidget.  # noqa: E501

        The display name of the device in LogicMonitor that the batchjob is running on  # noqa: E501

        :return: The device_display_name of this BatchJobWidget.  # noqa: E501
        :rtype: str
        """
        return self._device_display_name

    @device_display_name.setter
    def device_display_name(self, device_display_name):
        """Sets the device_display_name of this BatchJobWidget.

        The display name of the device in LogicMonitor that the batchjob is running on  # noqa: E501

        :param device_display_name: The device_display_name of this BatchJobWidget.  # noqa: E501
        :type: str
        """

        self._device_display_name = device_display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchJobWidget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchJobWidget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
